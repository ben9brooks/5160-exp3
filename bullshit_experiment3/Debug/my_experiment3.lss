
my_experiment3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800100  00001478  0000150c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001478  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  008001b8  008001b8  000015c4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001620  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002df1  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000127d  00000000  00000000  000045e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001342  00000000  00000000  0000585e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000043c  00000000  00000000  00006ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009ac  00000000  00000000  00006fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017d1  00000000  00000000  00007988  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00009159  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 92 00 	jmp	0x124	; 0x124 <__ctors_end>
       4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
       c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      10:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      14:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      18:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      1c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      20:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      24:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      28:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      2c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      30:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      34:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      38:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      3c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      40:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      44:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      48:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      4c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      50:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      54:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      58:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      5c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      60:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      64:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      68:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      6c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      70:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      74:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      78:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      7c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      80:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      84:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      88:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      8c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      90:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      94:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      98:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      9c:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      a0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      a4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      a8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      ac:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      b0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      b4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      b8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      bc:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      c0:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      c4:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      c8:	0c 94 af 00 	jmp	0x15e	; 0x15e <__bad_interrupt>
      cc:	6e 06       	cpc	r6, r30
      ce:	76 06       	cpc	r7, r22
      d0:	66 06       	cpc	r6, r22
      d2:	5e 06       	cpc	r5, r30
      d4:	56 06       	cpc	r5, r22
      d6:	4e 06       	cpc	r4, r30
      d8:	46 06       	cpc	r4, r22
      da:	3e 06       	cpc	r3, r30
      dc:	36 06       	cpc	r3, r22
      de:	2e 06       	cpc	r2, r30
      e0:	26 06       	cpc	r2, r22
      e2:	1e 06       	cpc	r1, r30

000000e4 <Prnt_bytes_prnt>:
      e4:	41 64 64 72 2e 20 4f 66 66 73 65 74 20 20 20 30     Addr. Offset   0
      f4:	20 20 31 20 20 32 20 20 33 20 20 34 20 20 35 20       1  2  3  4  5 
     104:	20 36 20 20 37 20 20 38 20 20 39 20 20 41 20 20      6  7  8  9  A  
     114:	42 20 20 43 20 20 44 20 20 45 20 20 46 0a 0d 00     B  C  D  E  F...

00000124 <__ctors_end>:
     124:	11 24       	eor	r1, r1
     126:	1f be       	out	0x3f, r1	; 63
     128:	cf ef       	ldi	r28, 0xFF	; 255
     12a:	d8 e0       	ldi	r29, 0x08	; 8
     12c:	de bf       	out	0x3e, r29	; 62
     12e:	cd bf       	out	0x3d, r28	; 61

00000130 <__do_copy_data>:
     130:	11 e0       	ldi	r17, 0x01	; 1
     132:	a0 e0       	ldi	r26, 0x00	; 0
     134:	b1 e0       	ldi	r27, 0x01	; 1
     136:	e8 e7       	ldi	r30, 0x78	; 120
     138:	f4 e1       	ldi	r31, 0x14	; 20
     13a:	02 c0       	rjmp	.+4      	; 0x140 <__do_copy_data+0x10>
     13c:	05 90       	lpm	r0, Z+
     13e:	0d 92       	st	X+, r0
     140:	a8 3b       	cpi	r26, 0xB8	; 184
     142:	b1 07       	cpc	r27, r17
     144:	d9 f7       	brne	.-10     	; 0x13c <__do_copy_data+0xc>

00000146 <__do_clear_bss>:
     146:	22 e0       	ldi	r18, 0x02	; 2
     148:	a8 eb       	ldi	r26, 0xB8	; 184
     14a:	b1 e0       	ldi	r27, 0x01	; 1
     14c:	01 c0       	rjmp	.+2      	; 0x150 <.do_clear_bss_start>

0000014e <.do_clear_bss_loop>:
     14e:	1d 92       	st	X+, r1

00000150 <.do_clear_bss_start>:
     150:	a8 30       	cpi	r26, 0x08	; 8
     152:	b2 07       	cpc	r27, r18
     154:	e1 f7       	brne	.-8      	; 0x14e <.do_clear_bss_loop>
     156:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
     15a:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <_exit>

0000015e <__bad_interrupt>:
     15e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000162 <GPIO_Output_Init>:

//Sets DDRX bit to make port pin an output
void GPIO_Output_Init(volatile GPIO_port_t *port_addr, uint8_t pin_mask)
{
  
  port_addr->DDR_REG |= (pin_mask);
     162:	fc 01       	movw	r30, r24
     164:	21 81       	ldd	r18, Z+1	; 0x01
     166:	62 2b       	or	r22, r18
     168:	61 83       	std	Z+1, r22	; 0x01
     16a:	08 95       	ret

0000016c <GPIO_Output_Set>:

// Sets the GPIO output to 1
void GPIO_Output_Set(volatile GPIO_port_t *port_addr, uint8_t pin_mask)
{
  //dereferences port address' port register via struct, sets to 1 with |=
  port_addr->PORT_REG |= (pin_mask);
     16c:	fc 01       	movw	r30, r24
     16e:	22 81       	ldd	r18, Z+2	; 0x02
     170:	62 2b       	or	r22, r18
     172:	62 83       	std	Z+2, r22	; 0x02
     174:	08 95       	ret

00000176 <GPIO_Output_Clear>:
}

// Clears the GPIO output to 0
void GPIO_Output_Clear(volatile GPIO_port_t *port_addr, uint8_t pin_mask)
{
     176:	fc 01       	movw	r30, r24
  ////dereferences port address' port register via struct, sets to 0 with &= ~()
  port_addr->PORT_REG &= ~(pin_mask);
     178:	92 81       	ldd	r25, Z+2	; 0x02
     17a:	60 95       	com	r22
     17c:	69 23       	and	r22, r25
     17e:	62 83       	std	Z+2, r22	; 0x02
     180:	08 95       	ret

00000182 <long_serial_input>:
RETURNS: unsigned long
CAUTION: UART must be initialized first
************************************************************************/

uint32_t long_serial_input(volatile UART_t * UART_addr)
{
     182:	8f 92       	push	r8
     184:	9f 92       	push	r9
     186:	af 92       	push	r10
     188:	bf 92       	push	r11
     18a:	ef 92       	push	r14
     18c:	ff 92       	push	r15
     18e:	0f 93       	push	r16
     190:	1f 93       	push	r17
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
     196:	cd b7       	in	r28, 0x3d	; 61
     198:	de b7       	in	r29, 0x3e	; 62
     19a:	2b 97       	sbiw	r28, 0x0b	; 11
     19c:	0f b6       	in	r0, 0x3f	; 63
     19e:	f8 94       	cli
     1a0:	de bf       	out	0x3e, r29	; 62
     1a2:	0f be       	out	0x3f, r0	; 63
     1a4:	cd bf       	out	0x3d, r28	; 61
     1a6:	7c 01       	movw	r14, r24
   uint8_t index,input;
   char input_values[11];   
   uint32_t output_value;
      for(index=0;index<11;index++)
     1a8:	80 e0       	ldi	r24, 0x00	; 0
     1aa:	08 c0       	rjmp	.+16     	; 0x1bc <long_serial_input+0x3a>
      {
        input_values[index]=0;
     1ac:	e1 e0       	ldi	r30, 0x01	; 1
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	ec 0f       	add	r30, r28
     1b2:	fd 1f       	adc	r31, r29
     1b4:	e8 0f       	add	r30, r24
     1b6:	f1 1d       	adc	r31, r1
     1b8:	10 82       	st	Z, r1
uint32_t long_serial_input(volatile UART_t * UART_addr)
{
   uint8_t index,input;
   char input_values[11];   
   uint32_t output_value;
      for(index=0;index<11;index++)
     1ba:	8f 5f       	subi	r24, 0xFF	; 255
     1bc:	8b 30       	cpi	r24, 0x0B	; 11
     1be:	b0 f3       	brcs	.-20     	; 0x1ac <long_serial_input+0x2a>
     1c0:	88 24       	eor	r8, r8
     1c2:	8a 94       	dec	r8
     1c4:	98 2c       	mov	r9, r8
     1c6:	54 01       	movw	r10, r8
     1c8:	00 e0       	ldi	r16, 0x00	; 0
      }
      output_value=0xffffffff;
      index=0;
      do
      {
         input=UART_receive(UART_addr);
     1ca:	c7 01       	movw	r24, r14
     1cc:	0e 94 90 06 	call	0xd20	; 0xd20 <UART_receive>
     1d0:	18 2f       	mov	r17, r24
         if((input>=0x30)&&(input<=0x39))
     1d2:	80 ed       	ldi	r24, 0xD0	; 208
     1d4:	81 0f       	add	r24, r17
     1d6:	8a 30       	cpi	r24, 0x0A	; 10
     1d8:	68 f4       	brcc	.+26     	; 0x1f4 <long_serial_input+0x72>
         {
           UART_transmit(UART_addr,input);    // echo valid inputs only
     1da:	61 2f       	mov	r22, r17
     1dc:	c7 01       	movw	r24, r14
     1de:	0e 94 8a 06 	call	0xd14	; 0xd14 <UART_transmit>
		   input_values[index]=input;
     1e2:	e1 e0       	ldi	r30, 0x01	; 1
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	ec 0f       	add	r30, r28
     1e8:	fd 1f       	adc	r31, r29
     1ea:	e0 0f       	add	r30, r16
     1ec:	f1 1d       	adc	r31, r1
     1ee:	10 83       	st	Z, r17
           index++;
     1f0:	0f 5f       	subi	r16, 0xFF	; 255
     1f2:	2d c0       	rjmp	.+90     	; 0x24e <long_serial_input+0xcc>
         }
         else if ((input==BS)||(input==DEL))  // Putty uses DEL (127) or BS (0x08) for backspace
     1f4:	18 30       	cpi	r17, 0x08	; 8
     1f6:	11 f0       	breq	.+4      	; 0x1fc <long_serial_input+0x7a>
     1f8:	1f 37       	cpi	r17, 0x7F	; 127
     1fa:	a9 f4       	brne	.+42     	; 0x226 <long_serial_input+0xa4>
         {
           index--;
     1fc:	01 50       	subi	r16, 0x01	; 1
           input_values[index]=0;
     1fe:	e1 e0       	ldi	r30, 0x01	; 1
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	ec 0f       	add	r30, r28
     204:	fd 1f       	adc	r31, r29
     206:	e0 0f       	add	r30, r16
     208:	f1 1d       	adc	r31, r1
     20a:	10 82       	st	Z, r1
		   UART_transmit(UART_addr,BS);
     20c:	68 e0       	ldi	r22, 0x08	; 8
     20e:	c7 01       	movw	r24, r14
     210:	0e 94 8a 06 	call	0xd14	; 0xd14 <UART_transmit>
           UART_transmit(UART_addr,space);
     214:	60 e2       	ldi	r22, 0x20	; 32
     216:	c7 01       	movw	r24, r14
     218:	0e 94 8a 06 	call	0xd14	; 0xd14 <UART_transmit>
           UART_transmit(UART_addr,BS);
     21c:	68 e0       	ldi	r22, 0x08	; 8
     21e:	c7 01       	movw	r24, r14
     220:	0e 94 8a 06 	call	0xd14	; 0xd14 <UART_transmit>
     224:	14 c0       	rjmp	.+40     	; 0x24e <long_serial_input+0xcc>
         }
		 //*** Added '.' as a replacement for ENTER since CR or LF does not work for Atmel Studio Data Visualizer ****//
         else if ((input==CR)||(input==LF)||(input=='.'))
     226:	1d 30       	cpi	r17, 0x0D	; 13
     228:	21 f0       	breq	.+8      	; 0x232 <long_serial_input+0xb0>
     22a:	1a 30       	cpi	r17, 0x0A	; 10
     22c:	11 f0       	breq	.+4      	; 0x232 <long_serial_input+0xb0>
     22e:	1e 32       	cpi	r17, 0x2E	; 46
     230:	71 f4       	brne	.+28     	; 0x24e <long_serial_input+0xcc>
         {
            output_value=atol(input_values);
     232:	ce 01       	movw	r24, r28
     234:	01 96       	adiw	r24, 0x01	; 1
     236:	0e 94 14 07 	call	0xe28	; 0xe28 <atol>
     23a:	4b 01       	movw	r8, r22
     23c:	5c 01       	movw	r10, r24
            UART_transmit(UART_addr,CR);
     23e:	6d e0       	ldi	r22, 0x0D	; 13
     240:	c7 01       	movw	r24, r14
     242:	0e 94 8a 06 	call	0xd14	; 0xd14 <UART_transmit>
			UART_transmit(UART_addr,LF);
     246:	6a e0       	ldi	r22, 0x0A	; 10
     248:	c7 01       	movw	r24, r14
     24a:	0e 94 8a 06 	call	0xd14	; 0xd14 <UART_transmit>
         }
         if(index==10)
     24e:	0a 30       	cpi	r16, 0x0A	; 10
     250:	71 f4       	brne	.+28     	; 0x26e <long_serial_input+0xec>
         {
            output_value=atol(input_values);
     252:	ce 01       	movw	r24, r28
     254:	01 96       	adiw	r24, 0x01	; 1
     256:	0e 94 14 07 	call	0xe28	; 0xe28 <atol>
     25a:	4b 01       	movw	r8, r22
     25c:	5c 01       	movw	r10, r24
            UART_transmit(UART_addr,CR);
     25e:	6d e0       	ldi	r22, 0x0D	; 13
     260:	c7 01       	movw	r24, r14
     262:	0e 94 8a 06 	call	0xd14	; 0xd14 <UART_transmit>
			UART_transmit(UART_addr,LF);
     266:	6a e0       	ldi	r22, 0x0A	; 10
     268:	c7 01       	movw	r24, r14
     26a:	0e 94 8a 06 	call	0xd14	; 0xd14 <UART_transmit>
         }
      }while(output_value==0xffffffff);
     26e:	8f ef       	ldi	r24, 0xFF	; 255
     270:	88 16       	cp	r8, r24
     272:	98 06       	cpc	r9, r24
     274:	a8 06       	cpc	r10, r24
     276:	b8 06       	cpc	r11, r24
     278:	09 f4       	brne	.+2      	; 0x27c <long_serial_input+0xfa>
     27a:	a7 cf       	rjmp	.-178    	; 0x1ca <long_serial_input+0x48>

return output_value;
}
     27c:	c5 01       	movw	r24, r10
     27e:	b4 01       	movw	r22, r8
     280:	2b 96       	adiw	r28, 0x0b	; 11
     282:	0f b6       	in	r0, 0x3f	; 63
     284:	f8 94       	cli
     286:	de bf       	out	0x3e, r29	; 62
     288:	0f be       	out	0x3f, r0	; 63
     28a:	cd bf       	out	0x3d, r28	; 61
     28c:	df 91       	pop	r29
     28e:	cf 91       	pop	r28
     290:	1f 91       	pop	r17
     292:	0f 91       	pop	r16
     294:	ff 90       	pop	r15
     296:	ef 90       	pop	r14
     298:	bf 90       	pop	r11
     29a:	af 90       	pop	r10
     29c:	9f 90       	pop	r9
     29e:	8f 90       	pop	r8
     2a0:	08 95       	ret

000002a2 <main>:
#include "UART_Print.h"
#include "Long_Serial_In.h"
#include "print_memory.h"

int main(void)
{
     2a2:	cf 92       	push	r12
     2a4:	df 92       	push	r13
     2a6:	ef 92       	push	r14
     2a8:	ff 92       	push	r15
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
     2b2:	cd 50       	subi	r28, 0x0D	; 13
     2b4:	d2 40       	sbci	r29, 0x02	; 2
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	f8 94       	cli
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	cd bf       	out	0x3d, r28	; 61
	/*****
	*
	* Experiment 2 Initializations
	*
	*****/
	UART_init(UART0, BAUD_RATE);
     2c0:	60 e8       	ldi	r22, 0x80	; 128
     2c2:	75 e2       	ldi	r23, 0x25	; 37
     2c4:	80 ec       	ldi	r24, 0xC0	; 192
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0e 94 7e 06 	call	0xcfc	; 0xcfc <UART_init>
	UART_init(UART1, BAUD_RATE);
     2cc:	60 e8       	ldi	r22, 0x80	; 128
     2ce:	75 e2       	ldi	r23, 0x25	; 37
     2d0:	88 ec       	ldi	r24, 0xC8	; 200
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	0e 94 7e 06 	call	0xcfc	; 0xcfc <UART_init>
	UART_init(UART2, BAUD_RATE);
     2d8:	60 e8       	ldi	r22, 0x80	; 128
     2da:	75 e2       	ldi	r23, 0x25	; 37
     2dc:	80 ed       	ldi	r24, 0xD0	; 208
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 7e 06 	call	0xcfc	; 0xcfc <UART_init>
	* Experiment 3 Initializations
	*
	*****/
	
	// 400KHz used for the first init, which is the max hz for now.
	SPI_master_init(SPI0, 400000U); // port 0 is used for SD card, OLED, MP3
     2e4:	40 e8       	ldi	r20, 0x80	; 128
     2e6:	5a e1       	ldi	r21, 0x1A	; 26
     2e8:	66 e0       	ldi	r22, 0x06	; 6
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	8c e4       	ldi	r24, 0x4C	; 76
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	0e 94 65 05 	call	0xaca	; 0xaca <SPI_master_init>
	uint32_t mem_block_num;
	uint8_t mem_block[512];
	ErrorTypes typederror = 0;
	
	// debug strings
	char start[] = "Start\n";
     2f4:	87 e0       	ldi	r24, 0x07	; 7
     2f6:	e7 e3       	ldi	r30, 0x37	; 55
     2f8:	f1 e0       	ldi	r31, 0x01	; 1
     2fa:	de 01       	movw	r26, r28
     2fc:	af 5f       	subi	r26, 0xFF	; 255
     2fe:	bd 4f       	sbci	r27, 0xFD	; 253
     300:	01 90       	ld	r0, Z+
     302:	0d 92       	st	X+, r0
     304:	8a 95       	dec	r24
     306:	e1 f7       	brne	.-8      	; 0x300 <main+0x5e>
	char stop[] = "Stop\n";
     308:	86 e0       	ldi	r24, 0x06	; 6
     30a:	ee e3       	ldi	r30, 0x3E	; 62
     30c:	f1 e0       	ldi	r31, 0x01	; 1
     30e:	de 01       	movw	r26, r28
     310:	a8 5f       	subi	r26, 0xF8	; 248
     312:	bd 4f       	sbci	r27, 0xFD	; 253
     314:	01 90       	ld	r0, Z+
     316:	0d 92       	st	X+, r0
     318:	8a 95       	dec	r24
     31a:	e1 f7       	brne	.-8      	; 0x314 <main+0x72>
	
	// initialize SS AKA CS
	GPIO_Output_Init(PB, (1<<4));
     31c:	60 e1       	ldi	r22, 0x10	; 16
     31e:	83 e2       	ldi	r24, 0x23	; 35
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 b1 00 	call	0x162	; 0x162 <GPIO_Output_Init>
	
	UART_transmit_string(UART1, start, 6);
     326:	46 e0       	ldi	r20, 0x06	; 6
     328:	be 01       	movw	r22, r28
     32a:	6f 5f       	subi	r22, 0xFF	; 255
     32c:	7d 4f       	sbci	r23, 0xFD	; 253
     32e:	88 ec       	ldi	r24, 0xC8	; 200
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	0e 94 bf 06 	call	0xd7e	; 0xd7e <UART_transmit_string>
	
	typederror = SD_init(SPI0);
     336:	8c e4       	ldi	r24, 0x4C	; 76
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0e 94 64 03 	call	0x6c8	; 0x6c8 <SD_init>
	if (typederror != 0)
     33e:	88 23       	and	r24, r24
     340:	29 f0       	breq	.+10     	; 0x34c <main+0xaa>
	{
		display_error(UART1, typederror);
     342:	68 2f       	mov	r22, r24
     344:	88 ec       	ldi	r24, 0xC8	; 200
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	0e 94 11 06 	call	0xc22	; 0xc22 <display_error>
	}
	
	//SPI can be reinitialized at a faster freq, now that the SD has been initialized.
	SPI_master_init(SPI0, 8000000U);
     34c:	40 e0       	ldi	r20, 0x00	; 0
     34e:	52 e1       	ldi	r21, 0x12	; 18
     350:	6a e7       	ldi	r22, 0x7A	; 122
     352:	70 e0       	ldi	r23, 0x00	; 0
     354:	8c e4       	ldi	r24, 0x4C	; 76
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 65 05 	call	0xaca	; 0xaca <SPI_master_init>
	

	UART_transmit_string(UART1, "SD initialized\n", 15);
     35c:	4f e0       	ldi	r20, 0x0F	; 15
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	71 e0       	ldi	r23, 0x01	; 1
     362:	88 ec       	ldi	r24, 0xC8	; 200
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	0e 94 bf 06 	call	0xd7e	; 0xd7e <UART_transmit_string>

	// to debug SPI_transmit on MSO: Trigger Menu: Type=Edge, Source=D0, Slope=All, Level=1.51, Normal
	while (1)
	{
		UART_transmit_string(UART1, "Input Block Number:\n", 21);
     36a:	45 e1       	ldi	r20, 0x15	; 21
     36c:	60 e1       	ldi	r22, 0x10	; 16
     36e:	71 e0       	ldi	r23, 0x01	; 1
     370:	88 ec       	ldi	r24, 0xC8	; 200
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 bf 06 	call	0xd7e	; 0xd7e <UART_transmit_string>
		mem_block_num = long_serial_input(UART1);
     378:	88 ec       	ldi	r24, 0xC8	; 200
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 c1 00 	call	0x182	; 0x182 <long_serial_input>
     380:	6b 01       	movw	r12, r22
     382:	7c 01       	movw	r14, r24
		UART_transmit_string(UART1, "Reading Block...\n", 18);
     384:	42 e1       	ldi	r20, 0x12	; 18
     386:	65 e2       	ldi	r22, 0x25	; 37
     388:	71 e0       	ldi	r23, 0x01	; 1
     38a:	88 ec       	ldi	r24, 0xC8	; 200
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	0e 94 bf 06 	call	0xd7e	; 0xd7e <UART_transmit_string>
		//set SD low/active
		SD_CS_active(PB, (1<<4));
     392:	60 e1       	ldi	r22, 0x10	; 16
     394:	83 e2       	ldi	r24, 0x23	; 35
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 b7 02 	call	0x56e	; 0x56e <SD_CS_active>
		// read block with CMD17
		typederror = send_command(SPI0, CMD17, mem_block_num);
     39c:	a7 01       	movw	r20, r14
     39e:	96 01       	movw	r18, r12
     3a0:	61 e1       	ldi	r22, 0x11	; 17
     3a2:	8c e4       	ldi	r24, 0x4C	; 76
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	0e 94 bd 02 	call	0x57a	; 0x57a <send_command>
		if(typederror != 0)
     3aa:	88 23       	and	r24, r24
     3ac:	31 f0       	breq	.+12     	; 0x3ba <main+0x118>
		{
			display_error(UART1, typederror);
     3ae:	68 2f       	mov	r22, r24
     3b0:	88 ec       	ldi	r24, 0xC8	; 200
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	0e 94 11 06 	call	0xc22	; 0xc22 <display_error>
			break;
     3b8:	18 c0       	rjmp	.+48     	; 0x3ea <main+0x148>
		}
		typederror = read_block(SPI0, 512, mem_block);
     3ba:	ae 01       	movw	r20, r28
     3bc:	4f 5f       	subi	r20, 0xFF	; 255
     3be:	5f 4f       	sbci	r21, 0xFF	; 255
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	72 e0       	ldi	r23, 0x02	; 2
     3c4:	8c e4       	ldi	r24, 0x4C	; 76
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	0e 94 b0 04 	call	0x960	; 0x960 <read_block>
		if(typederror != 0)
     3cc:	88 23       	and	r24, r24
     3ce:	31 f0       	breq	.+12     	; 0x3dc <main+0x13a>
		{
			display_error(UART1, typederror);
     3d0:	68 2f       	mov	r22, r24
     3d2:	88 ec       	ldi	r24, 0xC8	; 200
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 11 06 	call	0xc22	; 0xc22 <display_error>
			break;
     3da:	07 c0       	rjmp	.+14     	; 0x3ea <main+0x148>
		}
		//print block
		print_memory(mem_block, 512);
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	72 e0       	ldi	r23, 0x02	; 2
     3e0:	ce 01       	movw	r24, r28
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	0e 94 8f 02 	call	0x51e	; 0x51e <print_memory>
		
	}
     3e8:	c0 cf       	rjmp	.-128    	; 0x36a <main+0xc8>
	
	UART_transmit_string(UART1, stop, 5);
     3ea:	45 e0       	ldi	r20, 0x05	; 5
     3ec:	be 01       	movw	r22, r28
     3ee:	68 5f       	subi	r22, 0xF8	; 248
     3f0:	7d 4f       	sbci	r23, 0xFD	; 253
     3f2:	88 ec       	ldi	r24, 0xC8	; 200
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <UART_transmit_string>
	UART_transmit(UART1, '\n');
     3fa:	6a e0       	ldi	r22, 0x0A	; 10
     3fc:	88 ec       	ldi	r24, 0xC8	; 200
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 8a 06 	call	0xd14	; 0xd14 <UART_transmit>
	return 0;
}
     404:	80 e0       	ldi	r24, 0x00	; 0
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	c3 5f       	subi	r28, 0xF3	; 243
     40a:	dd 4f       	sbci	r29, 0xFD	; 253
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	f8 94       	cli
     410:	de bf       	out	0x3e, r29	; 62
     412:	0f be       	out	0x3f, r0	; 63
     414:	cd bf       	out	0x3d, r28	; 61
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	ff 90       	pop	r15
     41c:	ef 90       	pop	r14
     41e:	df 90       	pop	r13
     420:	cf 90       	pop	r12
     422:	08 95       	ret

00000424 <print_16bytes>:
INPUT: Pointer to an array of eight bytes
RETURNS: nothing
CAUTION: 
************************************************************************/
void print_16bytes(uint8_t * array_in, uint16_t offset)
{
     424:	cf 92       	push	r12
     426:	df 92       	push	r13
     428:	ff 92       	push	r15
     42a:	0f 93       	push	r16
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	8c 01       	movw	r16, r24
     434:	6b 01       	movw	r12, r22
   uint8_t * input;
   uint8_t index, dat;
   char * prnt_bffr;
   
   prnt_bffr=export_print_buffer();
     436:	0e 94 96 06 	call	0xd2c	; 0xd2c <export_print_buffer>
     43a:	f8 2e       	mov	r15, r24
     43c:	d9 2f       	mov	r29, r25
   
   input = array_in+offset;
     43e:	0c 0d       	add	r16, r12
     440:	1d 1d       	adc	r17, r13
   sprintf(prnt_bffr, "%p ",input);
     442:	1f 93       	push	r17
     444:	0f 93       	push	r16
     446:	84 e4       	ldi	r24, 0x44	; 68
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	9f 93       	push	r25
     44c:	8f 93       	push	r24
     44e:	df 93       	push	r29
     450:	ff 92       	push	r15
     452:	0e 94 50 07 	call	0xea0	; 0xea0 <sprintf>
   UART_transmit_string(print_port,prnt_bffr,0);
     456:	40 e0       	ldi	r20, 0x00	; 0
     458:	6f 2d       	mov	r22, r15
     45a:	7d 2f       	mov	r23, r29
     45c:	88 ec       	ldi	r24, 0xC8	; 200
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 bf 06 	call	0xd7e	; 0xd7e <UART_transmit_string>
   sprintf(prnt_bffr,"0x%4.4X  ",offset);
     464:	df 92       	push	r13
     466:	cf 92       	push	r12
     468:	88 e4       	ldi	r24, 0x48	; 72
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	9f 93       	push	r25
     46e:	8f 93       	push	r24
     470:	df 93       	push	r29
     472:	ff 92       	push	r15
     474:	0e 94 50 07 	call	0xea0	; 0xea0 <sprintf>
   UART_transmit_string(print_port,prnt_bffr,0);
     478:	40 e0       	ldi	r20, 0x00	; 0
     47a:	6f 2d       	mov	r22, r15
     47c:	7d 2f       	mov	r23, r29
     47e:	88 ec       	ldi	r24, 0xC8	; 200
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	0e 94 bf 06 	call	0xd7e	; 0xd7e <UART_transmit_string>
   for (index=0;index<16;index++)
     486:	8d b7       	in	r24, 0x3d	; 61
     488:	9e b7       	in	r25, 0x3e	; 62
     48a:	0c 96       	adiw	r24, 0x0c	; 12
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	f8 94       	cli
     490:	9e bf       	out	0x3e, r25	; 62
     492:	0f be       	out	0x3f, r0	; 63
     494:	8d bf       	out	0x3d, r24	; 61
     496:	c0 e0       	ldi	r28, 0x00	; 0
     498:	1c c0       	rjmp	.+56     	; 0x4d2 <print_16bytes+0xae>
   {
      dat=*(input+index);
     49a:	f8 01       	movw	r30, r16
     49c:	ec 0f       	add	r30, r28
     49e:	f1 1d       	adc	r31, r1
     4a0:	80 81       	ld	r24, Z
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
     4a2:	1f 92       	push	r1
     4a4:	8f 93       	push	r24
     4a6:	22 e5       	ldi	r18, 0x52	; 82
     4a8:	31 e0       	ldi	r19, 0x01	; 1
     4aa:	3f 93       	push	r19
     4ac:	2f 93       	push	r18
     4ae:	df 93       	push	r29
     4b0:	ff 92       	push	r15
     4b2:	0e 94 50 07 	call	0xea0	; 0xea0 <sprintf>
	  UART_transmit_string(print_port,prnt_bffr,0);
     4b6:	40 e0       	ldi	r20, 0x00	; 0
     4b8:	6f 2d       	mov	r22, r15
     4ba:	7d 2f       	mov	r23, r29
     4bc:	88 ec       	ldi	r24, 0xC8	; 200
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 bf 06 	call	0xd7e	; 0xd7e <UART_transmit_string>
   input = array_in+offset;
   sprintf(prnt_bffr, "%p ",input);
   UART_transmit_string(print_port,prnt_bffr,0);
   sprintf(prnt_bffr,"0x%4.4X  ",offset);
   UART_transmit_string(print_port,prnt_bffr,0);
   for (index=0;index<16;index++)
     4c4:	cf 5f       	subi	r28, 0xFF	; 255
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	c0 31       	cpi	r28, 0x10	; 16
     4d4:	10 f3       	brcs	.-60     	; 0x49a <print_16bytes+0x76>
     4d6:	c0 e0       	ldi	r28, 0x00	; 0
     4d8:	0e c0       	rjmp	.+28     	; 0x4f6 <print_16bytes+0xd2>
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
	  UART_transmit_string(print_port,prnt_bffr,0);
   }
   for (index=0;index<16;index++)
   { 
      dat=*(input+index);
     4da:	f8 01       	movw	r30, r16
     4dc:	ec 0f       	add	r30, r28
     4de:	f1 1d       	adc	r31, r1
     4e0:	60 81       	ld	r22, Z
      if (dat<32 || dat>127) dat=46;
     4e2:	80 ee       	ldi	r24, 0xE0	; 224
     4e4:	86 0f       	add	r24, r22
     4e6:	80 36       	cpi	r24, 0x60	; 96
     4e8:	08 f0       	brcs	.+2      	; 0x4ec <print_16bytes+0xc8>
     4ea:	6e e2       	ldi	r22, 0x2E	; 46
      UART_transmit(print_port,dat);
     4ec:	88 ec       	ldi	r24, 0xC8	; 200
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 8a 06 	call	0xd14	; 0xd14 <UART_transmit>
   {
      dat=*(input+index);
      sprintf(prnt_bffr, "%2.2X ",dat);   // Changed from %2.2bX because this printf function can correctly determine number of bytes
	  UART_transmit_string(print_port,prnt_bffr,0);
   }
   for (index=0;index<16;index++)
     4f4:	cf 5f       	subi	r28, 0xFF	; 255
     4f6:	c0 31       	cpi	r28, 0x10	; 16
     4f8:	80 f3       	brcs	.-32     	; 0x4da <print_16bytes+0xb6>
   { 
      dat=*(input+index);
      if (dat<32 || dat>127) dat=46;
      UART_transmit(print_port,dat);
   }
   UART_transmit(print_port,CR);
     4fa:	6d e0       	ldi	r22, 0x0D	; 13
     4fc:	88 ec       	ldi	r24, 0xC8	; 200
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 8a 06 	call	0xd14	; 0xd14 <UART_transmit>
   UART_transmit(print_port,LF);
     504:	6a e0       	ldi	r22, 0x0A	; 10
     506:	88 ec       	ldi	r24, 0xC8	; 200
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 8a 06 	call	0xd14	; 0xd14 <UART_transmit>
}
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	1f 91       	pop	r17
     514:	0f 91       	pop	r16
     516:	ff 90       	pop	r15
     518:	df 90       	pop	r13
     51a:	cf 90       	pop	r12
     51c:	08 95       	ret

0000051e <print_memory>:
INPUT: Pointer to an array, number of bytes to print
RETURNS: nothing
CAUTION: 
************************************************************************/
void print_memory(uint8_t * array_in, uint16_t number_of_bytes)
{
     51e:	ef 92       	push	r14
     520:	ff 92       	push	r15
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	7c 01       	movw	r14, r24
     52c:	8b 01       	movw	r16, r22
   uint16_t input;
   char * prnt_bffr;
   
   prnt_bffr=export_print_buffer();
     52e:	0e 94 96 06 	call	0xd2c	; 0xd2c <export_print_buffer>
     532:	ec 01       	movw	r28, r24
   
   input = 0;
   copy_string_to_buffer(Prnt_bytes_prnt,prnt_bffr,0);
     534:	40 e0       	ldi	r20, 0x00	; 0
     536:	bc 01       	movw	r22, r24
     538:	84 ee       	ldi	r24, 0xE4	; 228
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	0e 94 99 06 	call	0xd32	; 0xd32 <copy_string_to_buffer>
   UART_transmit_string(print_port,prnt_bffr,0);
     540:	40 e0       	ldi	r20, 0x00	; 0
     542:	be 01       	movw	r22, r28
     544:	88 ec       	ldi	r24, 0xC8	; 200
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	0e 94 bf 06 	call	0xd7e	; 0xd7e <UART_transmit_string>
   uint16_t input;
   char * prnt_bffr;
   
   prnt_bffr=export_print_buffer();
   
   input = 0;
     54c:	c0 e0       	ldi	r28, 0x00	; 0
     54e:	d0 e0       	ldi	r29, 0x00	; 0
   copy_string_to_buffer(Prnt_bytes_prnt,prnt_bffr,0);
   UART_transmit_string(print_port,prnt_bffr,0);
   do
   {
      print_16bytes(array_in,input);
     550:	be 01       	movw	r22, r28
     552:	c7 01       	movw	r24, r14
     554:	0e 94 12 02 	call	0x424	; 0x424 <print_16bytes>
      input+=16;
     558:	60 96       	adiw	r28, 0x10	; 16
   }while(input<(number_of_bytes));
     55a:	c0 17       	cp	r28, r16
     55c:	d1 07       	cpc	r29, r17
     55e:	c0 f3       	brcs	.-16     	; 0x550 <print_memory+0x32>
}
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	ff 90       	pop	r15
     56a:	ef 90       	pop	r14
     56c:	08 95       	ret

0000056e <SD_CS_active>:



void SD_CS_active(volatile GPIO_port_t *port, uint8_t pin)
{
	GPIO_Output_Clear(port,pin);
     56e:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_Output_Clear>
     572:	08 95       	ret

00000574 <SD_CS_inactive>:
}
void SD_CS_inactive(volatile GPIO_port_t *port, uint8_t pin)
{
	GPIO_Output_Set(port,pin);
     574:	0e 94 b6 00 	call	0x16c	; 0x16c <GPIO_Output_Set>
     578:	08 95       	ret

0000057a <send_command>:
}

uint8_t send_command (volatile SPI_t *SPI_addr, uint8_t command, uint32_t argument)
{
     57a:	8f 92       	push	r8
     57c:	9f 92       	push	r9
     57e:	af 92       	push	r10
     580:	bf 92       	push	r11
     582:	ef 92       	push	r14
     584:	ff 92       	push	r15
     586:	0f 93       	push	r16
     588:	1f 93       	push	r17
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	1f 92       	push	r1
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
    uint8_t checksum = 0x01; // Default checksum value
    uint8_t data; // Placeholder for received SPI data

	//1: check if command is 6 bits (<= 63). If not, error flag & function exits.
	
	if (command > 63)
     594:	60 34       	cpi	r22, 0x40	; 64
     596:	e0 f5       	brcc	.+120    	; 0x610 <send_command+0x96>
     598:	49 01       	movw	r8, r18
     59a:	5a 01       	movw	r10, r20
     59c:	7c 01       	movw	r14, r24
	{
		//change this?
		return ERROR_SPI;
	}
	//2: command OR'd with 0x40 to append start and transmission bits to the first byte to send.
	command |= 0x40;
     59e:	16 2f       	mov	r17, r22
     5a0:	10 64       	ori	r17, 0x40	; 64
	//3: Send first byte using SPI_transfer. If error found from transfer, exit.
	errorStatus = SPI_transfer(SPI_addr, command, &data);
     5a2:	ae 01       	movw	r20, r28
     5a4:	4f 5f       	subi	r20, 0xFF	; 255
     5a6:	5f 4f       	sbci	r21, 0xFF	; 255
     5a8:	61 2f       	mov	r22, r17
     5aa:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <SPI_transfer>
	if (errorStatus != 0) return errorStatus;
     5ae:	81 11       	cpse	r24, r1
     5b0:	30 c0       	rjmp	.+96     	; 0x612 <send_command+0x98>
     5b2:	04 e0       	ldi	r16, 0x04	; 4
     5b4:	1c c0       	rjmp	.+56     	; 0x5ee <send_command+0x74>
	//4: 32-bit arg sent, MSB first. Exit if error occurs.
	for (uint8_t i = 4; i > 0; i--) // Start from the MSB, i starts high
    {
		//this shifts right in multiples of 8. Since we can only send 8 bits, the first one (i=3) is shifted right 24b, sending the 8 MSBs first.
        errorStatus = SPI_transfer(SPI_addr, (argument >> (8 * (i-1))) & 0xFF, &data);
     5b6:	40 2f       	mov	r20, r16
     5b8:	50 e0       	ldi	r21, 0x00	; 0
     5ba:	41 50       	subi	r20, 0x01	; 1
     5bc:	51 09       	sbc	r21, r1
     5be:	44 0f       	add	r20, r20
     5c0:	55 1f       	adc	r21, r21
     5c2:	44 0f       	add	r20, r20
     5c4:	55 1f       	adc	r21, r21
     5c6:	44 0f       	add	r20, r20
     5c8:	55 1f       	adc	r21, r21
     5ca:	c5 01       	movw	r24, r10
     5cc:	b4 01       	movw	r22, r8
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <send_command+0x5e>
     5d0:	96 95       	lsr	r25
     5d2:	87 95       	ror	r24
     5d4:	77 95       	ror	r23
     5d6:	67 95       	ror	r22
     5d8:	4a 95       	dec	r20
     5da:	d2 f7       	brpl	.-12     	; 0x5d0 <send_command+0x56>
     5dc:	ae 01       	movw	r20, r28
     5de:	4f 5f       	subi	r20, 0xFF	; 255
     5e0:	5f 4f       	sbci	r21, 0xFF	; 255
     5e2:	c7 01       	movw	r24, r14
     5e4:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <SPI_transfer>
        if (errorStatus != 0) return errorStatus;
     5e8:	81 11       	cpse	r24, r1
     5ea:	13 c0       	rjmp	.+38     	; 0x612 <send_command+0x98>
	command |= 0x40;
	//3: Send first byte using SPI_transfer. If error found from transfer, exit.
	errorStatus = SPI_transfer(SPI_addr, command, &data);
	if (errorStatus != 0) return errorStatus;
	//4: 32-bit arg sent, MSB first. Exit if error occurs.
	for (uint8_t i = 4; i > 0; i--) // Start from the MSB, i starts high
     5ec:	01 50       	subi	r16, 0x01	; 1
     5ee:	01 11       	cpse	r16, r1
     5f0:	e2 cf       	rjmp	.-60     	; 0x5b6 <send_command+0x3c>
        if (errorStatus != 0) return errorStatus;
    }
	//5: checksum byte, lsb set to 1. If cmd is 0 or 8, checksum must be sent, otherwise 0x01 can be sent.
	//CMD0: 01 000000  or 0x40 in the first byte. We OR'd 0x40 so it's 01 and then the remaining 6 determines the cmd.
	//CMD8: 01 001000  or 0x48
	if (command == 0x40)
     5f2:	10 34       	cpi	r17, 0x40	; 64
     5f4:	11 f0       	breq	.+4      	; 0x5fa <send_command+0x80>

uint8_t send_command (volatile SPI_t *SPI_addr, uint8_t command, uint32_t argument)
{
	//Maybe we make a separate function call to return an error? seems like error-checking is common and there should be a clean solution.
	uint8_t errorStatus = 0; // No error by default
    uint8_t checksum = 0x01; // Default checksum value
     5f6:	61 e0       	ldi	r22, 0x01	; 1
     5f8:	01 c0       	rjmp	.+2      	; 0x5fc <send_command+0x82>
	//CMD0: 01 000000  or 0x40 in the first byte. We OR'd 0x40 so it's 01 and then the remaining 6 determines the cmd.
	//CMD8: 01 001000  or 0x48
	if (command == 0x40)
	{
		//CMD 0
		checksum = 0x95;
     5fa:	65 e9       	ldi	r22, 0x95	; 149
	}
	if (command == 0x48)
     5fc:	18 34       	cpi	r17, 0x48	; 72
     5fe:	09 f4       	brne	.+2      	; 0x602 <send_command+0x88>
	{
		//CMD 8
		checksum = 0x87; //found in notes
     600:	67 e8       	ldi	r22, 0x87	; 135
	}

	// data is overwritten here, does that matter?
	errorStatus = SPI_transfer(SPI_addr, checksum, &data);
     602:	ae 01       	movw	r20, r28
     604:	4f 5f       	subi	r20, 0xFF	; 255
     606:	5f 4f       	sbci	r21, 0xFF	; 255
     608:	c7 01       	movw	r24, r14
     60a:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <SPI_transfer>
	
	//6: return error status
	return errorStatus;
     60e:	01 c0       	rjmp	.+2      	; 0x612 <send_command+0x98>
	//1: check if command is 6 bits (<= 63). If not, error flag & function exits.
	
	if (command > 63)
	{
		//change this?
		return ERROR_SPI;
     610:	8e ef       	ldi	r24, 0xFE	; 254
	// data is overwritten here, does that matter?
	errorStatus = SPI_transfer(SPI_addr, checksum, &data);
	
	//6: return error status
	return errorStatus;
}
     612:	0f 90       	pop	r0
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	ff 90       	pop	r15
     61e:	ef 90       	pop	r14
     620:	bf 90       	pop	r11
     622:	af 90       	pop	r10
     624:	9f 90       	pop	r9
     626:	8f 90       	pop	r8
     628:	08 95       	ret

0000062a <receive_response>:

// !!! The array_name parameter, when used, must be an array of defined size!
uint8_t receive_response (volatile SPI_t *SPI_addr, uint8_t number_of_bytes, uint8_t * array)
{
     62a:	cf 92       	push	r12
     62c:	df 92       	push	r13
     62e:	ef 92       	push	r14
     630:	ff 92       	push	r15
     632:	0f 93       	push	r16
     634:	1f 93       	push	r17
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	1f 92       	push	r1
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
     640:	7c 01       	movw	r14, r24
     642:	06 2f       	mov	r16, r22
     644:	6a 01       	movw	r12, r20
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
	uint8_t data=0;
     646:	19 82       	std	Y+1, r1	; 0x01

// !!! The array_name parameter, when used, must be an array of defined size!
uint8_t receive_response (volatile SPI_t *SPI_addr, uint8_t number_of_bytes, uint8_t * array)
{
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
     648:	10 e0       	ldi	r17, 0x00	; 0
	//size of response varies, can be 1-5 bytes. Response has short delay, 
	// 1. send 0xFF repeatedly, and keep reading the received value. This is all done using SPI_transfer. 
	//    continue until msb of received byte is 0 or timeout on the loop. If timed out, return error and send 0xFF.
	do
	{
		errorStatus = SPI_transfer(SPI_addr, 0xFF, &data); //SPI receive?
     64a:	ae 01       	movw	r20, r28
     64c:	4f 5f       	subi	r20, 0xFF	; 255
     64e:	5f 4f       	sbci	r21, 0xFF	; 255
     650:	6f ef       	ldi	r22, 0xFF	; 255
     652:	c7 01       	movw	r24, r14
     654:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <SPI_transfer>
		timeout++;
     658:	1f 5f       	subi	r17, 0xFF	; 255
	} while ( (data == 0xFF) && (timeout != 0) ); //data as 0xFF is an error in SPI_transfer
     65a:	89 81       	ldd	r24, Y+1	; 0x01
     65c:	8f 3f       	cpi	r24, 0xFF	; 255
     65e:	11 f4       	brne	.+4      	; 0x664 <receive_response+0x3a>
     660:	11 11       	cpse	r17, r1
     662:	f3 cf       	rjmp	.-26     	; 0x64a <receive_response+0x20>
	// handle timeout errors:
	//timeout =0; 
	//RETURN_IF_ERROR(timeout, 0, ERROR_TIMEOUT); 
	if (timeout == 0)
     664:	11 23       	and	r17, r17
     666:	29 f1       	breq	.+74     	; 0x6b2 <receive_response+0x88>
	{
			return ERROR_TIMEOUT;
		}
	else if ( (data & 0xFE)	!= 0x00 ) //0x00 and 0x01 are good values
     668:	98 2f       	mov	r25, r24
     66a:	9e 7f       	andi	r25, 0xFE	; 254
     66c:	21 f0       	breq	.+8      	; 0x676 <receive_response+0x4c>
	{
		*array = data; //return value to see error
     66e:	f6 01       	movw	r30, r12
     670:	80 83       	st	Z, r24
		return ERROR_SD;
     672:	8d ef       	ldi	r24, 0xFD	; 253
     674:	1f c0       	rjmp	.+62     	; 0x6b4 <receive_response+0x8a>
	}
	else
	{
		//receive the remainder of the bytes, if present.
		// 2. If more than one byte expected, 0xFF sent out and each received byte stored in array. Repeat until all bytes received.
		*array = data;
     676:	f6 01       	movw	r30, r12
     678:	80 83       	st	Z, r24
		if(number_of_bytes>1)
     67a:	02 30       	cpi	r16, 0x02	; 2
     67c:	78 f4       	brcc	.+30     	; 0x69c <receive_response+0x72>
     67e:	11 c0       	rjmp	.+34     	; 0x6a2 <receive_response+0x78>
		{
			//start at 1 bc just got index 0, 3 lines above this
			for(uint8_t i = 1; i <= number_of_bytes; i++)
			{
				errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
     680:	ae 01       	movw	r20, r28
     682:	4f 5f       	subi	r20, 0xFF	; 255
     684:	5f 4f       	sbci	r21, 0xFF	; 255
     686:	6f ef       	ldi	r22, 0xFF	; 255
     688:	c7 01       	movw	r24, r14
     68a:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <SPI_transfer>
				array[i] = data;
     68e:	f6 01       	movw	r30, r12
     690:	e1 0f       	add	r30, r17
     692:	f1 1d       	adc	r31, r1
     694:	89 81       	ldd	r24, Y+1	; 0x01
     696:	80 83       	st	Z, r24
		// 2. If more than one byte expected, 0xFF sent out and each received byte stored in array. Repeat until all bytes received.
		*array = data;
		if(number_of_bytes>1)
		{
			//start at 1 bc just got index 0, 3 lines above this
			for(uint8_t i = 1; i <= number_of_bytes; i++)
     698:	1f 5f       	subi	r17, 0xFF	; 255
     69a:	01 c0       	rjmp	.+2      	; 0x69e <receive_response+0x74>
     69c:	11 e0       	ldi	r17, 0x01	; 1
     69e:	01 17       	cp	r16, r17
     6a0:	78 f7       	brcc	.-34     	; 0x680 <receive_response+0x56>
			}
		}
	}
	
	// 3. an additional 0xFF byte should be sent after the entire response. Received value is irrelevant.
	errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
     6a2:	ae 01       	movw	r20, r28
     6a4:	4f 5f       	subi	r20, 0xFF	; 255
     6a6:	5f 4f       	sbci	r21, 0xFF	; 255
     6a8:	6f ef       	ldi	r22, 0xFF	; 255
     6aa:	c7 01       	movw	r24, r14
     6ac:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <SPI_transfer>
	// 4. return error value
	return errorStatus;
     6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <receive_response+0x8a>
	// handle timeout errors:
	//timeout =0; 
	//RETURN_IF_ERROR(timeout, 0, ERROR_TIMEOUT); 
	if (timeout == 0)
	{
			return ERROR_TIMEOUT;
     6b2:	8f ef       	ldi	r24, 0xFF	; 255
	
	// 3. an additional 0xFF byte should be sent after the entire response. Received value is irrelevant.
	errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
	// 4. return error value
	return errorStatus;
}
     6b4:	0f 90       	pop	r0
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	1f 91       	pop	r17
     6bc:	0f 91       	pop	r16
     6be:	ff 90       	pop	r15
     6c0:	ef 90       	pop	r14
     6c2:	df 90       	pop	r13
     6c4:	cf 90       	pop	r12
     6c6:	08 95       	ret

000006c8 <SD_init>:

 uint8_t SD_init(volatile SPI_t *SPI_addr)
 {	
     6c8:	8f 92       	push	r8
     6ca:	9f 92       	push	r9
     6cc:	af 92       	push	r10
     6ce:	bf 92       	push	r11
     6d0:	ef 92       	push	r14
     6d2:	ff 92       	push	r15
     6d4:	0f 93       	push	r16
     6d6:	1f 93       	push	r17
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	cd b7       	in	r28, 0x3d	; 61
     6de:	de b7       	in	r29, 0x3e	; 62
     6e0:	29 97       	sbiw	r28, 0x09	; 9
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	f8 94       	cli
     6e6:	de bf       	out	0x3e, r29	; 62
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	cd bf       	out	0x3d, r28	; 61
     6ec:	7c 01       	movw	r14, r24
	 //init spi to master mode (can this be done externally?)
	 
	 uint8_t errorStatus = 0;
	 uint8_t data = 0;
     6ee:	19 82       	std	Y+1, r1	; 0x01
	 uint32_t arg = 0x00000000;
     uint8_t receive_array[8] = {0,0,0,0,0,0,0,0};
     6f0:	fe 01       	movw	r30, r28
     6f2:	32 96       	adiw	r30, 0x02	; 2
     6f4:	88 e0       	ldi	r24, 0x08	; 8
     6f6:	df 01       	movw	r26, r30
     6f8:	1d 92       	st	X+, r1
     6fa:	8a 95       	dec	r24
     6fc:	e9 f7       	brne	.-6      	; 0x6f8 <SD_init+0x30>
	 uint32_t ACMD41_arg = 0x00000000;
	 uint32_t CMD16_arg = 0x00000200;
	 uint16_t timeout = 0;
	 
	 //set CS to 1 (inactive) (which is PB4)
	 SD_CS_inactive(PB, (1<<4));
     6fe:	60 e1       	ldi	r22, 0x10	; 16
     700:	83 e2       	ldi	r24, 0x23	; 35
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	0e 94 ba 02 	call	0x574	; 0x574 <SD_CS_inactive>
	 //send 80 clock-cycles worth of transmits 
	 for(uint8_t i = 0; i < 8; i++)
     708:	10 e0       	ldi	r17, 0x00	; 0
     70a:	08 c0       	rjmp	.+16     	; 0x71c <SD_init+0x54>
	 {
		 errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
     70c:	ae 01       	movw	r20, r28
     70e:	4f 5f       	subi	r20, 0xFF	; 255
     710:	5f 4f       	sbci	r21, 0xFF	; 255
     712:	6f ef       	ldi	r22, 0xFF	; 255
     714:	c7 01       	movw	r24, r14
     716:	0e 94 b3 05 	call	0xb66	; 0xb66 <SPI_transmit>
	 uint16_t timeout = 0;
	 
	 //set CS to 1 (inactive) (which is PB4)
	 SD_CS_inactive(PB, (1<<4));
	 //send 80 clock-cycles worth of transmits 
	 for(uint8_t i = 0; i < 8; i++)
     71a:	1f 5f       	subi	r17, 0xFF	; 255
     71c:	18 30       	cpi	r17, 0x08	; 8
     71e:	b0 f3       	brcs	.-20     	; 0x70c <SD_init+0x44>
     *
     *  CMD0
     *
     *************/
	 //set SS to 0 (active)
	 SD_CS_active(PB, (1<<4));
     720:	60 e1       	ldi	r22, 0x10	; 16
     722:	83 e2       	ldi	r24, 0x23	; 35
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	0e 94 b7 02 	call	0x56e	; 0x56e <SD_CS_active>

	 errorStatus = send_command(SPI_addr, CMD0, arg);
     72a:	20 e0       	ldi	r18, 0x00	; 0
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	a9 01       	movw	r20, r18
     730:	60 e0       	ldi	r22, 0x00	; 0
     732:	c7 01       	movw	r24, r14
     734:	0e 94 bd 02 	call	0x57a	; 0x57a <send_command>
	 if (errorStatus == 0)
     738:	81 11       	cpse	r24, r1
     73a:	0c c0       	rjmp	.+24     	; 0x754 <SD_init+0x8c>
	 {
		 errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
     73c:	ae 01       	movw	r20, r28
     73e:	4e 5f       	subi	r20, 0xFE	; 254
     740:	5f 4f       	sbci	r21, 0xFF	; 255
     742:	61 e0       	ldi	r22, 0x01	; 1
     744:	c7 01       	movw	r24, r14
     746:	0e 94 15 03 	call	0x62a	; 0x62a <receive_response>
		 //set CS to 1 (inactive) (which is PB4)
		 SD_CS_inactive(PB, (1<<4));
     74a:	60 e1       	ldi	r22, 0x10	; 16
     74c:	83 e2       	ldi	r24, 0x23	; 35
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 ba 02 	call	0x574	; 0x574 <SD_CS_inactive>
	 }
	 if(receive_array[0] != 0x01)
     754:	8a 81       	ldd	r24, Y+2	; 0x02
     756:	81 30       	cpi	r24, 0x01	; 1
     758:	09 f0       	breq	.+2      	; 0x75c <SD_init+0x94>
     75a:	d0 c0       	rjmp	.+416    	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
     *
     *  CMD8
     *
     *************/
	 //STEP C) send CM8, expecting R7. If voltage val != 0x01 or if check byte doesn't match, stop here.
	 SD_CS_active(PB, (1<<4));
     75c:	60 e1       	ldi	r22, 0x10	; 16
     75e:	83 e2       	ldi	r24, 0x23	; 35
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 b7 02 	call	0x56e	; 0x56e <SD_CS_active>
	 errorStatus = send_command(SPI_addr, CMD8, 0x000001AA);
     766:	2a ea       	ldi	r18, 0xAA	; 170
     768:	31 e0       	ldi	r19, 0x01	; 1
     76a:	40 e0       	ldi	r20, 0x00	; 0
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	68 e0       	ldi	r22, 0x08	; 8
     770:	c7 01       	movw	r24, r14
     772:	0e 94 bd 02 	call	0x57a	; 0x57a <send_command>
     776:	18 2f       	mov	r17, r24
	 if(errorStatus == 0)
     778:	81 11       	cpse	r24, r1
     77a:	0d c0       	rjmp	.+26     	; 0x796 <SD_init+0xce>
	 {
		//loop at receive all 5 bytes, starting at MSB i think
		errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
     77c:	ae 01       	movw	r20, r28
     77e:	4e 5f       	subi	r20, 0xFE	; 254
     780:	5f 4f       	sbci	r21, 0xFF	; 255
     782:	65 e0       	ldi	r22, 0x05	; 5
     784:	c7 01       	movw	r24, r14
     786:	0e 94 15 03 	call	0x62a	; 0x62a <receive_response>
     78a:	18 2f       	mov	r17, r24
	 	SD_CS_inactive(PB, (1<<4));
     78c:	60 e1       	ldi	r22, 0x10	; 16
     78e:	83 e2       	ldi	r24, 0x23	; 35
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 ba 02 	call	0x574	; 0x574 <SD_CS_inactive>
	 }
	 
	 // if response is 0x05 (illegal cmd), flag it for later, bc it can't be high capacity (SDHC).
	 //check for R1 reponse
	 if((receive_array[0] == 0x01) && (errorStatus == 0))
     796:	8a 81       	ldd	r24, Y+2	; 0x02
     798:	81 30       	cpi	r24, 0x01	; 1
     79a:	59 f4       	brne	.+22     	; 0x7b2 <SD_init+0xea>
     79c:	11 11       	cpse	r17, r1
     79e:	09 c0       	rjmp	.+18     	; 0x7b2 <SD_init+0xea>
	 {
		//expecting echo back of 0x01000001AA (first byte is R1)
		if((receive_array[3] == 0x01 ) && (receive_array[4] == 0xAA))
     7a0:	8d 81       	ldd	r24, Y+5	; 0x05
     7a2:	81 30       	cpi	r24, 0x01	; 1
     7a4:	09 f0       	breq	.+2      	; 0x7a8 <SD_init+0xe0>
     7a6:	ac c0       	rjmp	.+344    	; 0x900 <__stack+0x1>
     7a8:	8e 81       	ldd	r24, Y+6	; 0x06
     7aa:	8a 3a       	cpi	r24, 0xAA	; 170
     7ac:	49 f0       	breq	.+18     	; 0x7c0 <SD_init+0xf8>
		{
			ACMD41_arg = 0x40000000; //high voltage, v2.0
		}
		else
		{
			return ERROR_VOLTAGE;
     7ae:	8c ef       	ldi	r24, 0xFC	; 252
     7b0:	c6 c0       	rjmp	.+396    	; 0x93e <__stack+0x3f>
		}
	 }
	 else if(receive_array[0] == 0x05) //old card
     7b2:	85 30       	cpi	r24, 0x05	; 5
     7b4:	09 f0       	breq	.+2      	; 0x7b8 <SD_init+0xf0>
     7b6:	a6 c0       	rjmp	.+332    	; 0x904 <__stack+0x5>
	 {
		ACMD41_arg = 0x00000000; //v1.x
     7b8:	81 2c       	mov	r8, r1
     7ba:	91 2c       	mov	r9, r1
     7bc:	54 01       	movw	r10, r8
     7be:	05 c0       	rjmp	.+10     	; 0x7ca <SD_init+0x102>
	 if((receive_array[0] == 0x01) && (errorStatus == 0))
	 {
		//expecting echo back of 0x01000001AA (first byte is R1)
		if((receive_array[3] == 0x01 ) && (receive_array[4] == 0xAA))
		{
			ACMD41_arg = 0x40000000; //high voltage, v2.0
     7c0:	81 2c       	mov	r8, r1
     7c2:	91 2c       	mov	r9, r1
     7c4:	54 01       	movw	r10, r8
     7c6:	68 94       	set
     7c8:	b6 f8       	bld	r11, 6
	/**************************
	*
	* 	CMD58
	*
	**************************/
	SD_CS_active(PB, (1<<4));
     7ca:	60 e1       	ldi	r22, 0x10	; 16
     7cc:	83 e2       	ldi	r24, 0x23	; 35
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	0e 94 b7 02 	call	0x56e	; 0x56e <SD_CS_active>
	errorStatus = send_command(SPI_addr, CMD58, arg); 	
     7d4:	20 e0       	ldi	r18, 0x00	; 0
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	a9 01       	movw	r20, r18
     7da:	6a e3       	ldi	r22, 0x3A	; 58
     7dc:	c7 01       	movw	r24, r14
     7de:	0e 94 bd 02 	call	0x57a	; 0x57a <send_command>
	
	//check error
	if (errorStatus != 0x00)
     7e2:	81 11       	cpse	r24, r1
     7e4:	91 c0       	rjmp	.+290    	; 0x908 <__stack+0x9>
	{
		return ERROR_CMD58;
	}

	//receive R3 - R1 plus 32bit OCR. bit 30 of OCR should be a 1 for high-capacity. SPI clock freq can be increased if that passes.
	errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
     7e6:	ae 01       	movw	r20, r28
     7e8:	4e 5f       	subi	r20, 0xFE	; 254
     7ea:	5f 4f       	sbci	r21, 0xFF	; 255
     7ec:	65 e0       	ldi	r22, 0x05	; 5
     7ee:	c7 01       	movw	r24, r14
     7f0:	0e 94 15 03 	call	0x62a	; 0x62a <receive_response>
     7f4:	18 2f       	mov	r17, r24
	SD_CS_inactive(PB, (1<<4));
     7f6:	60 e1       	ldi	r22, 0x10	; 16
     7f8:	83 e2       	ldi	r24, 0x23	; 35
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 ba 02 	call	0x574	; 0x574 <SD_CS_inactive>
	//check for error
	if (errorStatus != 0x00)
     800:	11 11       	cpse	r17, r1
     802:	84 c0       	rjmp	.+264    	; 0x90c <__stack+0xd>
	{
		return ERROR_CMD58;
	}
	//check for R3
	//check R1 + 32 bit OCR
	if(receive_array[0] != 0x01)
     804:	8a 81       	ldd	r24, Y+2	; 0x02
     806:	81 30       	cpi	r24, 0x01	; 1
     808:	09 f0       	breq	.+2      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     80a:	82 c0       	rjmp	.+260    	; 0x910 <__stack+0x11>
	{
		return ERROR_CMD58;
	}
	if((receive_array[2] & 0xFC) != 0xFC)
     80c:	8c 81       	ldd	r24, Y+4	; 0x04
     80e:	8c 7f       	andi	r24, 0xFC	; 252
     810:	8c 3f       	cpi	r24, 0xFC	; 252
     812:	09 f0       	breq	.+2      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     814:	7f c0       	rjmp	.+254    	; 0x914 <__stack+0x15>
     816:	00 e0       	ldi	r16, 0x00	; 0
     818:	10 e0       	ldi	r17, 0x00	; 0
     81a:	33 c0       	rjmp	.+102    	; 0x882 <__DATA_REGION_LENGTH__+0x82>
	*
	**************************/
	
	while(receive_array[0] != 0x00)
	{
		SD_CS_active(PB, (1<<4));
     81c:	60 e1       	ldi	r22, 0x10	; 16
     81e:	83 e2       	ldi	r24, 0x23	; 35
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 b7 02 	call	0x56e	; 0x56e <SD_CS_active>
		//send cmd55 first, receive R1, 
		errorStatus = send_command(SPI_addr, CMD55, arg);
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	a9 01       	movw	r20, r18
     82c:	67 e3       	ldi	r22, 0x37	; 55
     82e:	c7 01       	movw	r24, r14
     830:	0e 94 bd 02 	call	0x57a	; 0x57a <send_command>
		if(errorStatus != 0x00)
     834:	81 11       	cpse	r24, r1
     836:	70 c0       	rjmp	.+224    	; 0x918 <__stack+0x19>
		{
			return ERROR_CMD55;
		}
		errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
     838:	ae 01       	movw	r20, r28
     83a:	4e 5f       	subi	r20, 0xFE	; 254
     83c:	5f 4f       	sbci	r21, 0xFF	; 255
     83e:	61 e0       	ldi	r22, 0x01	; 1
     840:	c7 01       	movw	r24, r14
     842:	0e 94 15 03 	call	0x62a	; 0x62a <receive_response>
		
		if(receive_array[0] != 0x01)
     846:	8a 81       	ldd	r24, Y+2	; 0x02
     848:	81 30       	cpi	r24, 0x01	; 1
     84a:	09 f0       	breq	.+2      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     84c:	67 c0       	rjmp	.+206    	; 0x91c <__stack+0x1d>
		{
			return ERROR_CMD55;
		}
		//then ACMD41 sent as CMD41 and R1 received all while CS=0.	Send ACMD41 until R1 is actually 0x00
		errorStatus = send_command(SPI_addr, CMD41, ACMD41_arg);
     84e:	a5 01       	movw	r20, r10
     850:	94 01       	movw	r18, r8
     852:	69 e2       	ldi	r22, 0x29	; 41
     854:	c7 01       	movw	r24, r14
     856:	0e 94 bd 02 	call	0x57a	; 0x57a <send_command>
		if(errorStatus != 0x00)
     85a:	81 11       	cpse	r24, r1
     85c:	61 c0       	rjmp	.+194    	; 0x920 <__stack+0x21>
		{
			return ERROR_CMD41;
		}
		errorStatus = receive_response(SPI_addr, 1, receive_array);
     85e:	ae 01       	movw	r20, r28
     860:	4e 5f       	subi	r20, 0xFE	; 254
     862:	5f 4f       	sbci	r21, 0xFF	; 255
     864:	61 e0       	ldi	r22, 0x01	; 1
     866:	c7 01       	movw	r24, r14
     868:	0e 94 15 03 	call	0x62a	; 0x62a <receive_response>
		if(errorStatus != 0x00)
     86c:	81 11       	cpse	r24, r1
     86e:	5a c0       	rjmp	.+180    	; 0x924 <__stack+0x25>
		{
			return ERROR_CMD41;
		}
		timeout++;
     870:	0f 5f       	subi	r16, 0xFF	; 255
     872:	1f 4f       	sbci	r17, 0xFF	; 255
		if (timeout == 0)
     874:	09 f4       	brne	.+2      	; 0x878 <__DATA_REGION_LENGTH__+0x78>
     876:	58 c0       	rjmp	.+176    	; 0x928 <__stack+0x29>
		{
			return ERROR_CMD41_TIMEOUT;
		}
		SD_CS_inactive(PB, (1<<4));
     878:	60 e1       	ldi	r22, 0x10	; 16
     87a:	83 e2       	ldi	r24, 0x23	; 35
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	0e 94 ba 02 	call	0x574	; 0x574 <SD_CS_inactive>
	*
	* 	ACMD41  -- try a new sampling rate, not 10
	*
	**************************/
	
	while(receive_array[0] != 0x00)
     882:	8a 81       	ldd	r24, Y+2	; 0x02
     884:	81 11       	cpse	r24, r1
     886:	ca cf       	rjmp	.-108    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
	/**************************
	*
	* 	CMD58 again
	*
	**************************/
	SD_CS_active(PB, (1<<4));
     888:	60 e1       	ldi	r22, 0x10	; 16
     88a:	83 e2       	ldi	r24, 0x23	; 35
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 b7 02 	call	0x56e	; 0x56e <SD_CS_active>
	errorStatus = send_command(SPI_addr, CMD58, arg); 	
     892:	20 e0       	ldi	r18, 0x00	; 0
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	a9 01       	movw	r20, r18
     898:	6a e3       	ldi	r22, 0x3A	; 58
     89a:	c7 01       	movw	r24, r14
     89c:	0e 94 bd 02 	call	0x57a	; 0x57a <send_command>
	
	//check error
	if (errorStatus != 0x00)
     8a0:	81 11       	cpse	r24, r1
     8a2:	44 c0       	rjmp	.+136    	; 0x92c <__stack+0x2d>
	{
		return ERROR_CMD58;
	}

	//receive R3 - R1 + 32bit OCR
	errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
     8a4:	ae 01       	movw	r20, r28
     8a6:	4e 5f       	subi	r20, 0xFE	; 254
     8a8:	5f 4f       	sbci	r21, 0xFF	; 255
     8aa:	65 e0       	ldi	r22, 0x05	; 5
     8ac:	c7 01       	movw	r24, r14
     8ae:	0e 94 15 03 	call	0x62a	; 0x62a <receive_response>
     8b2:	18 2f       	mov	r17, r24
	SD_CS_inactive(PB, (1<<4));
     8b4:	60 e1       	ldi	r22, 0x10	; 16
     8b6:	83 e2       	ldi	r24, 0x23	; 35
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	0e 94 ba 02 	call	0x574	; 0x574 <SD_CS_inactive>
	//check for error
	if (errorStatus != 0x00)
     8be:	11 11       	cpse	r17, r1
     8c0:	37 c0       	rjmp	.+110    	; 0x930 <__stack+0x31>
	{
		return ERROR_CMD58;
	}
	//check for R3
	//check R1 + 32 bit OCR
	if((receive_array[1] & 0x80) != 0x80)
     8c2:	8b 81       	ldd	r24, Y+3	; 0x03
     8c4:	88 23       	and	r24, r24
     8c6:	b4 f5       	brge	.+108    	; 0x934 <__stack+0x35>
	{
		return ERROR_CMD58;
	}
	else if((receive_array[1] & 0xC0) != 0xC0)
     8c8:	80 7c       	andi	r24, 0xC0	; 192
     8ca:	80 3c       	cpi	r24, 0xC0	; 192
     8cc:	a9 f5       	brne	.+106    	; 0x938 <__stack+0x39>
	*
	* 	CMD16 
	*
	**************************/
	// send CMD16 to define block size (512?)
	SD_CS_active(PB, (1<<4));
     8ce:	60 e1       	ldi	r22, 0x10	; 16
     8d0:	83 e2       	ldi	r24, 0x23	; 35
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 b7 02 	call	0x56e	; 0x56e <SD_CS_active>
	errorStatus = send_command(SPI_addr, CMD16, CMD16_arg);
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	32 e0       	ldi	r19, 0x02	; 2
     8dc:	40 e0       	ldi	r20, 0x00	; 0
     8de:	50 e0       	ldi	r21, 0x00	; 0
     8e0:	60 e1       	ldi	r22, 0x10	; 16
     8e2:	c7 01       	movw	r24, r14
     8e4:	0e 94 bd 02 	call	0x57a	; 0x57a <send_command>
     8e8:	18 2f       	mov	r17, r24
	if (errorStatus != 0)
     8ea:	81 11       	cpse	r24, r1
     8ec:	27 c0       	rjmp	.+78     	; 0x93c <__stack+0x3d>
	{
		return ERROR_CMD16;
	}
	SD_CS_inactive(PB, (1<<4));
     8ee:	60 e1       	ldi	r22, 0x10	; 16
     8f0:	83 e2       	ldi	r24, 0x23	; 35
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 ba 02 	call	0x574	; 0x574 <SD_CS_inactive>
	return errorStatus;
     8f8:	81 2f       	mov	r24, r17
     8fa:	21 c0       	rjmp	.+66     	; 0x93e <__stack+0x3f>
		 //set CS to 1 (inactive) (which is PB4)
		 SD_CS_inactive(PB, (1<<4));
	 }
	 if(receive_array[0] != 0x01)
	 {
		 return ERROR_CMD0;
     8fc:	8b ef       	ldi	r24, 0xFB	; 251
     8fe:	1f c0       	rjmp	.+62     	; 0x93e <__stack+0x3f>
		{
			ACMD41_arg = 0x40000000; //high voltage, v2.0
		}
		else
		{
			return ERROR_VOLTAGE;
     900:	8c ef       	ldi	r24, 0xFC	; 252
     902:	1d c0       	rjmp	.+58     	; 0x93e <__stack+0x3f>
		ACMD41_arg = 0x00000000; //v1.x
		//sd_card_type = ??
	 }
	 else
	 {
		return ERROR_CMD8;
     904:	8a ef       	ldi	r24, 0xFA	; 250
     906:	1b c0       	rjmp	.+54     	; 0x93e <__stack+0x3f>
	errorStatus = send_command(SPI_addr, CMD58, arg); 	
	
	//check error
	if (errorStatus != 0x00)
	{
		return ERROR_CMD58;
     908:	89 ef       	ldi	r24, 0xF9	; 249
     90a:	19 c0       	rjmp	.+50     	; 0x93e <__stack+0x3f>
	errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
	SD_CS_inactive(PB, (1<<4));
	//check for error
	if (errorStatus != 0x00)
	{
		return ERROR_CMD58;
     90c:	89 ef       	ldi	r24, 0xF9	; 249
     90e:	17 c0       	rjmp	.+46     	; 0x93e <__stack+0x3f>
	}
	//check for R3
	//check R1 + 32 bit OCR
	if(receive_array[0] != 0x01)
	{
		return ERROR_CMD58;
     910:	89 ef       	ldi	r24, 0xF9	; 249
     912:	15 c0       	rjmp	.+42     	; 0x93e <__stack+0x3f>
	}
	if((receive_array[2] & 0xFC) != 0xFC)
	{
		return ERROR_CMD58;
     914:	89 ef       	ldi	r24, 0xF9	; 249
     916:	13 c0       	rjmp	.+38     	; 0x93e <__stack+0x3f>
		SD_CS_active(PB, (1<<4));
		//send cmd55 first, receive R1, 
		errorStatus = send_command(SPI_addr, CMD55, arg);
		if(errorStatus != 0x00)
		{
			return ERROR_CMD55;
     918:	88 ef       	ldi	r24, 0xF8	; 248
     91a:	11 c0       	rjmp	.+34     	; 0x93e <__stack+0x3f>
		}
		errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
		
		if(receive_array[0] != 0x01)
		{
			return ERROR_CMD55;
     91c:	88 ef       	ldi	r24, 0xF8	; 248
     91e:	0f c0       	rjmp	.+30     	; 0x93e <__stack+0x3f>
		}
		//then ACMD41 sent as CMD41 and R1 received all while CS=0.	Send ACMD41 until R1 is actually 0x00
		errorStatus = send_command(SPI_addr, CMD41, ACMD41_arg);
		if(errorStatus != 0x00)
		{
			return ERROR_CMD41;
     920:	87 ef       	ldi	r24, 0xF7	; 247
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0x3f>
		}
		errorStatus = receive_response(SPI_addr, 1, receive_array);
		if(errorStatus != 0x00)
		{
			return ERROR_CMD41;
     924:	87 ef       	ldi	r24, 0xF7	; 247
     926:	0b c0       	rjmp	.+22     	; 0x93e <__stack+0x3f>
		}
		timeout++;
		if (timeout == 0)
		{
			return ERROR_CMD41_TIMEOUT;
     928:	86 ef       	ldi	r24, 0xF6	; 246
     92a:	09 c0       	rjmp	.+18     	; 0x93e <__stack+0x3f>
	errorStatus = send_command(SPI_addr, CMD58, arg); 	
	
	//check error
	if (errorStatus != 0x00)
	{
		return ERROR_CMD58;
     92c:	89 ef       	ldi	r24, 0xF9	; 249
     92e:	07 c0       	rjmp	.+14     	; 0x93e <__stack+0x3f>
	errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
	SD_CS_inactive(PB, (1<<4));
	//check for error
	if (errorStatus != 0x00)
	{
		return ERROR_CMD58;
     930:	89 ef       	ldi	r24, 0xF9	; 249
     932:	05 c0       	rjmp	.+10     	; 0x93e <__stack+0x3f>
	}
	//check for R3
	//check R1 + 32 bit OCR
	if((receive_array[1] & 0x80) != 0x80)
	{
		return ERROR_CMD58;
     934:	89 ef       	ldi	r24, 0xF9	; 249
     936:	03 c0       	rjmp	.+6      	; 0x93e <__stack+0x3f>
	}
	else if((receive_array[1] & 0xC0) != 0xC0)
	{
		return ERROR_CMD58;
     938:	89 ef       	ldi	r24, 0xF9	; 249
     93a:	01 c0       	rjmp	.+2      	; 0x93e <__stack+0x3f>
	// send CMD16 to define block size (512?)
	SD_CS_active(PB, (1<<4));
	errorStatus = send_command(SPI_addr, CMD16, CMD16_arg);
	if (errorStatus != 0)
	{
		return ERROR_CMD16;
     93c:	85 ef       	ldi	r24, 0xF5	; 245
	}
	SD_CS_inactive(PB, (1<<4));
	return errorStatus;
 }
     93e:	29 96       	adiw	r28, 0x09	; 9
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	de bf       	out	0x3e, r29	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	cd bf       	out	0x3d, r28	; 61
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	bf 90       	pop	r11
     958:	af 90       	pop	r10
     95a:	9f 90       	pop	r9
     95c:	8f 90       	pop	r8
     95e:	08 95       	ret

00000960 <read_block>:
 
uint8_t read_block (volatile SPI_t *SPI_addr, uint16_t number_of_bytes, uint8_t * array)
{
     960:	8f 92       	push	r8
     962:	9f 92       	push	r9
     964:	af 92       	push	r10
     966:	bf 92       	push	r11
     968:	cf 92       	push	r12
     96a:	df 92       	push	r13
     96c:	ef 92       	push	r14
     96e:	ff 92       	push	r15
     970:	0f 93       	push	r16
     972:	1f 93       	push	r17
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	1f 92       	push	r1
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
     97e:	7c 01       	movw	r14, r24
     980:	5b 01       	movw	r10, r22
     982:	6a 01       	movw	r12, r20
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
	uint8_t data=0;
     984:	19 82       	std	Y+1, r1	; 0x01
 }
 
uint8_t read_block (volatile SPI_t *SPI_addr, uint16_t number_of_bytes, uint8_t * array)
{
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
     986:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t data=0;
	// step a
	do
	{
		errorStatus = SPI_transfer(SPI_addr, 0xFF, &data); //SPI receive?
     988:	ae 01       	movw	r20, r28
     98a:	4f 5f       	subi	r20, 0xFF	; 255
     98c:	5f 4f       	sbci	r21, 0xFF	; 255
     98e:	6f ef       	ldi	r22, 0xFF	; 255
     990:	c7 01       	movw	r24, r14
     992:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <SPI_transfer>
		timeout++;
     996:	1f 5f       	subi	r17, 0xFF	; 255
	} while(((data & 0x80) == 0x80) && (errorStatus == 0) && (timeout != 0));
     998:	99 81       	ldd	r25, Y+1	; 0x01
     99a:	99 23       	and	r25, r25
     99c:	24 f4       	brge	.+8      	; 0x9a6 <read_block+0x46>
     99e:	81 11       	cpse	r24, r1
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <read_block+0x46>
     9a2:	11 11       	cpse	r17, r1
     9a4:	f1 cf       	rjmp	.-30     	; 0x988 <read_block+0x28>

	// step b
	if (errorStatus != 0)
     9a6:	81 11       	cpse	r24, r1
     9a8:	44 c0       	rjmp	.+136    	; 0xa32 <read_block+0xd2>
	{
		return ERROR_CMD0;
	}
	if(data != 0x00)
     9aa:	91 11       	cpse	r25, r1
     9ac:	44 c0       	rjmp	.+136    	; 0xa36 <read_block+0xd6>
     9ae:	00 e0       	ldi	r16, 0x00	; 0
		return ERROR_SD; 
	}
	timeout = 0; 
	do
	{
		errorStatus = SPI_transfer(SPI_addr, 0xFF, &data); //SPI receive?
     9b0:	ae 01       	movw	r20, r28
     9b2:	4f 5f       	subi	r20, 0xFF	; 255
     9b4:	5f 4f       	sbci	r21, 0xFF	; 255
     9b6:	6f ef       	ldi	r22, 0xFF	; 255
     9b8:	c7 01       	movw	r24, r14
     9ba:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <SPI_transfer>
     9be:	18 2f       	mov	r17, r24
		timeout++;
     9c0:	0f 5f       	subi	r16, 0xFF	; 255
	} while((data == 0xFF) && (errorStatus == 0) && (timeout != 0));
     9c2:	89 81       	ldd	r24, Y+1	; 0x01
     9c4:	8f 3f       	cpi	r24, 0xFF	; 255
     9c6:	21 f4       	brne	.+8      	; 0x9d0 <read_block+0x70>
     9c8:	11 11       	cpse	r17, r1
     9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <read_block+0x70>
     9cc:	01 11       	cpse	r16, r1
     9ce:	f0 cf       	rjmp	.-32     	; 0x9b0 <read_block+0x50>
	//while ( (data == 0xFF) && (timeout != 0) );


	// check for 0xFE (success) or 0b0000XXXX (error)
	if (data == 0xFE)
     9d0:	8e 3f       	cpi	r24, 0xFE	; 254
     9d2:	99 f5       	brne	.+102    	; 0xa3a <read_block+0xda>
	{
		// take first byte of data
		SPI_receive(SPI_addr, &data);
     9d4:	be 01       	movw	r22, r28
     9d6:	6f 5f       	subi	r22, 0xFF	; 255
     9d8:	7f 4f       	sbci	r23, 0xFF	; 255
     9da:	c7 01       	movw	r24, r14
     9dc:	0e 94 d2 05 	call	0xba4	; 0xba4 <SPI_receive>
		array[0] = data;
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	f6 01       	movw	r30, r12
     9e4:	80 83       	st	Z, r24
		//error
		return ERROR_TIMEOUT;
	}

	// step c
	for(uint16_t i = 1; i < number_of_bytes; i++)
     9e6:	88 24       	eor	r8, r8
     9e8:	83 94       	inc	r8
     9ea:	91 2c       	mov	r9, r1
     9ec:	10 c0       	rjmp	.+32     	; 0xa0e <read_block+0xae>
	{
		errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
     9ee:	ae 01       	movw	r20, r28
     9f0:	4f 5f       	subi	r20, 0xFF	; 255
     9f2:	5f 4f       	sbci	r21, 0xFF	; 255
     9f4:	6f ef       	ldi	r22, 0xFF	; 255
     9f6:	c7 01       	movw	r24, r14
     9f8:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <SPI_transfer>
     9fc:	18 2f       	mov	r17, r24
		array[i] = data;
     9fe:	f6 01       	movw	r30, r12
     a00:	e8 0d       	add	r30, r8
     a02:	f9 1d       	adc	r31, r9
     a04:	89 81       	ldd	r24, Y+1	; 0x01
     a06:	80 83       	st	Z, r24
		//error
		return ERROR_TIMEOUT;
	}

	// step c
	for(uint16_t i = 1; i < number_of_bytes; i++)
     a08:	ff ef       	ldi	r31, 0xFF	; 255
     a0a:	8f 1a       	sub	r8, r31
     a0c:	9f 0a       	sbc	r9, r31
     a0e:	8a 14       	cp	r8, r10
     a10:	9b 04       	cpc	r9, r11
     a12:	68 f3       	brcs	.-38     	; 0x9ee <read_block+0x8e>
     a14:	00 e0       	ldi	r16, 0x00	; 0
     a16:	09 c0       	rjmp	.+18     	; 0xa2a <read_block+0xca>

	// step d

	for(uint8_t i = 0; i < 3; i++)
	{
		errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
     a18:	ae 01       	movw	r20, r28
     a1a:	4f 5f       	subi	r20, 0xFF	; 255
     a1c:	5f 4f       	sbci	r21, 0xFF	; 255
     a1e:	6f ef       	ldi	r22, 0xFF	; 255
     a20:	c7 01       	movw	r24, r14
     a22:	0e 94 b3 05 	call	0xb66	; 0xb66 <SPI_transmit>
     a26:	18 2f       	mov	r17, r24
		array[i] = data;
	}

	// step d

	for(uint8_t i = 0; i < 3; i++)
     a28:	0f 5f       	subi	r16, 0xFF	; 255
     a2a:	03 30       	cpi	r16, 0x03	; 3
     a2c:	a8 f3       	brcs	.-22     	; 0xa18 <read_block+0xb8>
	{
		errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
	}

	// step e
	return errorStatus;
     a2e:	81 2f       	mov	r24, r17
     a30:	05 c0       	rjmp	.+10     	; 0xa3c <read_block+0xdc>
	} while(((data & 0x80) == 0x80) && (errorStatus == 0) && (timeout != 0));

	// step b
	if (errorStatus != 0)
	{
		return ERROR_CMD0;
     a32:	8b ef       	ldi	r24, 0xFB	; 251
     a34:	03 c0       	rjmp	.+6      	; 0xa3c <read_block+0xdc>
	}
	if(data != 0x00)
	{
		return ERROR_SD; 
     a36:	8d ef       	ldi	r24, 0xFD	; 253
     a38:	01 c0       	rjmp	.+2      	; 0xa3c <read_block+0xdc>
		array[0] = data;
	}
	else
	{
		//error
		return ERROR_TIMEOUT;
     a3a:	8f ef       	ldi	r24, 0xFF	; 255
		errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
	}

	// step e
	return errorStatus;
     a3c:	0f 90       	pop	r0
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	ff 90       	pop	r15
     a48:	ef 90       	pop	r14
     a4a:	df 90       	pop	r13
     a4c:	cf 90       	pop	r12
     a4e:	bf 90       	pop	r11
     a50:	af 90       	pop	r10
     a52:	9f 90       	pop	r9
     a54:	8f 90       	pop	r8
     a56:	08 95       	ret

00000a58 <round_up_pwr2>:
#include "gpio_output.h"
#include "UART_Print.h"


uint8_t round_up_pwr2(uint8_t n) {
    if (n <= 1) {
     a58:	82 30       	cpi	r24, 0x02	; 2
     a5a:	a8 f0       	brcs	.+42     	; 0xa86 <round_up_pwr2+0x2e>
        return 1;
    }
    if (n > 128) {
     a5c:	81 38       	cpi	r24, 0x81	; 129
     a5e:	a8 f4       	brcc	.+42     	; 0xa8a <round_up_pwr2+0x32>
        return 128;
    }
    n--; // the -- ensures that you don't round up when it's already a power of 2.
     a60:	81 50       	subi	r24, 0x01	; 1
    n |= n >> 1; // ORs with 1 shift right
     a62:	98 2f       	mov	r25, r24
     a64:	96 95       	lsr	r25
     a66:	89 2b       	or	r24, r25
    n |= n >> 2; // ORs with 2-bit shift right
     a68:	98 2f       	mov	r25, r24
     a6a:	96 95       	lsr	r25
     a6c:	96 95       	lsr	r25
     a6e:	89 2b       	or	r24, r25
    n |= n >> 4; // ORs with 4-bit shift right
     a70:	98 2f       	mov	r25, r24
     a72:	92 95       	swap	r25
     a74:	9f 70       	andi	r25, 0x0F	; 15
     a76:	89 2b       	or	r24, r25
    n |= n >> 7; // ORs with 7-bit shit right
     a78:	98 2f       	mov	r25, r24
     a7a:	99 1f       	adc	r25, r25
     a7c:	99 27       	eor	r25, r25
     a7e:	99 1f       	adc	r25, r25
     a80:	89 2b       	or	r24, r25
    return n + 1; // inc to power of 2 
     a82:	8f 5f       	subi	r24, 0xFF	; 255
     a84:	08 95       	ret
#include "UART_Print.h"


uint8_t round_up_pwr2(uint8_t n) {
    if (n <= 1) {
        return 1;
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	08 95       	ret
    }
    if (n > 128) {
        return 128;
     a8a:	80 e8       	ldi	r24, 0x80	; 128
    n |= n >> 1; // ORs with 1 shift right
    n |= n >> 2; // ORs with 2-bit shift right
    n |= n >> 4; // ORs with 4-bit shift right
    n |= n >> 7; // ORs with 7-bit shit right
    return n + 1; // inc to power of 2 
}
     a8c:	08 95       	ret

00000a8e <get_spi_prescaler_mask>:

uint8_t get_spi_prescaler_mask(uint8_t n) {
    uint8_t rounded_value = round_up_pwr2(n);
     a8e:	0e 94 2c 05 	call	0xa58	; 0xa58 <round_up_pwr2>
    
    switch (rounded_value) {
     a92:	80 31       	cpi	r24, 0x10	; 16
     a94:	c1 f0       	breq	.+48     	; 0xac6 <get_spi_prescaler_mask+0x38>
     a96:	28 f4       	brcc	.+10     	; 0xaa2 <get_spi_prescaler_mask+0x14>
     a98:	82 30       	cpi	r24, 0x02	; 2
     a9a:	79 f0       	breq	.+30     	; 0xaba <get_spi_prescaler_mask+0x2c>
     a9c:	88 30       	cpi	r24, 0x08	; 8
     a9e:	79 f0       	breq	.+30     	; 0xabe <get_spi_prescaler_mask+0x30>
     aa0:	06 c0       	rjmp	.+12     	; 0xaae <get_spi_prescaler_mask+0x20>
     aa2:	80 34       	cpi	r24, 0x40	; 64
     aa4:	31 f0       	breq	.+12     	; 0xab2 <get_spi_prescaler_mask+0x24>
     aa6:	80 38       	cpi	r24, 0x80	; 128
     aa8:	31 f0       	breq	.+12     	; 0xab6 <get_spi_prescaler_mask+0x28>
     aaa:	80 32       	cpi	r24, 0x20	; 32
     aac:	51 f0       	breq	.+20     	; 0xac2 <get_spi_prescaler_mask+0x34>
        case 4:   return 0b000;
     aae:	80 e0       	ldi	r24, 0x00	; 0
     ab0:	08 95       	ret
        case 16:  return 0b001;
        case 64:  return 0b010;
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	08 95       	ret
        case 128: return 0b011;
     ab6:	83 e0       	ldi	r24, 0x03	; 3
     ab8:	08 95       	ret
        case 2:   return 0b100;
     aba:	84 e0       	ldi	r24, 0x04	; 4
     abc:	08 95       	ret
        case 8:   return 0b101;
     abe:	85 e0       	ldi	r24, 0x05	; 5
     ac0:	08 95       	ret
        case 32:  return 0b110;
     ac2:	86 e0       	ldi	r24, 0x06	; 6
     ac4:	08 95       	ret
uint8_t get_spi_prescaler_mask(uint8_t n) {
    uint8_t rounded_value = round_up_pwr2(n);
    
    switch (rounded_value) {
        case 4:   return 0b000;
        case 16:  return 0b001;
     ac6:	81 e0       	ldi	r24, 0x01	; 1
        case 2:   return 0b100;
        case 8:   return 0b101;
        case 32:  return 0b110;
        default:  return 0b000; // Default case
    }
}
     ac8:	08 95       	ret

00000aca <SPI_master_init>:

void SPI_master_init(volatile SPI_t * SPI_addr, uint32_t clock_rate)
{
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	ec 01       	movw	r28, r24
     ad0:	9a 01       	movw	r18, r20
     ad2:	ab 01       	movw	r20, r22
    // CPOL CPHA - Clear CPOL and CPHA (0)
	// These are preference-based but must be unanimous with other code
    SPI_addr->control_reg &= (~(3<<2));
     ad4:	88 81       	ld	r24, Y
     ad6:	83 7f       	andi	r24, 0xF3	; 243
     ad8:	88 83       	st	Y, r24
    // SPE - Enable SPI (1)
    SPI_addr->control_reg |= (1<<6);
     ada:	88 81       	ld	r24, Y
     adc:	80 64       	ori	r24, 0x40	; 64
     ade:	88 83       	st	Y, r24
    // MSTR - Set to master mode (1)
    SPI_addr->control_reg |= (1<<4);
     ae0:	88 81       	ld	r24, Y
     ae2:	80 61       	ori	r24, 0x10	; 16
     ae4:	88 83       	st	Y, r24
    // DORD - Clear to make MSB first (0)
    SPI_addr->control_reg &= (~(1<<5));
     ae6:	88 81       	ld	r24, Y
     ae8:	8f 7d       	andi	r24, 0xDF	; 223
     aea:	88 83       	st	Y, r24
    
    // Set clock rate based on the given `clock_rate`. You can use a series of if-else conditions to check which prescaler value to use.
    uint8_t divider = (F_CPU / OSC_DIV ) / (clock_rate);
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	74 e2       	ldi	r23, 0x24	; 36
     af0:	84 ef       	ldi	r24, 0xF4	; 244
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <__udivmodsi4>
     af8:	82 2f       	mov	r24, r18
    uint8_t mask = get_spi_prescaler_mask(divider);
     afa:	0e 94 47 05 	call	0xa8e	; 0xa8e <get_spi_prescaler_mask>
    SPI_addr->control_reg |= (mask%4); // takes bottom 2 bits or mask & 0x3
     afe:	98 81       	ld	r25, Y
     b00:	28 2f       	mov	r18, r24
     b02:	23 70       	andi	r18, 0x03	; 3
     b04:	92 2b       	or	r25, r18
     b06:	98 83       	st	Y, r25
    SPI_addr->status_reg |= (mask/4); // takes bit 2
     b08:	99 81       	ldd	r25, Y+1	; 0x01
     b0a:	86 95       	lsr	r24
     b0c:	86 95       	lsr	r24
     b0e:	89 2b       	or	r24, r25
     b10:	89 83       	std	Y+1, r24	; 0x01

    //add MOSI & SCK pins based on whether it's SPI0 or SPI1
    if(SPI_addr == SPI0)
     b12:	cc 34       	cpi	r28, 0x4C	; 76
     b14:	d1 05       	cpc	r29, r1
     b16:	a9 f4       	brne	.+42     	; 0xb42 <SPI_master_init+0x78>
    {
		GPIO_Output_Init(PB, (1<<5));
     b18:	60 e2       	ldi	r22, 0x20	; 32
     b1a:	83 e2       	ldi	r24, 0x23	; 35
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 b1 00 	call	0x162	; 0x162 <GPIO_Output_Init>
		GPIO_Output_Set(PB, (1<<5));
     b22:	60 e2       	ldi	r22, 0x20	; 32
     b24:	83 e2       	ldi	r24, 0x23	; 35
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	0e 94 b6 00 	call	0x16c	; 0x16c <GPIO_Output_Set>
		
		GPIO_Output_Init(PB, (1<<7));
     b2c:	60 e8       	ldi	r22, 0x80	; 128
     b2e:	83 e2       	ldi	r24, 0x23	; 35
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	0e 94 b1 00 	call	0x162	; 0x162 <GPIO_Output_Init>
		GPIO_Output_Clear(PB, (1<<7));
     b36:	60 e8       	ldi	r22, 0x80	; 128
     b38:	83 e2       	ldi	r24, 0x23	; 35
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	0e 94 bb 00 	call	0x176	; 0x176 <GPIO_Output_Clear>
     b40:	0f c0       	rjmp	.+30     	; 0xb60 <SPI_master_init+0x96>
		
        //PB->DDR_REG |= (1<<5) | (1<<7); //MOSI & SCK Output
        //PB->PORT_REG |= (1<<5);  //MOSI 1
        //PB->PORT_REG &= ~(1<<7); //SCK 0
    }
    else if (SPI_addr == SPI1)
     b42:	cc 3a       	cpi	r28, 0xAC	; 172
     b44:	d1 05       	cpc	r29, r1
     b46:	61 f4       	brne	.+24     	; 0xb60 <SPI_master_init+0x96>
    {
        PE->DDR_REG |= (1<<3);          // MOSI output
     b48:	8d b1       	in	r24, 0x0d	; 13
     b4a:	88 60       	ori	r24, 0x08	; 8
     b4c:	8d b9       	out	0x0d, r24	; 13
        PD->DDR_REG |= (1<<7);          // SCK output
     b4e:	8a b1       	in	r24, 0x0a	; 10
     b50:	80 68       	ori	r24, 0x80	; 128
     b52:	8a b9       	out	0x0a, r24	; 10
        PE->PORT_REG |= (1<<3);         // MOSI 1
     b54:	8e b1       	in	r24, 0x0e	; 14
     b56:	88 60       	ori	r24, 0x08	; 8
     b58:	8e b9       	out	0x0e, r24	; 14
        PD->PORT_REG &= ~(1<<7);        // SCK 0
     b5a:	8b b1       	in	r24, 0x0b	; 11
     b5c:	8f 77       	andi	r24, 0x7F	; 127
     b5e:	8b b9       	out	0x0b, r24	; 11
    }

}
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <SPI_transmit>:

uint8_t SPI_transmit(volatile SPI_t* SPI_addr, uint8_t send_value, uint8_t *data)
{
     b66:	fc 01       	movw	r30, r24
    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
    // write data to spider
    SPI_addr->data_reg = send_value;
     b68:	62 83       	std	Z+2, r22	; 0x02

uint8_t SPI_transmit(volatile SPI_t* SPI_addr, uint8_t send_value, uint8_t *data)
{
    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	30 e0       	ldi	r19, 0x00	; 0
    // write data to spider
    SPI_addr->data_reg = send_value;
    //wait for spif (bit 7) to be 0, this means SPDR can be written again
    do
    {
        status = (SPI_addr->status_reg);
     b6e:	91 81       	ldd	r25, Z+1	; 0x01
        timeout++;
     b70:	2f 5f       	subi	r18, 0xFF	; 255
     b72:	3f 4f       	sbci	r19, 0xFF	; 255
    } while (((status&0x80) == 0) && timeout != 0 );
     b74:	99 23       	and	r25, r25
     b76:	1c f0       	brlt	.+6      	; 0xb7e <SPI_transmit+0x18>
     b78:	21 15       	cp	r18, r1
     b7a:	31 05       	cpc	r19, r1
     b7c:	c1 f7       	brne	.-16     	; 0xb6e <SPI_transmit+0x8>

    if(timeout == 0)
     b7e:	23 2b       	or	r18, r19
     b80:	21 f4       	brne	.+8      	; 0xb8a <SPI_transmit+0x24>
    {
        *data = 0xFF;
     b82:	8f ef       	ldi	r24, 0xFF	; 255
     b84:	fa 01       	movw	r30, r20
     b86:	80 83       	st	Z, r24
        return ERROR_TIMEOUT;
     b88:	08 95       	ret
    }
    else if ((status&0x40)!=0)
     b8a:	89 2f       	mov	r24, r25
     b8c:	80 74       	andi	r24, 0x40	; 64
     b8e:	96 ff       	sbrs	r25, 6
     b90:	05 c0       	rjmp	.+10     	; 0xb9c <SPI_transmit+0x36>
    {
        *data = (SPI_addr->data_reg);
     b92:	82 81       	ldd	r24, Z+2	; 0x02
     b94:	fa 01       	movw	r30, r20
     b96:	80 83       	st	Z, r24
        return ERROR_SPI;
     b98:	8e ef       	ldi	r24, 0xFE	; 254
     b9a:	08 95       	ret
    }
    else 
    {
        *data = (SPI_addr->data_reg);
     b9c:	92 81       	ldd	r25, Z+2	; 0x02
     b9e:	fa 01       	movw	r30, r20
     ba0:	90 83       	st	Z, r25
        return 0;
    }
}
     ba2:	08 95       	ret

00000ba4 <SPI_receive>:
uint8_t SPI_receive(volatile SPI_t *SPI_addr, uint8_t* data)
{
     ba4:	fc 01       	movw	r30, r24
    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
    // write data to spider
    SPI_addr->data_reg = 0xFF;
     ba6:	8f ef       	ldi	r24, 0xFF	; 255
     ba8:	82 83       	std	Z+2, r24	; 0x02
}
uint8_t SPI_receive(volatile SPI_t *SPI_addr, uint8_t* data)
{
    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
    // write data to spider
    SPI_addr->data_reg = 0xFF;
    //wait for spif (bit 7) to be 0, this means SPDR can be written again
    do
    {
        status = (SPI_addr->status_reg);
     bae:	91 81       	ldd	r25, Z+1	; 0x01
        timeout++;
     bb0:	2f 5f       	subi	r18, 0xFF	; 255
     bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    } while (((status&0x80) == 0) && timeout != 0 );
     bb4:	99 23       	and	r25, r25
     bb6:	1c f0       	brlt	.+6      	; 0xbbe <SPI_receive+0x1a>
     bb8:	21 15       	cp	r18, r1
     bba:	31 05       	cpc	r19, r1
     bbc:	c1 f7       	brne	.-16     	; 0xbae <SPI_receive+0xa>

    if(timeout == 0)
     bbe:	23 2b       	or	r18, r19
     bc0:	21 f4       	brne	.+8      	; 0xbca <SPI_receive+0x26>
    {
        *data = 0xFF;
     bc2:	8f ef       	ldi	r24, 0xFF	; 255
     bc4:	fb 01       	movw	r30, r22
     bc6:	80 83       	st	Z, r24
        return ERROR_TIMEOUT;
     bc8:	08 95       	ret
    }
    else if ((status&0x40)!=0)
     bca:	89 2f       	mov	r24, r25
     bcc:	80 74       	andi	r24, 0x40	; 64
     bce:	96 ff       	sbrs	r25, 6
     bd0:	05 c0       	rjmp	.+10     	; 0xbdc <SPI_receive+0x38>
    {
        *data = (SPI_addr->data_reg);
     bd2:	82 81       	ldd	r24, Z+2	; 0x02
     bd4:	fb 01       	movw	r30, r22
     bd6:	80 83       	st	Z, r24
        return ERROR_SPI;
     bd8:	8e ef       	ldi	r24, 0xFE	; 254
     bda:	08 95       	ret
    }
    else 
    {
        *data = (SPI_addr->data_reg);
     bdc:	92 81       	ldd	r25, Z+2	; 0x02
     bde:	fb 01       	movw	r30, r22
     be0:	90 83       	st	Z, r25
        return 0;
    }
}
     be2:	08 95       	ret

00000be4 <SPI_transfer>:
uint8_t SPI_transfer(volatile SPI_t *SPI_addr, uint8_t send_value, uint8_t *data)
{
     be4:	fc 01       	movw	r30, r24

    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
    // write data to spider
    SPI_addr->data_reg = send_value;
     be6:	62 83       	std	Z+2, r22	; 0x02
uint8_t SPI_transfer(volatile SPI_t *SPI_addr, uint8_t send_value, uint8_t *data)
{

    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	30 e0       	ldi	r19, 0x00	; 0
    // write data to spider
    SPI_addr->data_reg = send_value;
    //wait for spif (bit 7) to be 0, this means SPDR can be written again
    do
    {
        status = (SPI_addr->status_reg);
     bec:	91 81       	ldd	r25, Z+1	; 0x01
        timeout++;
     bee:	2f 5f       	subi	r18, 0xFF	; 255
     bf0:	3f 4f       	sbci	r19, 0xFF	; 255
    } while (((status&0x80) == 0) && timeout != 0 );
     bf2:	99 23       	and	r25, r25
     bf4:	1c f0       	brlt	.+6      	; 0xbfc <SPI_transfer+0x18>
     bf6:	21 15       	cp	r18, r1
     bf8:	31 05       	cpc	r19, r1
     bfa:	c1 f7       	brne	.-16     	; 0xbec <SPI_transfer+0x8>

    if(timeout == 0)
     bfc:	23 2b       	or	r18, r19
     bfe:	21 f4       	brne	.+8      	; 0xc08 <SPI_transfer+0x24>
    {
        *data = 0xFF;
     c00:	8f ef       	ldi	r24, 0xFF	; 255
     c02:	fa 01       	movw	r30, r20
     c04:	80 83       	st	Z, r24
        return ERROR_TIMEOUT;
     c06:	08 95       	ret
    }
    else if ((status&0x40)!=0)
     c08:	89 2f       	mov	r24, r25
     c0a:	80 74       	andi	r24, 0x40	; 64
     c0c:	96 ff       	sbrs	r25, 6
     c0e:	05 c0       	rjmp	.+10     	; 0xc1a <SPI_transfer+0x36>
    {
        *data = (SPI_addr->data_reg);
     c10:	82 81       	ldd	r24, Z+2	; 0x02
     c12:	fa 01       	movw	r30, r20
     c14:	80 83       	st	Z, r24
        return ERROR_SPI;
     c16:	8e ef       	ldi	r24, 0xFE	; 254
     c18:	08 95       	ret
    }
    else 
    {
        *data = (SPI_addr->data_reg);
     c1a:	92 81       	ldd	r25, Z+2	; 0x02
     c1c:	fa 01       	movw	r30, r20
     c1e:	90 83       	st	Z, r25
        return 0;
    }
}
     c20:	08 95       	ret

00000c22 <display_error>:

void display_error(volatile UART_t * UART_addr, ErrorTypes error)
{
	switch(error)
     c22:	86 2f       	mov	r24, r22
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	fc 01       	movw	r30, r24
     c28:	e4 5f       	subi	r30, 0xF4	; 244
     c2a:	f1 09       	sbc	r31, r1
     c2c:	ec 30       	cpi	r30, 0x0C	; 12
     c2e:	f1 05       	cpc	r31, r1
     c30:	08 f0       	brcs	.+2      	; 0xc34 <display_error+0x12>
     c32:	5c c0       	rjmp	.+184    	; 0xcec <display_error+0xca>
     c34:	ea 59       	subi	r30, 0x9A	; 154
     c36:	ff 4f       	sbci	r31, 0xFF	; 255
     c38:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__tablejump2__>
	{
		case ERROR_TIMEOUT:
			UART_transmit_string(UART1, "timeout\n", 8);
     c3c:	48 e0       	ldi	r20, 0x08	; 8
     c3e:	69 e5       	ldi	r22, 0x59	; 89
     c40:	71 e0       	ldi	r23, 0x01	; 1
     c42:	88 ec       	ldi	r24, 0xC8	; 200
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 bf 06 	call	0xd7e	; 0xd7e <UART_transmit_string>
			break;
     c4a:	08 95       	ret
		case ERROR_SPI:
			UART_transmit_string(UART1, "SPI\n", 4);
     c4c:	44 e0       	ldi	r20, 0x04	; 4
     c4e:	62 e6       	ldi	r22, 0x62	; 98
     c50:	71 e0       	ldi	r23, 0x01	; 1
     c52:	88 ec       	ldi	r24, 0xC8	; 200
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 bf 06 	call	0xd7e	; 0xd7e <UART_transmit_string>
			break;
     c5a:	08 95       	ret
		case ERROR_SD:
			UART_transmit_string(UART1, "SD\n", 3);
     c5c:	43 e0       	ldi	r20, 0x03	; 3
     c5e:	67 e6       	ldi	r22, 0x67	; 103
     c60:	71 e0       	ldi	r23, 0x01	; 1
     c62:	88 ec       	ldi	r24, 0xC8	; 200
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	0e 94 bf 06 	call	0xd7e	; 0xd7e <UART_transmit_string>
			break;
     c6a:	08 95       	ret
		case ERROR_VOLTAGE:
			UART_transmit_string(UART1, "VOLTAGE!!!!\n", 12);
     c6c:	4c e0       	ldi	r20, 0x0C	; 12
     c6e:	6b e6       	ldi	r22, 0x6B	; 107
     c70:	71 e0       	ldi	r23, 0x01	; 1
     c72:	88 ec       	ldi	r24, 0xC8	; 200
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	0e 94 bf 06 	call	0xd7e	; 0xd7e <UART_transmit_string>
			break;
     c7a:	08 95       	ret
		case ERROR_CMD0:
			UART_transmit_string(UART1, "CMD0\n", 5);
     c7c:	45 e0       	ldi	r20, 0x05	; 5
     c7e:	68 e7       	ldi	r22, 0x78	; 120
     c80:	71 e0       	ldi	r23, 0x01	; 1
     c82:	88 ec       	ldi	r24, 0xC8	; 200
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	0e 94 bf 06 	call	0xd7e	; 0xd7e <UART_transmit_string>
			break;
     c8a:	08 95       	ret
		case ERROR_CMD8:
			UART_transmit_string(UART1, "CMD8\n", 5);
     c8c:	45 e0       	ldi	r20, 0x05	; 5
     c8e:	6e e7       	ldi	r22, 0x7E	; 126
     c90:	71 e0       	ldi	r23, 0x01	; 1
     c92:	88 ec       	ldi	r24, 0xC8	; 200
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 bf 06 	call	0xd7e	; 0xd7e <UART_transmit_string>
			break;
     c9a:	08 95       	ret
        case ERROR_CMD58:
			UART_transmit_string(UART1, "CMD58\n", 6);
     c9c:	46 e0       	ldi	r20, 0x06	; 6
     c9e:	64 e8       	ldi	r22, 0x84	; 132
     ca0:	71 e0       	ldi	r23, 0x01	; 1
     ca2:	88 ec       	ldi	r24, 0xC8	; 200
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <UART_transmit_string>
			break;
     caa:	08 95       	ret
        case ERROR_CMD55:
			UART_transmit_string(UART1, "CMD55\n", 6);
     cac:	46 e0       	ldi	r20, 0x06	; 6
     cae:	6b e8       	ldi	r22, 0x8B	; 139
     cb0:	71 e0       	ldi	r23, 0x01	; 1
     cb2:	88 ec       	ldi	r24, 0xC8	; 200
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <UART_transmit_string>
			break;
     cba:	08 95       	ret
        case ERROR_CMD41:
			UART_transmit_string(UART1, "CMD41\n", 6);
     cbc:	46 e0       	ldi	r20, 0x06	; 6
     cbe:	62 e9       	ldi	r22, 0x92	; 146
     cc0:	71 e0       	ldi	r23, 0x01	; 1
     cc2:	88 ec       	ldi	r24, 0xC8	; 200
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <UART_transmit_string>
			break;
     cca:	08 95       	ret
        case ERROR_CMD41_TIMEOUT:
			UART_transmit_string(UART1, "CMD41TIME\n", 10);
     ccc:	4a e0       	ldi	r20, 0x0A	; 10
     cce:	69 e9       	ldi	r22, 0x99	; 153
     cd0:	71 e0       	ldi	r23, 0x01	; 1
     cd2:	88 ec       	ldi	r24, 0xC8	; 200
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <UART_transmit_string>
			break;
     cda:	08 95       	ret
		case ERROR_TOKEN:
			UART_transmit_string(UART1, "TOKEN\n", 6);
     cdc:	46 e0       	ldi	r20, 0x06	; 6
     cde:	64 ea       	ldi	r22, 0xA4	; 164
     ce0:	71 e0       	ldi	r23, 0x01	; 1
     ce2:	88 ec       	ldi	r24, 0xC8	; 200
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <UART_transmit_string>
			break;
     cea:	08 95       	ret
		default:
			UART_transmit_string(UART1, "impossible\n", 11);
     cec:	4b e0       	ldi	r20, 0x0B	; 11
     cee:	6b ea       	ldi	r22, 0xAB	; 171
     cf0:	71 e0       	ldi	r23, 0x01	; 1
     cf2:	88 ec       	ldi	r24, 0xC8	; 200
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 bf 06 	call	0xd7e	; 0xd7e <UART_transmit_string>
     cfa:	08 95       	ret

00000cfc <UART_init>:
    return (uint32_t)((((F_CPU/OSC_DIV)+(4UL*(2-UtwoX)*baud_rate))/(8UL*(2-UtwoX)*baud_rate))-1);
}
*/

void UART_init(volatile UART_t *UART_addr, uint16_t baud_rate)
{
     cfc:	fc 01       	movw	r30, r24
    //uint16_t UBRR_value = Calc_Baudrate(baud_rate, U2X_Val); //Where do we get U2X
    //uint16_t UBRR_value = (uint32_t)((((F_CPU / OSC_DIV) + (4UL * (2 - U2X_Val) * baud_rate)) / (8UL * (2 - U2X_Val) * baud_rate)) - 1);
    
    uint16_t UBRR_value = 103;

    UART_addr->UART_UBRRH = UBRR_value / 256;
     cfe:	15 82       	std	Z+5, r1	; 0x05
	UART_addr->UART_UBRRL = UBRR_value % 256; 
     d00:	87 e6       	ldi	r24, 0x67	; 103
     d02:	84 83       	std	Z+4, r24	; 0x04
    UART_addr->UART_UCSRA = (U2X_Val<<U2X); //set u2x here. currently off (0)
     d04:	10 82       	st	Z, r1
// Determine the value for UCSRC using the settings for number of bits,
// parity and number of stop bits and write this value. In my solution, I
// defined constants for these settings to make the code more readable. You
// could also make sure your comments explain the value written to the
// register.
    UART_addr->UART_UCSRC = 0x00; // cleared 
     d06:	12 82       	std	Z+2, r1	; 0x02
	UART_addr->UART_UCSRC = (async_mode_1 | async_mode_2 | no_parity_1 | no_parity_2 | one_stop_bit | eight_bit_data);
     d08:	86 e0       	ldi	r24, 0x06	; 6
     d0a:	82 83       	std	Z+2, r24	; 0x02

// Enable the transmitter and receiver with interrupts disabled by writing the
// appropriate value to UCSRB 
	UART_addr->UART_UCSRB = 0x00; //cleared
     d0c:	11 82       	std	Z+1, r1	; 0x01
    UART_addr->UART_UCSRB = (RXCIE_dis | TXCIE_dis | UDRIE_dis | RXEN_en | TXEN_en);
     d0e:	88 e1       	ldi	r24, 0x18	; 24
     d10:	81 83       	std	Z+1, r24	; 0x01
     d12:	08 95       	ret

00000d14 <UART_transmit>:
    return; 
}

void UART_transmit(volatile UART_t *UART_addr, uint8_t data)
{
     d14:	fc 01       	movw	r30, r24
	
	uint8_t status = 0 ;
	do 
	{
		status = (uint8_t)(UART_addr->UART_UCSRA & (1<<UDRE)); 
     d16:	90 81       	ld	r25, Z
		
	} while (status != (1<<UDRE));
     d18:	95 ff       	sbrs	r25, 5
     d1a:	fd cf       	rjmp	.-6      	; 0xd16 <UART_transmit+0x2>
	
    //2: write val to UDR
    UART_addr->UART_UDR = data;
     d1c:	66 83       	std	Z+6, r22	; 0x06
     d1e:	08 95       	ret

00000d20 <UART_receive>:
    return;
}


char UART_receive(volatile UART_t * UART_addr)
{
     d20:	fc 01       	movw	r30, r24
	uint8_t status;
	do 
	{
		status=(UART_addr->UART_UCSRA);
     d22:	90 81       	ld	r25, Z
	} while ((status & (1 << RXC))!=(1 << RXC));
     d24:	99 23       	and	r25, r25
     d26:	ec f7       	brge	.-6      	; 0xd22 <UART_receive+0x2>
	return (UART_addr->UART_UDR);  // return the value in the receive buffer
     d28:	86 81       	ldd	r24, Z+6	; 0x06
     d2a:	08 95       	ret

00000d2c <export_print_buffer>:

char * export_print_buffer(void)
{
	
	return print_buffer;
}
     d2c:	88 eb       	ldi	r24, 0xB8	; 184
     d2e:	91 e0       	ldi	r25, 0x01	; 1
     d30:	08 95       	ret

00000d32 <copy_string_to_buffer>:

uint8_t copy_string_to_buffer(const char flash_string[], char buffer_p[], uint8_t num_bytes)
{
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
     d36:	dc 01       	movw	r26, r24
	uint8_t index;
	char value;
	if(num_bytes==0)
     d38:	41 11       	cpse	r20, r1
     d3a:	1a c0       	rjmp	.+52     	; 0xd70 <copy_string_to_buffer+0x3e>
	{
		index=0;
		do
		{
			value=pgm_read_byte(&flash_string[index]);
     d3c:	24 2f       	mov	r18, r20
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	fd 01       	movw	r30, r26
     d42:	e2 0f       	add	r30, r18
     d44:	f3 1f       	adc	r31, r19
     d46:	e4 91       	lpm	r30, Z
			buffer_p[index]=value;
     d48:	eb 01       	movw	r28, r22
     d4a:	c2 0f       	add	r28, r18
     d4c:	d3 1f       	adc	r29, r19
     d4e:	e8 83       	st	Y, r30
			index++;
     d50:	4f 5f       	subi	r20, 0xFF	; 255
		} while (value!=0);
     d52:	e1 11       	cpse	r30, r1
     d54:	f3 cf       	rjmp	.-26     	; 0xd3c <copy_string_to_buffer+0xa>
     d56:	0f c0       	rjmp	.+30     	; 0xd76 <copy_string_to_buffer+0x44>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			value=pgm_read_byte(&flash_string[index]);
     d58:	29 2f       	mov	r18, r25
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	fd 01       	movw	r30, r26
     d5e:	e2 0f       	add	r30, r18
     d60:	f3 1f       	adc	r31, r19
     d62:	e4 91       	lpm	r30, Z
			buffer_p[index]=value;
     d64:	eb 01       	movw	r28, r22
     d66:	c2 0f       	add	r28, r18
     d68:	d3 1f       	adc	r29, r19
     d6a:	e8 83       	st	Y, r30
			index++;
		} while (value!=0);
	}
	else
	{
		for(index=0;index<num_bytes;index++)
     d6c:	9f 5f       	subi	r25, 0xFF	; 255
     d6e:	01 c0       	rjmp	.+2      	; 0xd72 <copy_string_to_buffer+0x40>
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	94 17       	cp	r25, r20
     d74:	88 f3       	brcs	.-30     	; 0xd58 <copy_string_to_buffer+0x26>
			buffer_p[index]=value;
		}
		index=num_bytes;
	}
	return index;
}
     d76:	84 2f       	mov	r24, r20
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	08 95       	ret

00000d7e <UART_transmit_string>:

void UART_transmit_string(volatile UART_t * UART_addr, char string_name[], uint8_t num_bytes)
{
     d7e:	ef 92       	push	r14
     d80:	ff 92       	push	r15
     d82:	0f 93       	push	r16
     d84:	1f 93       	push	r17
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	7c 01       	movw	r14, r24
     d8c:	8b 01       	movw	r16, r22
     d8e:	d4 2f       	mov	r29, r20
	char temp8;
	uint8_t index;
	if(num_bytes==0)
     d90:	41 11       	cpse	r20, r1
     d92:	18 c0       	rjmp	.+48     	; 0xdc4 <UART_transmit_string+0x46>
	{
		temp8=string_name[0];
     d94:	fb 01       	movw	r30, r22
     d96:	60 81       	ld	r22, Z
                index=0;
     d98:	c0 e0       	ldi	r28, 0x00	; 0
		while (temp8!=0)
     d9a:	08 c0       	rjmp	.+16     	; 0xdac <UART_transmit_string+0x2e>
		{
			UART_transmit(UART_addr, temp8);
     d9c:	c7 01       	movw	r24, r14
     d9e:	0e 94 8a 06 	call	0xd14	; 0xd14 <UART_transmit>
			index++;
     da2:	cf 5f       	subi	r28, 0xFF	; 255
			temp8=string_name[index];
     da4:	f8 01       	movw	r30, r16
     da6:	ec 0f       	add	r30, r28
     da8:	f1 1d       	adc	r31, r1
     daa:	60 81       	ld	r22, Z
	uint8_t index;
	if(num_bytes==0)
	{
		temp8=string_name[0];
                index=0;
		while (temp8!=0)
     dac:	61 11       	cpse	r22, r1
     dae:	f6 cf       	rjmp	.-20     	; 0xd9c <UART_transmit_string+0x1e>
     db0:	0c c0       	rjmp	.+24     	; 0xdca <UART_transmit_string+0x4c>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			UART_transmit(UART_addr, string_name[index]);
     db2:	f8 01       	movw	r30, r16
     db4:	ec 0f       	add	r30, r28
     db6:	f1 1d       	adc	r31, r1
     db8:	60 81       	ld	r22, Z
     dba:	c7 01       	movw	r24, r14
     dbc:	0e 94 8a 06 	call	0xd14	; 0xd14 <UART_transmit>
			temp8=string_name[index];
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
     dc0:	cf 5f       	subi	r28, 0xFF	; 255
     dc2:	01 c0       	rjmp	.+2      	; 0xdc6 <UART_transmit_string+0x48>
     dc4:	c0 e0       	ldi	r28, 0x00	; 0
     dc6:	cd 17       	cp	r28, r29
     dc8:	a0 f3       	brcs	.-24     	; 0xdb2 <UART_transmit_string+0x34>
		{
			UART_transmit(UART_addr, string_name[index]);
		}
	}
}
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	ff 90       	pop	r15
     dd4:	ef 90       	pop	r14
     dd6:	08 95       	ret

00000dd8 <__udivmodsi4>:
     dd8:	a1 e2       	ldi	r26, 0x21	; 33
     dda:	1a 2e       	mov	r1, r26
     ddc:	aa 1b       	sub	r26, r26
     dde:	bb 1b       	sub	r27, r27
     de0:	fd 01       	movw	r30, r26
     de2:	0d c0       	rjmp	.+26     	; 0xdfe <__udivmodsi4_ep>

00000de4 <__udivmodsi4_loop>:
     de4:	aa 1f       	adc	r26, r26
     de6:	bb 1f       	adc	r27, r27
     de8:	ee 1f       	adc	r30, r30
     dea:	ff 1f       	adc	r31, r31
     dec:	a2 17       	cp	r26, r18
     dee:	b3 07       	cpc	r27, r19
     df0:	e4 07       	cpc	r30, r20
     df2:	f5 07       	cpc	r31, r21
     df4:	20 f0       	brcs	.+8      	; 0xdfe <__udivmodsi4_ep>
     df6:	a2 1b       	sub	r26, r18
     df8:	b3 0b       	sbc	r27, r19
     dfa:	e4 0b       	sbc	r30, r20
     dfc:	f5 0b       	sbc	r31, r21

00000dfe <__udivmodsi4_ep>:
     dfe:	66 1f       	adc	r22, r22
     e00:	77 1f       	adc	r23, r23
     e02:	88 1f       	adc	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	1a 94       	dec	r1
     e08:	69 f7       	brne	.-38     	; 0xde4 <__udivmodsi4_loop>
     e0a:	60 95       	com	r22
     e0c:	70 95       	com	r23
     e0e:	80 95       	com	r24
     e10:	90 95       	com	r25
     e12:	9b 01       	movw	r18, r22
     e14:	ac 01       	movw	r20, r24
     e16:	bd 01       	movw	r22, r26
     e18:	cf 01       	movw	r24, r30
     e1a:	08 95       	ret

00000e1c <__tablejump2__>:
     e1c:	ee 0f       	add	r30, r30
     e1e:	ff 1f       	adc	r31, r31
     e20:	05 90       	lpm	r0, Z+
     e22:	f4 91       	lpm	r31, Z
     e24:	e0 2d       	mov	r30, r0
     e26:	09 94       	ijmp

00000e28 <atol>:
     e28:	1f 93       	push	r17
     e2a:	fc 01       	movw	r30, r24
     e2c:	99 27       	eor	r25, r25
     e2e:	88 27       	eor	r24, r24
     e30:	bc 01       	movw	r22, r24
     e32:	e8 94       	clt
     e34:	11 91       	ld	r17, Z+
     e36:	10 32       	cpi	r17, 0x20	; 32
     e38:	e9 f3       	breq	.-6      	; 0xe34 <atol+0xc>
     e3a:	19 30       	cpi	r17, 0x09	; 9
     e3c:	10 f0       	brcs	.+4      	; 0xe42 <atol+0x1a>
     e3e:	1e 30       	cpi	r17, 0x0E	; 14
     e40:	c8 f3       	brcs	.-14     	; 0xe34 <atol+0xc>
     e42:	1b 32       	cpi	r17, 0x2B	; 43
     e44:	51 f0       	breq	.+20     	; 0xe5a <atol+0x32>
     e46:	1d 32       	cpi	r17, 0x2D	; 45
     e48:	49 f4       	brne	.+18     	; 0xe5c <atol+0x34>
     e4a:	68 94       	set
     e4c:	06 c0       	rjmp	.+12     	; 0xe5a <atol+0x32>
     e4e:	0e 94 3b 07 	call	0xe76	; 0xe76 <__mulsi_const_10>
     e52:	61 0f       	add	r22, r17
     e54:	71 1d       	adc	r23, r1
     e56:	81 1d       	adc	r24, r1
     e58:	91 1d       	adc	r25, r1
     e5a:	11 91       	ld	r17, Z+
     e5c:	10 53       	subi	r17, 0x30	; 48
     e5e:	1a 30       	cpi	r17, 0x0A	; 10
     e60:	b0 f3       	brcs	.-20     	; 0xe4e <atol+0x26>
     e62:	3e f4       	brtc	.+14     	; 0xe72 <atol+0x4a>
     e64:	90 95       	com	r25
     e66:	80 95       	com	r24
     e68:	70 95       	com	r23
     e6a:	61 95       	neg	r22
     e6c:	7f 4f       	sbci	r23, 0xFF	; 255
     e6e:	8f 4f       	sbci	r24, 0xFF	; 255
     e70:	9f 4f       	sbci	r25, 0xFF	; 255
     e72:	1f 91       	pop	r17
     e74:	08 95       	ret

00000e76 <__mulsi_const_10>:
     e76:	59 2f       	mov	r21, r25
     e78:	48 2f       	mov	r20, r24
     e7a:	37 2f       	mov	r19, r23
     e7c:	26 2f       	mov	r18, r22
     e7e:	66 0f       	add	r22, r22
     e80:	77 1f       	adc	r23, r23
     e82:	88 1f       	adc	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	66 0f       	add	r22, r22
     e88:	77 1f       	adc	r23, r23
     e8a:	88 1f       	adc	r24, r24
     e8c:	99 1f       	adc	r25, r25
     e8e:	62 0f       	add	r22, r18
     e90:	73 1f       	adc	r23, r19
     e92:	84 1f       	adc	r24, r20
     e94:	95 1f       	adc	r25, r21
     e96:	66 0f       	add	r22, r22
     e98:	77 1f       	adc	r23, r23
     e9a:	88 1f       	adc	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	08 95       	ret

00000ea0 <sprintf>:
     ea0:	ae e0       	ldi	r26, 0x0E	; 14
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e6 e5       	ldi	r30, 0x56	; 86
     ea6:	f7 e0       	ldi	r31, 0x07	; 7
     ea8:	0c 94 11 0a 	jmp	0x1422	; 0x1422 <__prologue_saves__+0x1c>
     eac:	0d 89       	ldd	r16, Y+21	; 0x15
     eae:	1e 89       	ldd	r17, Y+22	; 0x16
     eb0:	86 e0       	ldi	r24, 0x06	; 6
     eb2:	8c 83       	std	Y+4, r24	; 0x04
     eb4:	1a 83       	std	Y+2, r17	; 0x02
     eb6:	09 83       	std	Y+1, r16	; 0x01
     eb8:	8f ef       	ldi	r24, 0xFF	; 255
     eba:	9f e7       	ldi	r25, 0x7F	; 127
     ebc:	9e 83       	std	Y+6, r25	; 0x06
     ebe:	8d 83       	std	Y+5, r24	; 0x05
     ec0:	ae 01       	movw	r20, r28
     ec2:	47 5e       	subi	r20, 0xE7	; 231
     ec4:	5f 4f       	sbci	r21, 0xFF	; 255
     ec6:	6f 89       	ldd	r22, Y+23	; 0x17
     ec8:	78 8d       	ldd	r23, Y+24	; 0x18
     eca:	ce 01       	movw	r24, r28
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	0e 94 72 07 	call	0xee4	; 0xee4 <vfprintf>
     ed2:	ef 81       	ldd	r30, Y+7	; 0x07
     ed4:	f8 85       	ldd	r31, Y+8	; 0x08
     ed6:	e0 0f       	add	r30, r16
     ed8:	f1 1f       	adc	r31, r17
     eda:	10 82       	st	Z, r1
     edc:	2e 96       	adiw	r28, 0x0e	; 14
     ede:	e4 e0       	ldi	r30, 0x04	; 4
     ee0:	0c 94 2d 0a 	jmp	0x145a	; 0x145a <__epilogue_restores__+0x1c>

00000ee4 <vfprintf>:
     ee4:	ab e0       	ldi	r26, 0x0B	; 11
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	e8 e7       	ldi	r30, 0x78	; 120
     eea:	f7 e0       	ldi	r31, 0x07	; 7
     eec:	0c 94 03 0a 	jmp	0x1406	; 0x1406 <__prologue_saves__>
     ef0:	6c 01       	movw	r12, r24
     ef2:	7b 01       	movw	r14, r22
     ef4:	8a 01       	movw	r16, r20
     ef6:	fc 01       	movw	r30, r24
     ef8:	17 82       	std	Z+7, r1	; 0x07
     efa:	16 82       	std	Z+6, r1	; 0x06
     efc:	83 81       	ldd	r24, Z+3	; 0x03
     efe:	81 ff       	sbrs	r24, 1
     f00:	cc c1       	rjmp	.+920    	; 0x129a <vfprintf+0x3b6>
     f02:	ce 01       	movw	r24, r28
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	3c 01       	movw	r6, r24
     f08:	f6 01       	movw	r30, r12
     f0a:	93 81       	ldd	r25, Z+3	; 0x03
     f0c:	f7 01       	movw	r30, r14
     f0e:	93 fd       	sbrc	r25, 3
     f10:	85 91       	lpm	r24, Z+
     f12:	93 ff       	sbrs	r25, 3
     f14:	81 91       	ld	r24, Z+
     f16:	7f 01       	movw	r14, r30
     f18:	88 23       	and	r24, r24
     f1a:	09 f4       	brne	.+2      	; 0xf1e <vfprintf+0x3a>
     f1c:	ba c1       	rjmp	.+884    	; 0x1292 <vfprintf+0x3ae>
     f1e:	85 32       	cpi	r24, 0x25	; 37
     f20:	39 f4       	brne	.+14     	; 0xf30 <vfprintf+0x4c>
     f22:	93 fd       	sbrc	r25, 3
     f24:	85 91       	lpm	r24, Z+
     f26:	93 ff       	sbrs	r25, 3
     f28:	81 91       	ld	r24, Z+
     f2a:	7f 01       	movw	r14, r30
     f2c:	85 32       	cpi	r24, 0x25	; 37
     f2e:	29 f4       	brne	.+10     	; 0xf3a <vfprintf+0x56>
     f30:	b6 01       	movw	r22, r12
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	0e 94 69 09 	call	0x12d2	; 0x12d2 <fputc>
     f38:	e7 cf       	rjmp	.-50     	; 0xf08 <vfprintf+0x24>
     f3a:	91 2c       	mov	r9, r1
     f3c:	21 2c       	mov	r2, r1
     f3e:	31 2c       	mov	r3, r1
     f40:	ff e1       	ldi	r31, 0x1F	; 31
     f42:	f3 15       	cp	r31, r3
     f44:	d8 f0       	brcs	.+54     	; 0xf7c <vfprintf+0x98>
     f46:	8b 32       	cpi	r24, 0x2B	; 43
     f48:	79 f0       	breq	.+30     	; 0xf68 <vfprintf+0x84>
     f4a:	38 f4       	brcc	.+14     	; 0xf5a <vfprintf+0x76>
     f4c:	80 32       	cpi	r24, 0x20	; 32
     f4e:	79 f0       	breq	.+30     	; 0xf6e <vfprintf+0x8a>
     f50:	83 32       	cpi	r24, 0x23	; 35
     f52:	a1 f4       	brne	.+40     	; 0xf7c <vfprintf+0x98>
     f54:	23 2d       	mov	r18, r3
     f56:	20 61       	ori	r18, 0x10	; 16
     f58:	1d c0       	rjmp	.+58     	; 0xf94 <vfprintf+0xb0>
     f5a:	8d 32       	cpi	r24, 0x2D	; 45
     f5c:	61 f0       	breq	.+24     	; 0xf76 <vfprintf+0x92>
     f5e:	80 33       	cpi	r24, 0x30	; 48
     f60:	69 f4       	brne	.+26     	; 0xf7c <vfprintf+0x98>
     f62:	23 2d       	mov	r18, r3
     f64:	21 60       	ori	r18, 0x01	; 1
     f66:	16 c0       	rjmp	.+44     	; 0xf94 <vfprintf+0xb0>
     f68:	83 2d       	mov	r24, r3
     f6a:	82 60       	ori	r24, 0x02	; 2
     f6c:	38 2e       	mov	r3, r24
     f6e:	e3 2d       	mov	r30, r3
     f70:	e4 60       	ori	r30, 0x04	; 4
     f72:	3e 2e       	mov	r3, r30
     f74:	2a c0       	rjmp	.+84     	; 0xfca <vfprintf+0xe6>
     f76:	f3 2d       	mov	r31, r3
     f78:	f8 60       	ori	r31, 0x08	; 8
     f7a:	1d c0       	rjmp	.+58     	; 0xfb6 <vfprintf+0xd2>
     f7c:	37 fc       	sbrc	r3, 7
     f7e:	2d c0       	rjmp	.+90     	; 0xfda <vfprintf+0xf6>
     f80:	20 ed       	ldi	r18, 0xD0	; 208
     f82:	28 0f       	add	r18, r24
     f84:	2a 30       	cpi	r18, 0x0A	; 10
     f86:	40 f0       	brcs	.+16     	; 0xf98 <vfprintf+0xb4>
     f88:	8e 32       	cpi	r24, 0x2E	; 46
     f8a:	b9 f4       	brne	.+46     	; 0xfba <vfprintf+0xd6>
     f8c:	36 fc       	sbrc	r3, 6
     f8e:	81 c1       	rjmp	.+770    	; 0x1292 <vfprintf+0x3ae>
     f90:	23 2d       	mov	r18, r3
     f92:	20 64       	ori	r18, 0x40	; 64
     f94:	32 2e       	mov	r3, r18
     f96:	19 c0       	rjmp	.+50     	; 0xfca <vfprintf+0xe6>
     f98:	36 fe       	sbrs	r3, 6
     f9a:	06 c0       	rjmp	.+12     	; 0xfa8 <vfprintf+0xc4>
     f9c:	8a e0       	ldi	r24, 0x0A	; 10
     f9e:	98 9e       	mul	r9, r24
     fa0:	20 0d       	add	r18, r0
     fa2:	11 24       	eor	r1, r1
     fa4:	92 2e       	mov	r9, r18
     fa6:	11 c0       	rjmp	.+34     	; 0xfca <vfprintf+0xe6>
     fa8:	ea e0       	ldi	r30, 0x0A	; 10
     faa:	2e 9e       	mul	r2, r30
     fac:	20 0d       	add	r18, r0
     fae:	11 24       	eor	r1, r1
     fb0:	22 2e       	mov	r2, r18
     fb2:	f3 2d       	mov	r31, r3
     fb4:	f0 62       	ori	r31, 0x20	; 32
     fb6:	3f 2e       	mov	r3, r31
     fb8:	08 c0       	rjmp	.+16     	; 0xfca <vfprintf+0xe6>
     fba:	8c 36       	cpi	r24, 0x6C	; 108
     fbc:	21 f4       	brne	.+8      	; 0xfc6 <vfprintf+0xe2>
     fbe:	83 2d       	mov	r24, r3
     fc0:	80 68       	ori	r24, 0x80	; 128
     fc2:	38 2e       	mov	r3, r24
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <vfprintf+0xe6>
     fc6:	88 36       	cpi	r24, 0x68	; 104
     fc8:	41 f4       	brne	.+16     	; 0xfda <vfprintf+0xf6>
     fca:	f7 01       	movw	r30, r14
     fcc:	93 fd       	sbrc	r25, 3
     fce:	85 91       	lpm	r24, Z+
     fd0:	93 ff       	sbrs	r25, 3
     fd2:	81 91       	ld	r24, Z+
     fd4:	7f 01       	movw	r14, r30
     fd6:	81 11       	cpse	r24, r1
     fd8:	b3 cf       	rjmp	.-154    	; 0xf40 <vfprintf+0x5c>
     fda:	98 2f       	mov	r25, r24
     fdc:	9f 7d       	andi	r25, 0xDF	; 223
     fde:	95 54       	subi	r25, 0x45	; 69
     fe0:	93 30       	cpi	r25, 0x03	; 3
     fe2:	28 f4       	brcc	.+10     	; 0xfee <vfprintf+0x10a>
     fe4:	0c 5f       	subi	r16, 0xFC	; 252
     fe6:	1f 4f       	sbci	r17, 0xFF	; 255
     fe8:	9f e3       	ldi	r25, 0x3F	; 63
     fea:	99 83       	std	Y+1, r25	; 0x01
     fec:	0d c0       	rjmp	.+26     	; 0x1008 <vfprintf+0x124>
     fee:	83 36       	cpi	r24, 0x63	; 99
     ff0:	31 f0       	breq	.+12     	; 0xffe <vfprintf+0x11a>
     ff2:	83 37       	cpi	r24, 0x73	; 115
     ff4:	71 f0       	breq	.+28     	; 0x1012 <vfprintf+0x12e>
     ff6:	83 35       	cpi	r24, 0x53	; 83
     ff8:	09 f0       	breq	.+2      	; 0xffc <vfprintf+0x118>
     ffa:	59 c0       	rjmp	.+178    	; 0x10ae <vfprintf+0x1ca>
     ffc:	21 c0       	rjmp	.+66     	; 0x1040 <vfprintf+0x15c>
     ffe:	f8 01       	movw	r30, r16
    1000:	80 81       	ld	r24, Z
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	0e 5f       	subi	r16, 0xFE	; 254
    1006:	1f 4f       	sbci	r17, 0xFF	; 255
    1008:	88 24       	eor	r8, r8
    100a:	83 94       	inc	r8
    100c:	91 2c       	mov	r9, r1
    100e:	53 01       	movw	r10, r6
    1010:	13 c0       	rjmp	.+38     	; 0x1038 <vfprintf+0x154>
    1012:	28 01       	movw	r4, r16
    1014:	f2 e0       	ldi	r31, 0x02	; 2
    1016:	4f 0e       	add	r4, r31
    1018:	51 1c       	adc	r5, r1
    101a:	f8 01       	movw	r30, r16
    101c:	a0 80       	ld	r10, Z
    101e:	b1 80       	ldd	r11, Z+1	; 0x01
    1020:	36 fe       	sbrs	r3, 6
    1022:	03 c0       	rjmp	.+6      	; 0x102a <vfprintf+0x146>
    1024:	69 2d       	mov	r22, r9
    1026:	70 e0       	ldi	r23, 0x00	; 0
    1028:	02 c0       	rjmp	.+4      	; 0x102e <vfprintf+0x14a>
    102a:	6f ef       	ldi	r22, 0xFF	; 255
    102c:	7f ef       	ldi	r23, 0xFF	; 255
    102e:	c5 01       	movw	r24, r10
    1030:	0e 94 5e 09 	call	0x12bc	; 0x12bc <strnlen>
    1034:	4c 01       	movw	r8, r24
    1036:	82 01       	movw	r16, r4
    1038:	f3 2d       	mov	r31, r3
    103a:	ff 77       	andi	r31, 0x7F	; 127
    103c:	3f 2e       	mov	r3, r31
    103e:	16 c0       	rjmp	.+44     	; 0x106c <vfprintf+0x188>
    1040:	28 01       	movw	r4, r16
    1042:	22 e0       	ldi	r18, 0x02	; 2
    1044:	42 0e       	add	r4, r18
    1046:	51 1c       	adc	r5, r1
    1048:	f8 01       	movw	r30, r16
    104a:	a0 80       	ld	r10, Z
    104c:	b1 80       	ldd	r11, Z+1	; 0x01
    104e:	36 fe       	sbrs	r3, 6
    1050:	03 c0       	rjmp	.+6      	; 0x1058 <vfprintf+0x174>
    1052:	69 2d       	mov	r22, r9
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	02 c0       	rjmp	.+4      	; 0x105c <vfprintf+0x178>
    1058:	6f ef       	ldi	r22, 0xFF	; 255
    105a:	7f ef       	ldi	r23, 0xFF	; 255
    105c:	c5 01       	movw	r24, r10
    105e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <strnlen_P>
    1062:	4c 01       	movw	r8, r24
    1064:	f3 2d       	mov	r31, r3
    1066:	f0 68       	ori	r31, 0x80	; 128
    1068:	3f 2e       	mov	r3, r31
    106a:	82 01       	movw	r16, r4
    106c:	33 fc       	sbrc	r3, 3
    106e:	1b c0       	rjmp	.+54     	; 0x10a6 <vfprintf+0x1c2>
    1070:	82 2d       	mov	r24, r2
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	88 16       	cp	r8, r24
    1076:	99 06       	cpc	r9, r25
    1078:	b0 f4       	brcc	.+44     	; 0x10a6 <vfprintf+0x1c2>
    107a:	b6 01       	movw	r22, r12
    107c:	80 e2       	ldi	r24, 0x20	; 32
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 69 09 	call	0x12d2	; 0x12d2 <fputc>
    1084:	2a 94       	dec	r2
    1086:	f4 cf       	rjmp	.-24     	; 0x1070 <vfprintf+0x18c>
    1088:	f5 01       	movw	r30, r10
    108a:	37 fc       	sbrc	r3, 7
    108c:	85 91       	lpm	r24, Z+
    108e:	37 fe       	sbrs	r3, 7
    1090:	81 91       	ld	r24, Z+
    1092:	5f 01       	movw	r10, r30
    1094:	b6 01       	movw	r22, r12
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 69 09 	call	0x12d2	; 0x12d2 <fputc>
    109c:	21 10       	cpse	r2, r1
    109e:	2a 94       	dec	r2
    10a0:	21 e0       	ldi	r18, 0x01	; 1
    10a2:	82 1a       	sub	r8, r18
    10a4:	91 08       	sbc	r9, r1
    10a6:	81 14       	cp	r8, r1
    10a8:	91 04       	cpc	r9, r1
    10aa:	71 f7       	brne	.-36     	; 0x1088 <vfprintf+0x1a4>
    10ac:	e8 c0       	rjmp	.+464    	; 0x127e <vfprintf+0x39a>
    10ae:	84 36       	cpi	r24, 0x64	; 100
    10b0:	11 f0       	breq	.+4      	; 0x10b6 <vfprintf+0x1d2>
    10b2:	89 36       	cpi	r24, 0x69	; 105
    10b4:	41 f5       	brne	.+80     	; 0x1106 <vfprintf+0x222>
    10b6:	f8 01       	movw	r30, r16
    10b8:	37 fe       	sbrs	r3, 7
    10ba:	07 c0       	rjmp	.+14     	; 0x10ca <vfprintf+0x1e6>
    10bc:	60 81       	ld	r22, Z
    10be:	71 81       	ldd	r23, Z+1	; 0x01
    10c0:	82 81       	ldd	r24, Z+2	; 0x02
    10c2:	93 81       	ldd	r25, Z+3	; 0x03
    10c4:	0c 5f       	subi	r16, 0xFC	; 252
    10c6:	1f 4f       	sbci	r17, 0xFF	; 255
    10c8:	08 c0       	rjmp	.+16     	; 0x10da <vfprintf+0x1f6>
    10ca:	60 81       	ld	r22, Z
    10cc:	71 81       	ldd	r23, Z+1	; 0x01
    10ce:	07 2e       	mov	r0, r23
    10d0:	00 0c       	add	r0, r0
    10d2:	88 0b       	sbc	r24, r24
    10d4:	99 0b       	sbc	r25, r25
    10d6:	0e 5f       	subi	r16, 0xFE	; 254
    10d8:	1f 4f       	sbci	r17, 0xFF	; 255
    10da:	f3 2d       	mov	r31, r3
    10dc:	ff 76       	andi	r31, 0x6F	; 111
    10de:	3f 2e       	mov	r3, r31
    10e0:	97 ff       	sbrs	r25, 7
    10e2:	09 c0       	rjmp	.+18     	; 0x10f6 <vfprintf+0x212>
    10e4:	90 95       	com	r25
    10e6:	80 95       	com	r24
    10e8:	70 95       	com	r23
    10ea:	61 95       	neg	r22
    10ec:	7f 4f       	sbci	r23, 0xFF	; 255
    10ee:	8f 4f       	sbci	r24, 0xFF	; 255
    10f0:	9f 4f       	sbci	r25, 0xFF	; 255
    10f2:	f0 68       	ori	r31, 0x80	; 128
    10f4:	3f 2e       	mov	r3, r31
    10f6:	2a e0       	ldi	r18, 0x0A	; 10
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	a3 01       	movw	r20, r6
    10fc:	0e 94 a5 09 	call	0x134a	; 0x134a <__ultoa_invert>
    1100:	88 2e       	mov	r8, r24
    1102:	86 18       	sub	r8, r6
    1104:	45 c0       	rjmp	.+138    	; 0x1190 <vfprintf+0x2ac>
    1106:	85 37       	cpi	r24, 0x75	; 117
    1108:	31 f4       	brne	.+12     	; 0x1116 <vfprintf+0x232>
    110a:	23 2d       	mov	r18, r3
    110c:	2f 7e       	andi	r18, 0xEF	; 239
    110e:	b2 2e       	mov	r11, r18
    1110:	2a e0       	ldi	r18, 0x0A	; 10
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	25 c0       	rjmp	.+74     	; 0x1160 <vfprintf+0x27c>
    1116:	93 2d       	mov	r25, r3
    1118:	99 7f       	andi	r25, 0xF9	; 249
    111a:	b9 2e       	mov	r11, r25
    111c:	8f 36       	cpi	r24, 0x6F	; 111
    111e:	c1 f0       	breq	.+48     	; 0x1150 <vfprintf+0x26c>
    1120:	18 f4       	brcc	.+6      	; 0x1128 <vfprintf+0x244>
    1122:	88 35       	cpi	r24, 0x58	; 88
    1124:	79 f0       	breq	.+30     	; 0x1144 <vfprintf+0x260>
    1126:	b5 c0       	rjmp	.+362    	; 0x1292 <vfprintf+0x3ae>
    1128:	80 37       	cpi	r24, 0x70	; 112
    112a:	19 f0       	breq	.+6      	; 0x1132 <vfprintf+0x24e>
    112c:	88 37       	cpi	r24, 0x78	; 120
    112e:	21 f0       	breq	.+8      	; 0x1138 <vfprintf+0x254>
    1130:	b0 c0       	rjmp	.+352    	; 0x1292 <vfprintf+0x3ae>
    1132:	e9 2f       	mov	r30, r25
    1134:	e0 61       	ori	r30, 0x10	; 16
    1136:	be 2e       	mov	r11, r30
    1138:	b4 fe       	sbrs	r11, 4
    113a:	0d c0       	rjmp	.+26     	; 0x1156 <vfprintf+0x272>
    113c:	fb 2d       	mov	r31, r11
    113e:	f4 60       	ori	r31, 0x04	; 4
    1140:	bf 2e       	mov	r11, r31
    1142:	09 c0       	rjmp	.+18     	; 0x1156 <vfprintf+0x272>
    1144:	34 fe       	sbrs	r3, 4
    1146:	0a c0       	rjmp	.+20     	; 0x115c <vfprintf+0x278>
    1148:	29 2f       	mov	r18, r25
    114a:	26 60       	ori	r18, 0x06	; 6
    114c:	b2 2e       	mov	r11, r18
    114e:	06 c0       	rjmp	.+12     	; 0x115c <vfprintf+0x278>
    1150:	28 e0       	ldi	r18, 0x08	; 8
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	05 c0       	rjmp	.+10     	; 0x1160 <vfprintf+0x27c>
    1156:	20 e1       	ldi	r18, 0x10	; 16
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <vfprintf+0x27c>
    115c:	20 e1       	ldi	r18, 0x10	; 16
    115e:	32 e0       	ldi	r19, 0x02	; 2
    1160:	f8 01       	movw	r30, r16
    1162:	b7 fe       	sbrs	r11, 7
    1164:	07 c0       	rjmp	.+14     	; 0x1174 <vfprintf+0x290>
    1166:	60 81       	ld	r22, Z
    1168:	71 81       	ldd	r23, Z+1	; 0x01
    116a:	82 81       	ldd	r24, Z+2	; 0x02
    116c:	93 81       	ldd	r25, Z+3	; 0x03
    116e:	0c 5f       	subi	r16, 0xFC	; 252
    1170:	1f 4f       	sbci	r17, 0xFF	; 255
    1172:	06 c0       	rjmp	.+12     	; 0x1180 <vfprintf+0x29c>
    1174:	60 81       	ld	r22, Z
    1176:	71 81       	ldd	r23, Z+1	; 0x01
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	0e 5f       	subi	r16, 0xFE	; 254
    117e:	1f 4f       	sbci	r17, 0xFF	; 255
    1180:	a3 01       	movw	r20, r6
    1182:	0e 94 a5 09 	call	0x134a	; 0x134a <__ultoa_invert>
    1186:	88 2e       	mov	r8, r24
    1188:	86 18       	sub	r8, r6
    118a:	fb 2d       	mov	r31, r11
    118c:	ff 77       	andi	r31, 0x7F	; 127
    118e:	3f 2e       	mov	r3, r31
    1190:	36 fe       	sbrs	r3, 6
    1192:	0d c0       	rjmp	.+26     	; 0x11ae <vfprintf+0x2ca>
    1194:	23 2d       	mov	r18, r3
    1196:	2e 7f       	andi	r18, 0xFE	; 254
    1198:	a2 2e       	mov	r10, r18
    119a:	89 14       	cp	r8, r9
    119c:	58 f4       	brcc	.+22     	; 0x11b4 <vfprintf+0x2d0>
    119e:	34 fe       	sbrs	r3, 4
    11a0:	0b c0       	rjmp	.+22     	; 0x11b8 <vfprintf+0x2d4>
    11a2:	32 fc       	sbrc	r3, 2
    11a4:	09 c0       	rjmp	.+18     	; 0x11b8 <vfprintf+0x2d4>
    11a6:	83 2d       	mov	r24, r3
    11a8:	8e 7e       	andi	r24, 0xEE	; 238
    11aa:	a8 2e       	mov	r10, r24
    11ac:	05 c0       	rjmp	.+10     	; 0x11b8 <vfprintf+0x2d4>
    11ae:	b8 2c       	mov	r11, r8
    11b0:	a3 2c       	mov	r10, r3
    11b2:	03 c0       	rjmp	.+6      	; 0x11ba <vfprintf+0x2d6>
    11b4:	b8 2c       	mov	r11, r8
    11b6:	01 c0       	rjmp	.+2      	; 0x11ba <vfprintf+0x2d6>
    11b8:	b9 2c       	mov	r11, r9
    11ba:	a4 fe       	sbrs	r10, 4
    11bc:	0f c0       	rjmp	.+30     	; 0x11dc <vfprintf+0x2f8>
    11be:	fe 01       	movw	r30, r28
    11c0:	e8 0d       	add	r30, r8
    11c2:	f1 1d       	adc	r31, r1
    11c4:	80 81       	ld	r24, Z
    11c6:	80 33       	cpi	r24, 0x30	; 48
    11c8:	21 f4       	brne	.+8      	; 0x11d2 <vfprintf+0x2ee>
    11ca:	9a 2d       	mov	r25, r10
    11cc:	99 7e       	andi	r25, 0xE9	; 233
    11ce:	a9 2e       	mov	r10, r25
    11d0:	09 c0       	rjmp	.+18     	; 0x11e4 <vfprintf+0x300>
    11d2:	a2 fe       	sbrs	r10, 2
    11d4:	06 c0       	rjmp	.+12     	; 0x11e2 <vfprintf+0x2fe>
    11d6:	b3 94       	inc	r11
    11d8:	b3 94       	inc	r11
    11da:	04 c0       	rjmp	.+8      	; 0x11e4 <vfprintf+0x300>
    11dc:	8a 2d       	mov	r24, r10
    11de:	86 78       	andi	r24, 0x86	; 134
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <vfprintf+0x300>
    11e2:	b3 94       	inc	r11
    11e4:	a3 fc       	sbrc	r10, 3
    11e6:	11 c0       	rjmp	.+34     	; 0x120a <vfprintf+0x326>
    11e8:	a0 fe       	sbrs	r10, 0
    11ea:	06 c0       	rjmp	.+12     	; 0x11f8 <vfprintf+0x314>
    11ec:	b2 14       	cp	r11, r2
    11ee:	88 f4       	brcc	.+34     	; 0x1212 <vfprintf+0x32e>
    11f0:	28 0c       	add	r2, r8
    11f2:	92 2c       	mov	r9, r2
    11f4:	9b 18       	sub	r9, r11
    11f6:	0e c0       	rjmp	.+28     	; 0x1214 <vfprintf+0x330>
    11f8:	b2 14       	cp	r11, r2
    11fa:	60 f4       	brcc	.+24     	; 0x1214 <vfprintf+0x330>
    11fc:	b6 01       	movw	r22, r12
    11fe:	80 e2       	ldi	r24, 0x20	; 32
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 69 09 	call	0x12d2	; 0x12d2 <fputc>
    1206:	b3 94       	inc	r11
    1208:	f7 cf       	rjmp	.-18     	; 0x11f8 <vfprintf+0x314>
    120a:	b2 14       	cp	r11, r2
    120c:	18 f4       	brcc	.+6      	; 0x1214 <vfprintf+0x330>
    120e:	2b 18       	sub	r2, r11
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <vfprintf+0x332>
    1212:	98 2c       	mov	r9, r8
    1214:	21 2c       	mov	r2, r1
    1216:	a4 fe       	sbrs	r10, 4
    1218:	10 c0       	rjmp	.+32     	; 0x123a <vfprintf+0x356>
    121a:	b6 01       	movw	r22, r12
    121c:	80 e3       	ldi	r24, 0x30	; 48
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	0e 94 69 09 	call	0x12d2	; 0x12d2 <fputc>
    1224:	a2 fe       	sbrs	r10, 2
    1226:	17 c0       	rjmp	.+46     	; 0x1256 <vfprintf+0x372>
    1228:	a1 fc       	sbrc	r10, 1
    122a:	03 c0       	rjmp	.+6      	; 0x1232 <vfprintf+0x34e>
    122c:	88 e7       	ldi	r24, 0x78	; 120
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <vfprintf+0x352>
    1232:	88 e5       	ldi	r24, 0x58	; 88
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	b6 01       	movw	r22, r12
    1238:	0c c0       	rjmp	.+24     	; 0x1252 <vfprintf+0x36e>
    123a:	8a 2d       	mov	r24, r10
    123c:	86 78       	andi	r24, 0x86	; 134
    123e:	59 f0       	breq	.+22     	; 0x1256 <vfprintf+0x372>
    1240:	a1 fe       	sbrs	r10, 1
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <vfprintf+0x364>
    1244:	8b e2       	ldi	r24, 0x2B	; 43
    1246:	01 c0       	rjmp	.+2      	; 0x124a <vfprintf+0x366>
    1248:	80 e2       	ldi	r24, 0x20	; 32
    124a:	a7 fc       	sbrc	r10, 7
    124c:	8d e2       	ldi	r24, 0x2D	; 45
    124e:	b6 01       	movw	r22, r12
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0e 94 69 09 	call	0x12d2	; 0x12d2 <fputc>
    1256:	89 14       	cp	r8, r9
    1258:	38 f4       	brcc	.+14     	; 0x1268 <vfprintf+0x384>
    125a:	b6 01       	movw	r22, r12
    125c:	80 e3       	ldi	r24, 0x30	; 48
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 69 09 	call	0x12d2	; 0x12d2 <fputc>
    1264:	9a 94       	dec	r9
    1266:	f7 cf       	rjmp	.-18     	; 0x1256 <vfprintf+0x372>
    1268:	8a 94       	dec	r8
    126a:	f3 01       	movw	r30, r6
    126c:	e8 0d       	add	r30, r8
    126e:	f1 1d       	adc	r31, r1
    1270:	80 81       	ld	r24, Z
    1272:	b6 01       	movw	r22, r12
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 69 09 	call	0x12d2	; 0x12d2 <fputc>
    127a:	81 10       	cpse	r8, r1
    127c:	f5 cf       	rjmp	.-22     	; 0x1268 <vfprintf+0x384>
    127e:	22 20       	and	r2, r2
    1280:	09 f4       	brne	.+2      	; 0x1284 <vfprintf+0x3a0>
    1282:	42 ce       	rjmp	.-892    	; 0xf08 <vfprintf+0x24>
    1284:	b6 01       	movw	r22, r12
    1286:	80 e2       	ldi	r24, 0x20	; 32
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	0e 94 69 09 	call	0x12d2	; 0x12d2 <fputc>
    128e:	2a 94       	dec	r2
    1290:	f6 cf       	rjmp	.-20     	; 0x127e <vfprintf+0x39a>
    1292:	f6 01       	movw	r30, r12
    1294:	86 81       	ldd	r24, Z+6	; 0x06
    1296:	97 81       	ldd	r25, Z+7	; 0x07
    1298:	02 c0       	rjmp	.+4      	; 0x129e <vfprintf+0x3ba>
    129a:	8f ef       	ldi	r24, 0xFF	; 255
    129c:	9f ef       	ldi	r25, 0xFF	; 255
    129e:	2b 96       	adiw	r28, 0x0b	; 11
    12a0:	e2 e1       	ldi	r30, 0x12	; 18
    12a2:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <__epilogue_restores__>

000012a6 <strnlen_P>:
    12a6:	fc 01       	movw	r30, r24
    12a8:	05 90       	lpm	r0, Z+
    12aa:	61 50       	subi	r22, 0x01	; 1
    12ac:	70 40       	sbci	r23, 0x00	; 0
    12ae:	01 10       	cpse	r0, r1
    12b0:	d8 f7       	brcc	.-10     	; 0x12a8 <strnlen_P+0x2>
    12b2:	80 95       	com	r24
    12b4:	90 95       	com	r25
    12b6:	8e 0f       	add	r24, r30
    12b8:	9f 1f       	adc	r25, r31
    12ba:	08 95       	ret

000012bc <strnlen>:
    12bc:	fc 01       	movw	r30, r24
    12be:	61 50       	subi	r22, 0x01	; 1
    12c0:	70 40       	sbci	r23, 0x00	; 0
    12c2:	01 90       	ld	r0, Z+
    12c4:	01 10       	cpse	r0, r1
    12c6:	d8 f7       	brcc	.-10     	; 0x12be <strnlen+0x2>
    12c8:	80 95       	com	r24
    12ca:	90 95       	com	r25
    12cc:	8e 0f       	add	r24, r30
    12ce:	9f 1f       	adc	r25, r31
    12d0:	08 95       	ret

000012d2 <fputc>:
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	fb 01       	movw	r30, r22
    12dc:	23 81       	ldd	r18, Z+3	; 0x03
    12de:	21 fd       	sbrc	r18, 1
    12e0:	03 c0       	rjmp	.+6      	; 0x12e8 <fputc+0x16>
    12e2:	8f ef       	ldi	r24, 0xFF	; 255
    12e4:	9f ef       	ldi	r25, 0xFF	; 255
    12e6:	2c c0       	rjmp	.+88     	; 0x1340 <fputc+0x6e>
    12e8:	22 ff       	sbrs	r18, 2
    12ea:	16 c0       	rjmp	.+44     	; 0x1318 <fputc+0x46>
    12ec:	46 81       	ldd	r20, Z+6	; 0x06
    12ee:	57 81       	ldd	r21, Z+7	; 0x07
    12f0:	24 81       	ldd	r18, Z+4	; 0x04
    12f2:	35 81       	ldd	r19, Z+5	; 0x05
    12f4:	42 17       	cp	r20, r18
    12f6:	53 07       	cpc	r21, r19
    12f8:	44 f4       	brge	.+16     	; 0x130a <fputc+0x38>
    12fa:	a0 81       	ld	r26, Z
    12fc:	b1 81       	ldd	r27, Z+1	; 0x01
    12fe:	9d 01       	movw	r18, r26
    1300:	2f 5f       	subi	r18, 0xFF	; 255
    1302:	3f 4f       	sbci	r19, 0xFF	; 255
    1304:	31 83       	std	Z+1, r19	; 0x01
    1306:	20 83       	st	Z, r18
    1308:	8c 93       	st	X, r24
    130a:	26 81       	ldd	r18, Z+6	; 0x06
    130c:	37 81       	ldd	r19, Z+7	; 0x07
    130e:	2f 5f       	subi	r18, 0xFF	; 255
    1310:	3f 4f       	sbci	r19, 0xFF	; 255
    1312:	37 83       	std	Z+7, r19	; 0x07
    1314:	26 83       	std	Z+6, r18	; 0x06
    1316:	14 c0       	rjmp	.+40     	; 0x1340 <fputc+0x6e>
    1318:	8b 01       	movw	r16, r22
    131a:	ec 01       	movw	r28, r24
    131c:	fb 01       	movw	r30, r22
    131e:	00 84       	ldd	r0, Z+8	; 0x08
    1320:	f1 85       	ldd	r31, Z+9	; 0x09
    1322:	e0 2d       	mov	r30, r0
    1324:	09 95       	icall
    1326:	89 2b       	or	r24, r25
    1328:	e1 f6       	brne	.-72     	; 0x12e2 <fputc+0x10>
    132a:	d8 01       	movw	r26, r16
    132c:	16 96       	adiw	r26, 0x06	; 6
    132e:	8d 91       	ld	r24, X+
    1330:	9c 91       	ld	r25, X
    1332:	17 97       	sbiw	r26, 0x07	; 7
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	17 96       	adiw	r26, 0x07	; 7
    1338:	9c 93       	st	X, r25
    133a:	8e 93       	st	-X, r24
    133c:	16 97       	sbiw	r26, 0x06	; 6
    133e:	ce 01       	movw	r24, r28
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	1f 91       	pop	r17
    1346:	0f 91       	pop	r16
    1348:	08 95       	ret

0000134a <__ultoa_invert>:
    134a:	fa 01       	movw	r30, r20
    134c:	aa 27       	eor	r26, r26
    134e:	28 30       	cpi	r18, 0x08	; 8
    1350:	51 f1       	breq	.+84     	; 0x13a6 <__ultoa_invert+0x5c>
    1352:	20 31       	cpi	r18, 0x10	; 16
    1354:	81 f1       	breq	.+96     	; 0x13b6 <__ultoa_invert+0x6c>
    1356:	e8 94       	clt
    1358:	6f 93       	push	r22
    135a:	6e 7f       	andi	r22, 0xFE	; 254
    135c:	6e 5f       	subi	r22, 0xFE	; 254
    135e:	7f 4f       	sbci	r23, 0xFF	; 255
    1360:	8f 4f       	sbci	r24, 0xFF	; 255
    1362:	9f 4f       	sbci	r25, 0xFF	; 255
    1364:	af 4f       	sbci	r26, 0xFF	; 255
    1366:	b1 e0       	ldi	r27, 0x01	; 1
    1368:	3e d0       	rcall	.+124    	; 0x13e6 <__ultoa_invert+0x9c>
    136a:	b4 e0       	ldi	r27, 0x04	; 4
    136c:	3c d0       	rcall	.+120    	; 0x13e6 <__ultoa_invert+0x9c>
    136e:	67 0f       	add	r22, r23
    1370:	78 1f       	adc	r23, r24
    1372:	89 1f       	adc	r24, r25
    1374:	9a 1f       	adc	r25, r26
    1376:	a1 1d       	adc	r26, r1
    1378:	68 0f       	add	r22, r24
    137a:	79 1f       	adc	r23, r25
    137c:	8a 1f       	adc	r24, r26
    137e:	91 1d       	adc	r25, r1
    1380:	a1 1d       	adc	r26, r1
    1382:	6a 0f       	add	r22, r26
    1384:	71 1d       	adc	r23, r1
    1386:	81 1d       	adc	r24, r1
    1388:	91 1d       	adc	r25, r1
    138a:	a1 1d       	adc	r26, r1
    138c:	20 d0       	rcall	.+64     	; 0x13ce <__ultoa_invert+0x84>
    138e:	09 f4       	brne	.+2      	; 0x1392 <__ultoa_invert+0x48>
    1390:	68 94       	set
    1392:	3f 91       	pop	r19
    1394:	2a e0       	ldi	r18, 0x0A	; 10
    1396:	26 9f       	mul	r18, r22
    1398:	11 24       	eor	r1, r1
    139a:	30 19       	sub	r19, r0
    139c:	30 5d       	subi	r19, 0xD0	; 208
    139e:	31 93       	st	Z+, r19
    13a0:	de f6       	brtc	.-74     	; 0x1358 <__ultoa_invert+0xe>
    13a2:	cf 01       	movw	r24, r30
    13a4:	08 95       	ret
    13a6:	46 2f       	mov	r20, r22
    13a8:	47 70       	andi	r20, 0x07	; 7
    13aa:	40 5d       	subi	r20, 0xD0	; 208
    13ac:	41 93       	st	Z+, r20
    13ae:	b3 e0       	ldi	r27, 0x03	; 3
    13b0:	0f d0       	rcall	.+30     	; 0x13d0 <__ultoa_invert+0x86>
    13b2:	c9 f7       	brne	.-14     	; 0x13a6 <__ultoa_invert+0x5c>
    13b4:	f6 cf       	rjmp	.-20     	; 0x13a2 <__ultoa_invert+0x58>
    13b6:	46 2f       	mov	r20, r22
    13b8:	4f 70       	andi	r20, 0x0F	; 15
    13ba:	40 5d       	subi	r20, 0xD0	; 208
    13bc:	4a 33       	cpi	r20, 0x3A	; 58
    13be:	18 f0       	brcs	.+6      	; 0x13c6 <__ultoa_invert+0x7c>
    13c0:	49 5d       	subi	r20, 0xD9	; 217
    13c2:	31 fd       	sbrc	r19, 1
    13c4:	40 52       	subi	r20, 0x20	; 32
    13c6:	41 93       	st	Z+, r20
    13c8:	02 d0       	rcall	.+4      	; 0x13ce <__ultoa_invert+0x84>
    13ca:	a9 f7       	brne	.-22     	; 0x13b6 <__ultoa_invert+0x6c>
    13cc:	ea cf       	rjmp	.-44     	; 0x13a2 <__ultoa_invert+0x58>
    13ce:	b4 e0       	ldi	r27, 0x04	; 4
    13d0:	a6 95       	lsr	r26
    13d2:	97 95       	ror	r25
    13d4:	87 95       	ror	r24
    13d6:	77 95       	ror	r23
    13d8:	67 95       	ror	r22
    13da:	ba 95       	dec	r27
    13dc:	c9 f7       	brne	.-14     	; 0x13d0 <__ultoa_invert+0x86>
    13de:	00 97       	sbiw	r24, 0x00	; 0
    13e0:	61 05       	cpc	r22, r1
    13e2:	71 05       	cpc	r23, r1
    13e4:	08 95       	ret
    13e6:	9b 01       	movw	r18, r22
    13e8:	ac 01       	movw	r20, r24
    13ea:	0a 2e       	mov	r0, r26
    13ec:	06 94       	lsr	r0
    13ee:	57 95       	ror	r21
    13f0:	47 95       	ror	r20
    13f2:	37 95       	ror	r19
    13f4:	27 95       	ror	r18
    13f6:	ba 95       	dec	r27
    13f8:	c9 f7       	brne	.-14     	; 0x13ec <__ultoa_invert+0xa2>
    13fa:	62 0f       	add	r22, r18
    13fc:	73 1f       	adc	r23, r19
    13fe:	84 1f       	adc	r24, r20
    1400:	95 1f       	adc	r25, r21
    1402:	a0 1d       	adc	r26, r0
    1404:	08 95       	ret

00001406 <__prologue_saves__>:
    1406:	2f 92       	push	r2
    1408:	3f 92       	push	r3
    140a:	4f 92       	push	r4
    140c:	5f 92       	push	r5
    140e:	6f 92       	push	r6
    1410:	7f 92       	push	r7
    1412:	8f 92       	push	r8
    1414:	9f 92       	push	r9
    1416:	af 92       	push	r10
    1418:	bf 92       	push	r11
    141a:	cf 92       	push	r12
    141c:	df 92       	push	r13
    141e:	ef 92       	push	r14
    1420:	ff 92       	push	r15
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	ca 1b       	sub	r28, r26
    1430:	db 0b       	sbc	r29, r27
    1432:	0f b6       	in	r0, 0x3f	; 63
    1434:	f8 94       	cli
    1436:	de bf       	out	0x3e, r29	; 62
    1438:	0f be       	out	0x3f, r0	; 63
    143a:	cd bf       	out	0x3d, r28	; 61
    143c:	09 94       	ijmp

0000143e <__epilogue_restores__>:
    143e:	2a 88       	ldd	r2, Y+18	; 0x12
    1440:	39 88       	ldd	r3, Y+17	; 0x11
    1442:	48 88       	ldd	r4, Y+16	; 0x10
    1444:	5f 84       	ldd	r5, Y+15	; 0x0f
    1446:	6e 84       	ldd	r6, Y+14	; 0x0e
    1448:	7d 84       	ldd	r7, Y+13	; 0x0d
    144a:	8c 84       	ldd	r8, Y+12	; 0x0c
    144c:	9b 84       	ldd	r9, Y+11	; 0x0b
    144e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1450:	b9 84       	ldd	r11, Y+9	; 0x09
    1452:	c8 84       	ldd	r12, Y+8	; 0x08
    1454:	df 80       	ldd	r13, Y+7	; 0x07
    1456:	ee 80       	ldd	r14, Y+6	; 0x06
    1458:	fd 80       	ldd	r15, Y+5	; 0x05
    145a:	0c 81       	ldd	r16, Y+4	; 0x04
    145c:	1b 81       	ldd	r17, Y+3	; 0x03
    145e:	aa 81       	ldd	r26, Y+2	; 0x02
    1460:	b9 81       	ldd	r27, Y+1	; 0x01
    1462:	ce 0f       	add	r28, r30
    1464:	d1 1d       	adc	r29, r1
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	ed 01       	movw	r28, r26
    1472:	08 95       	ret

00001474 <_exit>:
    1474:	f8 94       	cli

00001476 <__stop_program>:
    1476:	ff cf       	rjmp	.-2      	; 0x1476 <__stop_program>
