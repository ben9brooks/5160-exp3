
Experiment3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00000770  000007e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000770  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000868  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000218a  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001052  00000000  00000000  00002b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ccd  00000000  00000000  00003bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a8  00000000  00000000  00004894  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000086d  00000000  00000000  00004b3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e6d  00000000  00000000  000053a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00006216  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e0 e7       	ldi	r30, 0x70	; 112
  e0:	f7 e0       	ldi	r31, 0x07	; 7
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a4 35       	cpi	r26, 0x54	; 84
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a4 e5       	ldi	r26, 0x54	; 84
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a4 35       	cpi	r26, 0x54	; 84
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 95 00 	call	0x12a	; 0x12a <main>
 102:	0c 94 b6 03 	jmp	0x76c	; 0x76c <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <GPIO_Output_Init>:

//Sets DDRX bit to make port pin an output
void GPIO_Output_Init(volatile GPIO_port_t *port_addr, uint8_t pin_mask)
{
  
  port_addr->DDR_REG |= (pin_mask);
 10a:	fc 01       	movw	r30, r24
 10c:	21 81       	ldd	r18, Z+1	; 0x01
 10e:	62 2b       	or	r22, r18
 110:	61 83       	std	Z+1, r22	; 0x01
 112:	08 95       	ret

00000114 <GPIO_Output_Set>:

// Sets the GPIO output to 1
void GPIO_Output_Set(volatile GPIO_port_t *port_addr, uint8_t pin_mask)
{
  //dereferences port address' port register via struct, sets to 1 with |=
  port_addr->PORT_REG |= (pin_mask);
 114:	fc 01       	movw	r30, r24
 116:	22 81       	ldd	r18, Z+2	; 0x02
 118:	62 2b       	or	r22, r18
 11a:	62 83       	std	Z+2, r22	; 0x02
 11c:	08 95       	ret

0000011e <GPIO_Output_Clear>:
}

// Clears the GPIO output to 0
void GPIO_Output_Clear(volatile GPIO_port_t *port_addr, uint8_t pin_mask)
{
 11e:	fc 01       	movw	r30, r24
  ////dereferences port address' port register via struct, sets to 0 with &= ~()
  port_addr->PORT_REG &= ~(pin_mask);
 120:	92 81       	ldd	r25, Z+2	; 0x02
 122:	60 95       	com	r22
 124:	69 23       	and	r22, r25
 126:	62 83       	std	Z+2, r22	; 0x02
 128:	08 95       	ret

0000012a <main>:
#include <stdio.h>
#include "SD.h"


int main(void)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	2e 97       	sbiw	r28, 0x0e	; 14
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	de bf       	out	0x3e, r29	; 62
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	cd bf       	out	0x3d, r28	; 61
	//exp 2 inits
	UART_init(UART0, BAUD_RATE);
 13e:	60 e8       	ldi	r22, 0x80	; 128
 140:	75 e2       	ldi	r23, 0x25	; 37
 142:	80 ec       	ldi	r24, 0xC0	; 192
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 55 03 	call	0x6aa	; 0x6aa <UART_init>
	UART_init(UART1, BAUD_RATE);
 14a:	60 e8       	ldi	r22, 0x80	; 128
 14c:	75 e2       	ldi	r23, 0x25	; 37
 14e:	88 ec       	ldi	r24, 0xC8	; 200
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 55 03 	call	0x6aa	; 0x6aa <UART_init>
	UART_init(UART2, BAUD_RATE);
 156:	60 e8       	ldi	r22, 0x80	; 128
 158:	75 e2       	ldi	r23, 0x25	; 37
 15a:	80 ed       	ldi	r24, 0xD0	; 208
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 55 03 	call	0x6aa	; 0x6aa <UART_init>

	//exp3 inits
	SPI_master_init(SPI0, 400000U); // 0 is used for SD card, OLED, MP3
 162:	40 e8       	ldi	r20, 0x80	; 128
 164:	5a e1       	ldi	r21, 0x1A	; 26
 166:	66 e0       	ldi	r22, 0x06	; 6
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	8c e4       	ldi	r24, 0x4C	; 76
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <SPI_master_init>
	//SPI_master_init(SPI1, 2500000U);
	uint8_t data = 0x52;
 172:	82 e5       	ldi	r24, 0x52	; 82
 174:	89 83       	std	Y+1, r24	; 0x01
	uint8_t error =  0;
	uint32_t arg = 0x00000000;
	enum ErrorTypes typederror = 0;
	
	
	char start[] = "Start\n";
 176:	87 e0       	ldi	r24, 0x07	; 7
 178:	e0 e1       	ldi	r30, 0x10	; 16
 17a:	f1 e0       	ldi	r31, 0x01	; 1
 17c:	de 01       	movw	r26, r28
 17e:	12 96       	adiw	r26, 0x02	; 2
 180:	01 90       	ld	r0, Z+
 182:	0d 92       	st	X+, r0
 184:	8a 95       	dec	r24
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0x56>
	char stop[] = "Stop\n";
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	e7 e1       	ldi	r30, 0x17	; 23
 18c:	f1 e0       	ldi	r31, 0x01	; 1
 18e:	de 01       	movw	r26, r28
 190:	19 96       	adiw	r26, 0x09	; 9
 192:	01 90       	ld	r0, Z+
 194:	0d 92       	st	X+, r0
 196:	8a 95       	dec	r24
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x68>
	
	// initialize SS AKA CS
	GPIO_Output_Init(PB, (1<<4));
 19a:	60 e1       	ldi	r22, 0x10	; 16
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	83 e2       	ldi	r24, 0x23	; 35
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_Output_Init>
	
	UART_transmit_string(UART1, start, 6);
 1a6:	46 e0       	ldi	r20, 0x06	; 6
 1a8:	50 e0       	ldi	r21, 0x00	; 0
 1aa:	be 01       	movw	r22, r28
 1ac:	6e 5f       	subi	r22, 0xFE	; 254
 1ae:	7f 4f       	sbci	r23, 0xFF	; 255
 1b0:	88 ec       	ldi	r24, 0xC8	; 200
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 67 03 	call	0x6ce	; 0x6ce <UART_transmit_string>
	
	typederror = SD_init(SPI0);
 1b8:	8c e4       	ldi	r24, 0x4C	; 76
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 ca 01 	call	0x394	; 0x394 <SD_init>
	if (typederror != 0)
 1c0:	88 23       	and	r24, r24
 1c2:	31 f0       	breq	.+12     	; 0x1d0 <main+0xa6>
	{
		display_error(UART1, typederror);
 1c4:	68 2f       	mov	r22, r24
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	88 ec       	ldi	r24, 0xC8	; 200
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 0b 03 	call	0x616	; 0x616 <display_error>
	}
	

	UART_transmit_string(UART1, "SD initialized\n", 15);
 1d0:	4f e0       	ldi	r20, 0x0F	; 15
 1d2:	50 e0       	ldi	r21, 0x00	; 0
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	71 e0       	ldi	r23, 0x01	; 1
 1d8:	88 ec       	ldi	r24, 0xC8	; 200
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 67 03 	call	0x6ce	; 0x6ce <UART_transmit_string>
		// to debug SPI_transmit on MSO: Trigger Menu: Type=Edge, Source=D0, Slope=All, Level=1.51, Normal
		//error = SPI_transmit(SPI0, 0xFF, data);
		//GPIO_Output_Clear(PB, (1<<4));
		
		
		error = SPI_transfer(SPI0, 0xFF, &data);
 1e0:	ae 01       	movw	r20, r28
 1e2:	4f 5f       	subi	r20, 0xFF	; 255
 1e4:	5f 4f       	sbci	r21, 0xFF	; 255
 1e6:	6f ef       	ldi	r22, 0xFF	; 255
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	8c e4       	ldi	r24, 0x4C	; 76
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <SPI_transfer>
		//error = send_command(SPI0, CMD0, arg);
		if(error != 0)
 1f2:	81 11       	cpse	r24, r1
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <main+0xd0>
		{
			break;
		}
		//error = SPI_receive(SPI0, &data);
		if(error != 0)
 1f6:	88 23       	and	r24, r24
 1f8:	99 f3       	breq	.-26     	; 0x1e0 <main+0xb6>
		{
			break;
		}
	}
	
	UART_transmit_string(UART1, stop, 5);
 1fa:	45 e0       	ldi	r20, 0x05	; 5
 1fc:	50 e0       	ldi	r21, 0x00	; 0
 1fe:	be 01       	movw	r22, r28
 200:	67 5f       	subi	r22, 0xF7	; 247
 202:	7f 4f       	sbci	r23, 0xFF	; 255
 204:	88 ec       	ldi	r24, 0xC8	; 200
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 67 03 	call	0x6ce	; 0x6ce <UART_transmit_string>
	UART_transmit(UART1, data);
 20c:	69 81       	ldd	r22, Y+1	; 0x01
 20e:	88 ec       	ldi	r24, 0xC8	; 200
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 61 03 	call	0x6c2	; 0x6c2 <UART_transmit>
	UART_transmit(UART1, '\n');
 216:	6a e0       	ldi	r22, 0x0A	; 10
 218:	88 ec       	ldi	r24, 0xC8	; 200
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <UART_transmit>
	return 0;
}
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	2e 96       	adiw	r28, 0x0e	; 14
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	f8 94       	cli
 22a:	de bf       	out	0x3e, r29	; 62
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	cd bf       	out	0x3d, r28	; 61
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	08 95       	ret

00000236 <SD_CS_active>:
void SD_CS_active(volatile uint8_t *port, uint8_t pin);
void SD_CS_inactive(volatile uint8_t *port, uint8_t pin);

void SD_CS_active(volatile uint8_t *port, uint8_t pin)
{
	GPIO_Output_Clear(port,pin);
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	0e 94 8f 00 	call	0x11e	; 0x11e <GPIO_Output_Clear>
 23c:	08 95       	ret

0000023e <SD_CS_inactive>:
}
void SD_CS_inactive(volatile uint8_t *port, uint8_t pin)
{
	GPIO_Output_Set(port,pin);
 23e:	70 e0       	ldi	r23, 0x00	; 0
 240:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_Output_Set>
 244:	08 95       	ret

00000246 <send_command>:
}

uint8_t send_command (volatile SPI_t *SPI_addr, uint8_t command, uint32_t argument)
{
 246:	8f 92       	push	r8
 248:	9f 92       	push	r9
 24a:	af 92       	push	r10
 24c:	bf 92       	push	r11
 24e:	ef 92       	push	r14
 250:	ff 92       	push	r15
 252:	0f 93       	push	r16
 254:	1f 93       	push	r17
 256:	cf 93       	push	r28
 258:	df 93       	push	r29
 25a:	1f 92       	push	r1
 25c:	cd b7       	in	r28, 0x3d	; 61
 25e:	de b7       	in	r29, 0x3e	; 62
	uint8_t errorStatus = 0; // No error by default
    uint8_t checksum = 0x01; // Default checksum value
    uint8_t data; // Placeholder for received SPI data

	//1: check if command is 6 bits (<= 63). If not, error flag & function exits.
	if (command > 63)
 260:	60 34       	cpi	r22, 0x40	; 64
 262:	e0 f5       	brcc	.+120    	; 0x2dc <send_command+0x96>
 264:	49 01       	movw	r8, r18
 266:	5a 01       	movw	r10, r20
 268:	7c 01       	movw	r14, r24
	{
		//change this?
		return ERROR_SPI;
	}
	//2: command OR'd with 0x40 to append start and transmission bits to the first byte to send.
	command |= 0x40;
 26a:	16 2f       	mov	r17, r22
 26c:	10 64       	ori	r17, 0x40	; 64
	//3: Send first byte using SPI_transfer. If error found from transfer, exit.
	errorStatus = SPI_transfer(SPI_addr, command, &data);
 26e:	ae 01       	movw	r20, r28
 270:	4f 5f       	subi	r20, 0xFF	; 255
 272:	5f 4f       	sbci	r21, 0xFF	; 255
 274:	61 2f       	mov	r22, r17
 276:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <SPI_transfer>
	if (errorStatus != 0) return errorStatus;
 27a:	81 11       	cpse	r24, r1
 27c:	30 c0       	rjmp	.+96     	; 0x2de <send_command+0x98>
 27e:	04 e0       	ldi	r16, 0x04	; 4
 280:	1c c0       	rjmp	.+56     	; 0x2ba <send_command+0x74>
	//4: 32-bit arg sent, MSB first. Exit if error occurs.
	for (uint8_t i = 4; i > 0; i--) // Start from the MSB, i starts high
    {
		//this shifts right in multiples of 8. Since we can only send 8 bits, the first one (i=3) is shifted right 24b, sending the 8 MSBs first.
        errorStatus = SPI_transfer(SPI_addr, (argument >> (8 * (i-1))) & 0xFF, &data);
 282:	40 2f       	mov	r20, r16
 284:	50 e0       	ldi	r21, 0x00	; 0
 286:	41 50       	subi	r20, 0x01	; 1
 288:	51 09       	sbc	r21, r1
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	44 0f       	add	r20, r20
 290:	55 1f       	adc	r21, r21
 292:	44 0f       	add	r20, r20
 294:	55 1f       	adc	r21, r21
 296:	c5 01       	movw	r24, r10
 298:	b4 01       	movw	r22, r8
 29a:	04 c0       	rjmp	.+8      	; 0x2a4 <send_command+0x5e>
 29c:	96 95       	lsr	r25
 29e:	87 95       	ror	r24
 2a0:	77 95       	ror	r23
 2a2:	67 95       	ror	r22
 2a4:	4a 95       	dec	r20
 2a6:	d2 f7       	brpl	.-12     	; 0x29c <send_command+0x56>
 2a8:	ae 01       	movw	r20, r28
 2aa:	4f 5f       	subi	r20, 0xFF	; 255
 2ac:	5f 4f       	sbci	r21, 0xFF	; 255
 2ae:	c7 01       	movw	r24, r14
 2b0:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <SPI_transfer>
        if (errorStatus != 0) return errorStatus;
 2b4:	81 11       	cpse	r24, r1
 2b6:	13 c0       	rjmp	.+38     	; 0x2de <send_command+0x98>
	command |= 0x40;
	//3: Send first byte using SPI_transfer. If error found from transfer, exit.
	errorStatus = SPI_transfer(SPI_addr, command, &data);
	if (errorStatus != 0) return errorStatus;
	//4: 32-bit arg sent, MSB first. Exit if error occurs.
	for (uint8_t i = 4; i > 0; i--) // Start from the MSB, i starts high
 2b8:	01 50       	subi	r16, 0x01	; 1
 2ba:	01 11       	cpse	r16, r1
 2bc:	e2 cf       	rjmp	.-60     	; 0x282 <send_command+0x3c>
        if (errorStatus != 0) return errorStatus;
    }
	//5: checksum byte, lsb set to 1. If cmd is 0 or 8, checksum must be sent, otherwise 0x01 can be sent.
	//CMD0: 01 000000  or 0x40 in the first byte. We OR'd 0x40 so it's 01 and then the remaining 6 determines the cmd.
	//CMD8: 01 001000  or 0x48
	if (command == 0x40)
 2be:	10 34       	cpi	r17, 0x40	; 64
 2c0:	11 f0       	breq	.+4      	; 0x2c6 <send_command+0x80>

uint8_t send_command (volatile SPI_t *SPI_addr, uint8_t command, uint32_t argument)
{
	//Maybe we make a separate function call to return an error? seems like error-checking is common and there should be a clean solution.
	uint8_t errorStatus = 0; // No error by default
    uint8_t checksum = 0x01; // Default checksum value
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <send_command+0x82>
	//CMD0: 01 000000  or 0x40 in the first byte. We OR'd 0x40 so it's 01 and then the remaining 6 determines the cmd.
	//CMD8: 01 001000  or 0x48
	if (command == 0x40)
	{
		//CMD 0
		checksum = 0x95;
 2c6:	65 e9       	ldi	r22, 0x95	; 149
	}
	if (command == 0x48)
 2c8:	18 34       	cpi	r17, 0x48	; 72
 2ca:	09 f4       	brne	.+2      	; 0x2ce <send_command+0x88>
	{
		//CMD 8
		checksum = 0x87; //found in notes
 2cc:	67 e8       	ldi	r22, 0x87	; 135
	}

	// data is overwritten here, does that matter?
	errorStatus = SPI_transfer(SPI_addr, checksum, &data);
 2ce:	ae 01       	movw	r20, r28
 2d0:	4f 5f       	subi	r20, 0xFF	; 255
 2d2:	5f 4f       	sbci	r21, 0xFF	; 255
 2d4:	c7 01       	movw	r24, r14
 2d6:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <SPI_transfer>
	
	//6: return error status
	return errorStatus;
 2da:	01 c0       	rjmp	.+2      	; 0x2de <send_command+0x98>

	//1: check if command is 6 bits (<= 63). If not, error flag & function exits.
	if (command > 63)
	{
		//change this?
		return ERROR_SPI;
 2dc:	8e ef       	ldi	r24, 0xFE	; 254
	// data is overwritten here, does that matter?
	errorStatus = SPI_transfer(SPI_addr, checksum, &data);
	
	//6: return error status
	return errorStatus;
}
 2de:	0f 90       	pop	r0
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	1f 91       	pop	r17
 2e6:	0f 91       	pop	r16
 2e8:	ff 90       	pop	r15
 2ea:	ef 90       	pop	r14
 2ec:	bf 90       	pop	r11
 2ee:	af 90       	pop	r10
 2f0:	9f 90       	pop	r9
 2f2:	8f 90       	pop	r8
 2f4:	08 95       	ret

000002f6 <receive_response>:

// !!! The array_name parameter, when used, must be an array of defined size!
uint8_t receive_response (volatile SPI_t *SPI_addr, uint8_t number_of_bytes, uint8_t * array)
{
 2f6:	cf 92       	push	r12
 2f8:	df 92       	push	r13
 2fa:	ef 92       	push	r14
 2fc:	ff 92       	push	r15
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	1f 92       	push	r1
 308:	cd b7       	in	r28, 0x3d	; 61
 30a:	de b7       	in	r29, 0x3e	; 62
 30c:	7c 01       	movw	r14, r24
 30e:	06 2f       	mov	r16, r22
 310:	6a 01       	movw	r12, r20
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
	uint8_t data=0;
 312:	19 82       	std	Y+1, r1	; 0x01

// !!! The array_name parameter, when used, must be an array of defined size!
uint8_t receive_response (volatile SPI_t *SPI_addr, uint8_t number_of_bytes, uint8_t * array)
{
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
 314:	10 e0       	ldi	r17, 0x00	; 0
	//size of response varies, can be 1-5 bytes. Response has short delay, 
	// 1. send 0xFF repeatedly, and keep reading the received value. This is all done using SPI_transfer. 
	//    continue until msb of received byte is 0 or timeout on the loop. If timed out, return error and send 0xFF.
	do
	{
		errorStatus = SPI_transfer(SPI_addr, 0xFF, &data); //SPI receive?
 316:	ae 01       	movw	r20, r28
 318:	4f 5f       	subi	r20, 0xFF	; 255
 31a:	5f 4f       	sbci	r21, 0xFF	; 255
 31c:	6f ef       	ldi	r22, 0xFF	; 255
 31e:	c7 01       	movw	r24, r14
 320:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <SPI_transfer>
		timeout++;
 324:	1f 5f       	subi	r17, 0xFF	; 255
	} while ( (data == 0xFF) && (timeout != 0) ); //data as 0xFF is an error in SPI_transfer
 326:	89 81       	ldd	r24, Y+1	; 0x01
 328:	8f 3f       	cpi	r24, 0xFF	; 255
 32a:	11 f4       	brne	.+4      	; 0x330 <receive_response+0x3a>
 32c:	11 11       	cpse	r17, r1
 32e:	f3 cf       	rjmp	.-26     	; 0x316 <receive_response+0x20>
	// handle timeout errors:
	if (timeout == 0)
 330:	11 23       	and	r17, r17
 332:	29 f1       	breq	.+74     	; 0x37e <receive_response+0x88>
	{
		return ERROR_TIMEOUT;
	}
	else if ( (data & 0xFE)	!= 0x00 ) //0x00 and 0x01 are good values
 334:	98 2f       	mov	r25, r24
 336:	9e 7f       	andi	r25, 0xFE	; 254
 338:	21 f0       	breq	.+8      	; 0x342 <receive_response+0x4c>
	{
		*array = data; //return value to see error
 33a:	f6 01       	movw	r30, r12
 33c:	80 83       	st	Z, r24
		return ERROR_SD;
 33e:	8d ef       	ldi	r24, 0xFD	; 253
 340:	1f c0       	rjmp	.+62     	; 0x380 <receive_response+0x8a>
	}
	else
	{
		//receive the remainder of the bytes, if present.
		// 2. If more than one byte expected, 0xFF sent out and each received byte stored in array. Repeat until all bytes received.
		*array = data;
 342:	f6 01       	movw	r30, r12
 344:	80 83       	st	Z, r24
		if(number_of_bytes>1)
 346:	02 30       	cpi	r16, 0x02	; 2
 348:	78 f4       	brcc	.+30     	; 0x368 <receive_response+0x72>
 34a:	11 c0       	rjmp	.+34     	; 0x36e <receive_response+0x78>
		{
			//start at 1 bc just got index 0, 3 lines above this
			for(uint8_t i = 1; i <= number_of_bytes; i++)
			{
				errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
 34c:	ae 01       	movw	r20, r28
 34e:	4f 5f       	subi	r20, 0xFF	; 255
 350:	5f 4f       	sbci	r21, 0xFF	; 255
 352:	6f ef       	ldi	r22, 0xFF	; 255
 354:	c7 01       	movw	r24, r14
 356:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <SPI_transfer>
				array[i] = data;
 35a:	f6 01       	movw	r30, r12
 35c:	e1 0f       	add	r30, r17
 35e:	f1 1d       	adc	r31, r1
 360:	89 81       	ldd	r24, Y+1	; 0x01
 362:	80 83       	st	Z, r24
		// 2. If more than one byte expected, 0xFF sent out and each received byte stored in array. Repeat until all bytes received.
		*array = data;
		if(number_of_bytes>1)
		{
			//start at 1 bc just got index 0, 3 lines above this
			for(uint8_t i = 1; i <= number_of_bytes; i++)
 364:	1f 5f       	subi	r17, 0xFF	; 255
 366:	01 c0       	rjmp	.+2      	; 0x36a <receive_response+0x74>
 368:	11 e0       	ldi	r17, 0x01	; 1
 36a:	01 17       	cp	r16, r17
 36c:	78 f7       	brcc	.-34     	; 0x34c <receive_response+0x56>
			}
		}
	}
	
	// 3. an additional 0xFF byte should be sent after the entire response. Received value is irrelevant.
	errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
 36e:	ae 01       	movw	r20, r28
 370:	4f 5f       	subi	r20, 0xFF	; 255
 372:	5f 4f       	sbci	r21, 0xFF	; 255
 374:	6f ef       	ldi	r22, 0xFF	; 255
 376:	c7 01       	movw	r24, r14
 378:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <SPI_transfer>
	// 4. return error value
	return errorStatus;
 37c:	01 c0       	rjmp	.+2      	; 0x380 <receive_response+0x8a>
		timeout++;
	} while ( (data == 0xFF) && (timeout != 0) ); //data as 0xFF is an error in SPI_transfer
	// handle timeout errors:
	if (timeout == 0)
	{
		return ERROR_TIMEOUT;
 37e:	8f ef       	ldi	r24, 0xFF	; 255
	
	// 3. an additional 0xFF byte should be sent after the entire response. Received value is irrelevant.
	errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
	// 4. return error value
	return errorStatus;
}
 380:	0f 90       	pop	r0
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	1f 91       	pop	r17
 388:	0f 91       	pop	r16
 38a:	ff 90       	pop	r15
 38c:	ef 90       	pop	r14
 38e:	df 90       	pop	r13
 390:	cf 90       	pop	r12
 392:	08 95       	ret

00000394 <SD_init>:

 uint8_t SD_init(volatile SPI_t *SPI_addr)
 {
 394:	ef 92       	push	r14
 396:	ff 92       	push	r15
 398:	1f 93       	push	r17
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	cd b7       	in	r28, 0x3d	; 61
 3a0:	de b7       	in	r29, 0x3e	; 62
 3a2:	27 97       	sbiw	r28, 0x07	; 7
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	f8 94       	cli
 3a8:	de bf       	out	0x3e, r29	; 62
 3aa:	0f be       	out	0x3f, r0	; 63
 3ac:	cd bf       	out	0x3d, r28	; 61
 3ae:	7c 01       	movw	r14, r24
	    ------ */
	
	 //init spi to master mode (can this be done externally?)
	 
	 uint8_t errorStatus = 0;
	 uint8_t data = 0;
 3b0:	19 82       	std	Y+1, r1	; 0x01
	 uint32_t arg = 0x00000000;
	 uint8_t response_cmd0[1] = {0};
 3b2:	1a 82       	std	Y+2, r1	; 0x02
     uint8_t response_cmd8[5] = {0,0,0,0,0};
 3b4:	fe 01       	movw	r30, r28
 3b6:	33 96       	adiw	r30, 0x03	; 3
 3b8:	85 e0       	ldi	r24, 0x05	; 5
 3ba:	df 01       	movw	r26, r30
 3bc:	1d 92       	st	X+, r1
 3be:	8a 95       	dec	r24
 3c0:	e9 f7       	brne	.-6      	; 0x3bc <SD_init+0x28>
	 uint32_t ACMD41_arg = 0x00000000;
	 
	 //set SS to 1 (inactive) (which is PB4)
	 SD_CS_inactive(PB, (1<<4));
 3c2:	60 e1       	ldi	r22, 0x10	; 16
 3c4:	83 e2       	ldi	r24, 0x23	; 35
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 1f 01 	call	0x23e	; 0x23e <SD_CS_inactive>
	 //send 80 clock-cycles worth of transmits 
	 for(uint8_t i = 0; i < 8; i++)
 3cc:	10 e0       	ldi	r17, 0x00	; 0
 3ce:	08 c0       	rjmp	.+16     	; 0x3e0 <SD_init+0x4c>
	 {
		 errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
 3d0:	ae 01       	movw	r20, r28
 3d2:	4f 5f       	subi	r20, 0xFF	; 255
 3d4:	5f 4f       	sbci	r21, 0xFF	; 255
 3d6:	6f ef       	ldi	r22, 0xFF	; 255
 3d8:	c7 01       	movw	r24, r14
 3da:	0e 94 cd 02 	call	0x59a	; 0x59a <SPI_transmit>
	 uint32_t ACMD41_arg = 0x00000000;
	 
	 //set SS to 1 (inactive) (which is PB4)
	 SD_CS_inactive(PB, (1<<4));
	 //send 80 clock-cycles worth of transmits 
	 for(uint8_t i = 0; i < 8; i++)
 3de:	1f 5f       	subi	r17, 0xFF	; 255
 3e0:	18 30       	cpi	r17, 0x08	; 8
 3e2:	b0 f3       	brcs	.-20     	; 0x3d0 <SD_init+0x3c>
	 {
		 errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
	 }

	 //set SS to 0 (active)
	 SD_CS_active(PB, (1<<4));
 3e4:	60 e1       	ldi	r22, 0x10	; 16
 3e6:	83 e2       	ldi	r24, 0x23	; 35
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 1b 01 	call	0x236	; 0x236 <SD_CS_active>
	 
	 //send CMD0, expecting R1. If not R1, stop here.
	 errorStatus = send_command(SPI_addr, CMD0, arg);
 3ee:	20 e0       	ldi	r18, 0x00	; 0
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	a9 01       	movw	r20, r18
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	c7 01       	movw	r24, r14
 3f8:	0e 94 23 01 	call	0x246	; 0x246 <send_command>
	 if (errorStatus == 0)
 3fc:	81 11       	cpse	r24, r1
 3fe:	07 c0       	rjmp	.+14     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
	 {
		 errorStatus = receive_response(SPI_addr, 1, &response_cmd0);
 400:	ae 01       	movw	r20, r28
 402:	4e 5f       	subi	r20, 0xFE	; 254
 404:	5f 4f       	sbci	r21, 0xFF	; 255
 406:	61 e0       	ldi	r22, 0x01	; 1
 408:	c7 01       	movw	r24, r14
 40a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <receive_response>
	 }
	 if(response_cmd0[0] != 0x01)
 40e:	8a 81       	ldd	r24, Y+2	; 0x02
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	39 f5       	brne	.+78     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
	 {
		 return ERROR_CMD0;
	 }

	 //send CM8, expecting R7. If voltage val != 0x01 or if check byte doesn't match, stop here.
	 errorStatus = send_command(SPI_addr, CMD8, 0x000001AA);
 414:	2a ea       	ldi	r18, 0xAA	; 170
 416:	31 e0       	ldi	r19, 0x01	; 1
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	50 e0       	ldi	r21, 0x00	; 0
 41c:	68 e0       	ldi	r22, 0x08	; 8
 41e:	c7 01       	movw	r24, r14
 420:	0e 94 23 01 	call	0x246	; 0x246 <send_command>
	 if(errorStatus == 0)
 424:	81 11       	cpse	r24, r1
 426:	07 c0       	rjmp	.+14     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
	 {
		//loop at receive all 5 bytes, starting at MSB i think
		errorStatus = receive_response(SPI_addr, 5, &response_cmd8);
 428:	ae 01       	movw	r20, r28
 42a:	4d 5f       	subi	r20, 0xFD	; 253
 42c:	5f 4f       	sbci	r21, 0xFF	; 255
 42e:	65 e0       	ldi	r22, 0x05	; 5
 430:	c7 01       	movw	r24, r14
 432:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <receive_response>
	 }
	 
	 // if response is 0x05 (illegal cmd), flag it for later, bc it can't be high capacity (SDHC).
	 if((response_cmd8[0] < 0x02) && (errorStatus == 0))
 436:	9b 81       	ldd	r25, Y+3	; 0x03
 438:	92 30       	cpi	r25, 0x02	; 2
 43a:	50 f4       	brcc	.+20     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 43c:	81 11       	cpse	r24, r1
 43e:	08 c0       	rjmp	.+16     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
	 {
		if((response_cmd8[3] == 0x01 ) && (response_cmd8[4] == 0xAA))
 440:	8e 81       	ldd	r24, Y+6	; 0x06
 442:	81 30       	cpi	r24, 0x01	; 1
 444:	81 f4       	brne	.+32     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 446:	8f 81       	ldd	r24, Y+7	; 0x07
 448:	8a 3a       	cpi	r24, 0xAA	; 170
 44a:	21 f0       	breq	.+8      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
		{
			ACMD41_arg = 0x40000000; //high voltage 
		}
		else
		{
			return ERROR_VOLTAGE;
 44c:	8c ef       	ldi	r24, 0xFC	; 252
 44e:	0e c0       	rjmp	.+28     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
		}
	 }
	 else if(response_cmd8[0] == 0x05) //old card
 450:	95 30       	cpi	r25, 0x05	; 5
 452:	59 f4       	brne	.+22     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
	 {
		return ERROR_CMD8;
	 }

	 // turn CS high (inactive)?
	 SD_CS_inactive(PB, (1<<4));
 454:	60 e1       	ldi	r22, 0x10	; 16
 456:	83 e2       	ldi	r24, 0x23	; 35
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	0e 94 1f 01 	call	0x23e	; 0x23e <SD_CS_inactive>

	 return 0;
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	05 c0       	rjmp	.+10     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
	 {
		 errorStatus = receive_response(SPI_addr, 1, &response_cmd0);
	 }
	 if(response_cmd0[0] != 0x01)
	 {
		 return ERROR_CMD0;
 462:	8b ef       	ldi	r24, 0xFB	; 251
 464:	03 c0       	rjmp	.+6      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
		{
			ACMD41_arg = 0x40000000; //high voltage 
		}
		else
		{
			return ERROR_VOLTAGE;
 466:	8c ef       	ldi	r24, 0xFC	; 252
 468:	01 c0       	rjmp	.+2      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
		ACMD41_arg = 0x00000000;
		//sd_card_type = ??
	 }
	 else
	 {
		return ERROR_CMD8;
 46a:	8a ef       	ldi	r24, 0xFA	; 250

	 // turn CS high (inactive)?
	 SD_CS_inactive(PB, (1<<4));

	 return 0;
 46c:	27 96       	adiw	r28, 0x07	; 7
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	f8 94       	cli
 472:	de bf       	out	0x3e, r29	; 62
 474:	0f be       	out	0x3f, r0	; 63
 476:	cd bf       	out	0x3d, r28	; 61
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	1f 91       	pop	r17
 47e:	ff 90       	pop	r15
 480:	ef 90       	pop	r14
 482:	08 95       	ret

00000484 <round_up_pwr2>:
    else 
    {
        *data = (SPI_addr->data_reg);
        return 0;
    }
}
 484:	82 30       	cpi	r24, 0x02	; 2
 486:	a8 f0       	brcs	.+42     	; 0x4b2 <round_up_pwr2+0x2e>
 488:	81 38       	cpi	r24, 0x81	; 129
 48a:	a8 f4       	brcc	.+42     	; 0x4b6 <round_up_pwr2+0x32>
 48c:	81 50       	subi	r24, 0x01	; 1
 48e:	98 2f       	mov	r25, r24
 490:	96 95       	lsr	r25
 492:	89 2b       	or	r24, r25
 494:	98 2f       	mov	r25, r24
 496:	96 95       	lsr	r25
 498:	96 95       	lsr	r25
 49a:	89 2b       	or	r24, r25
 49c:	98 2f       	mov	r25, r24
 49e:	92 95       	swap	r25
 4a0:	9f 70       	andi	r25, 0x0F	; 15
 4a2:	89 2b       	or	r24, r25
 4a4:	98 2f       	mov	r25, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	99 27       	eor	r25, r25
 4aa:	99 1f       	adc	r25, r25
 4ac:	89 2b       	or	r24, r25
 4ae:	8f 5f       	subi	r24, 0xFF	; 255
 4b0:	08 95       	ret
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	08 95       	ret
 4b6:	80 e8       	ldi	r24, 0x80	; 128
 4b8:	08 95       	ret

000004ba <get_spi_prescaler_mask>:
 4ba:	0e 94 42 02 	call	0x484	; 0x484 <round_up_pwr2>
 4be:	80 31       	cpi	r24, 0x10	; 16
 4c0:	c1 f0       	breq	.+48     	; 0x4f2 <get_spi_prescaler_mask+0x38>
 4c2:	28 f4       	brcc	.+10     	; 0x4ce <get_spi_prescaler_mask+0x14>
 4c4:	82 30       	cpi	r24, 0x02	; 2
 4c6:	79 f0       	breq	.+30     	; 0x4e6 <get_spi_prescaler_mask+0x2c>
 4c8:	88 30       	cpi	r24, 0x08	; 8
 4ca:	79 f0       	breq	.+30     	; 0x4ea <get_spi_prescaler_mask+0x30>
 4cc:	06 c0       	rjmp	.+12     	; 0x4da <get_spi_prescaler_mask+0x20>
 4ce:	80 34       	cpi	r24, 0x40	; 64
 4d0:	31 f0       	breq	.+12     	; 0x4de <get_spi_prescaler_mask+0x24>
 4d2:	80 38       	cpi	r24, 0x80	; 128
 4d4:	31 f0       	breq	.+12     	; 0x4e2 <get_spi_prescaler_mask+0x28>
 4d6:	80 32       	cpi	r24, 0x20	; 32
 4d8:	51 f0       	breq	.+20     	; 0x4ee <get_spi_prescaler_mask+0x34>
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	08 95       	ret
 4de:	82 e0       	ldi	r24, 0x02	; 2
 4e0:	08 95       	ret
 4e2:	83 e0       	ldi	r24, 0x03	; 3
 4e4:	08 95       	ret
 4e6:	84 e0       	ldi	r24, 0x04	; 4
 4e8:	08 95       	ret
 4ea:	85 e0       	ldi	r24, 0x05	; 5
 4ec:	08 95       	ret
 4ee:	86 e0       	ldi	r24, 0x06	; 6
 4f0:	08 95       	ret
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	08 95       	ret

000004f6 <SPI_master_init>:
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
 4fa:	ec 01       	movw	r28, r24
 4fc:	9a 01       	movw	r18, r20
 4fe:	ab 01       	movw	r20, r22
 500:	88 81       	ld	r24, Y
 502:	83 7f       	andi	r24, 0xF3	; 243
 504:	88 83       	st	Y, r24
 506:	88 81       	ld	r24, Y
 508:	80 64       	ori	r24, 0x40	; 64
 50a:	88 83       	st	Y, r24
 50c:	88 81       	ld	r24, Y
 50e:	80 61       	ori	r24, 0x10	; 16
 510:	88 83       	st	Y, r24
 512:	88 81       	ld	r24, Y
 514:	8f 7d       	andi	r24, 0xDF	; 223
 516:	88 83       	st	Y, r24
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	74 e2       	ldi	r23, 0x24	; 36
 51c:	84 ef       	ldi	r24, 0xF4	; 244
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 94 03 	call	0x728	; 0x728 <__udivmodsi4>
 524:	82 2f       	mov	r24, r18
 526:	0e 94 5d 02 	call	0x4ba	; 0x4ba <get_spi_prescaler_mask>
 52a:	98 81       	ld	r25, Y
 52c:	28 2f       	mov	r18, r24
 52e:	23 70       	andi	r18, 0x03	; 3
 530:	92 2b       	or	r25, r18
 532:	98 83       	st	Y, r25
 534:	99 81       	ldd	r25, Y+1	; 0x01
 536:	86 95       	lsr	r24
 538:	86 95       	lsr	r24
 53a:	89 2b       	or	r24, r25
 53c:	89 83       	std	Y+1, r24	; 0x01
 53e:	cc 34       	cpi	r28, 0x4C	; 76
 540:	d1 05       	cpc	r29, r1
 542:	c9 f4       	brne	.+50     	; 0x576 <SPI_master_init+0x80>
 544:	60 e2       	ldi	r22, 0x20	; 32
 546:	70 e0       	ldi	r23, 0x00	; 0
 548:	83 e2       	ldi	r24, 0x23	; 35
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_Output_Init>
 550:	60 e2       	ldi	r22, 0x20	; 32
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	83 e2       	ldi	r24, 0x23	; 35
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_Output_Set>
 55c:	60 e8       	ldi	r22, 0x80	; 128
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	83 e2       	ldi	r24, 0x23	; 35
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_Output_Init>
 568:	60 e8       	ldi	r22, 0x80	; 128
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	83 e2       	ldi	r24, 0x23	; 35
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 8f 00 	call	0x11e	; 0x11e <GPIO_Output_Clear>
 574:	0f c0       	rjmp	.+30     	; 0x594 <SPI_master_init+0x9e>
 576:	cc 3a       	cpi	r28, 0xAC	; 172
 578:	d1 05       	cpc	r29, r1
 57a:	61 f4       	brne	.+24     	; 0x594 <SPI_master_init+0x9e>
 57c:	8d b1       	in	r24, 0x0d	; 13
 57e:	88 60       	ori	r24, 0x08	; 8
 580:	8d b9       	out	0x0d, r24	; 13
 582:	8a b1       	in	r24, 0x0a	; 10
 584:	80 68       	ori	r24, 0x80	; 128
 586:	8a b9       	out	0x0a, r24	; 10
 588:	8e b1       	in	r24, 0x0e	; 14
 58a:	88 60       	ori	r24, 0x08	; 8
 58c:	8e b9       	out	0x0e, r24	; 14
 58e:	8b b1       	in	r24, 0x0b	; 11
 590:	8f 77       	andi	r24, 0x7F	; 127
 592:	8b b9       	out	0x0b, r24	; 11
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	08 95       	ret

0000059a <SPI_transmit>:
 59a:	fc 01       	movw	r30, r24
 59c:	62 83       	std	Z+2, r22	; 0x02
 59e:	20 e0       	ldi	r18, 0x00	; 0
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	91 81       	ldd	r25, Z+1	; 0x01
 5a4:	2f 5f       	subi	r18, 0xFF	; 255
 5a6:	3f 4f       	sbci	r19, 0xFF	; 255
 5a8:	99 23       	and	r25, r25
 5aa:	1c f0       	brlt	.+6      	; 0x5b2 <SPI_transmit+0x18>
 5ac:	21 15       	cp	r18, r1
 5ae:	31 05       	cpc	r19, r1
 5b0:	c1 f7       	brne	.-16     	; 0x5a2 <SPI_transmit+0x8>
 5b2:	23 2b       	or	r18, r19
 5b4:	21 f4       	brne	.+8      	; 0x5be <SPI_transmit+0x24>
 5b6:	8f ef       	ldi	r24, 0xFF	; 255
 5b8:	fa 01       	movw	r30, r20
 5ba:	80 83       	st	Z, r24
 5bc:	08 95       	ret
 5be:	89 2f       	mov	r24, r25
 5c0:	80 74       	andi	r24, 0x40	; 64
 5c2:	96 ff       	sbrs	r25, 6
 5c4:	05 c0       	rjmp	.+10     	; 0x5d0 <SPI_transmit+0x36>
 5c6:	82 81       	ldd	r24, Z+2	; 0x02
 5c8:	fa 01       	movw	r30, r20
 5ca:	80 83       	st	Z, r24
 5cc:	8e ef       	ldi	r24, 0xFE	; 254
 5ce:	08 95       	ret
 5d0:	92 81       	ldd	r25, Z+2	; 0x02
 5d2:	fa 01       	movw	r30, r20
 5d4:	90 83       	st	Z, r25
 5d6:	08 95       	ret

000005d8 <SPI_transfer>:
uint8_t SPI_transfer(volatile SPI_t *SPI_addr, uint8_t send_value, uint8_t *data)
{
 5d8:	fc 01       	movw	r30, r24

    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
    // write data to spider
    SPI_addr->data_reg = send_value;
 5da:	62 83       	std	Z+2, r22	; 0x02
uint8_t SPI_transfer(volatile SPI_t *SPI_addr, uint8_t send_value, uint8_t *data)
{

    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
 5dc:	20 e0       	ldi	r18, 0x00	; 0
 5de:	30 e0       	ldi	r19, 0x00	; 0
    // write data to spider
    SPI_addr->data_reg = send_value;
    //wait for spif (bit 7) to be 0, this means SPDR can be written again
    do
    {
        status = (SPI_addr->status_reg);
 5e0:	91 81       	ldd	r25, Z+1	; 0x01
        timeout++;
 5e2:	2f 5f       	subi	r18, 0xFF	; 255
 5e4:	3f 4f       	sbci	r19, 0xFF	; 255
    } while (((status&0x80) == 0) && timeout != 0 );
 5e6:	99 23       	and	r25, r25
 5e8:	1c f0       	brlt	.+6      	; 0x5f0 <SPI_transfer+0x18>
 5ea:	21 15       	cp	r18, r1
 5ec:	31 05       	cpc	r19, r1
 5ee:	c1 f7       	brne	.-16     	; 0x5e0 <SPI_transfer+0x8>

    if(timeout == 0)
 5f0:	23 2b       	or	r18, r19
 5f2:	21 f4       	brne	.+8      	; 0x5fc <SPI_transfer+0x24>
    {
        *data = 0xFF;
 5f4:	8f ef       	ldi	r24, 0xFF	; 255
 5f6:	fa 01       	movw	r30, r20
 5f8:	80 83       	st	Z, r24
        return ERROR_TIMEOUT;
 5fa:	08 95       	ret
    }
    else if ((status&0x40)!=0)
 5fc:	89 2f       	mov	r24, r25
 5fe:	80 74       	andi	r24, 0x40	; 64
 600:	96 ff       	sbrs	r25, 6
 602:	05 c0       	rjmp	.+10     	; 0x60e <SPI_transfer+0x36>
    {
        *data = (SPI_addr->data_reg);
 604:	82 81       	ldd	r24, Z+2	; 0x02
 606:	fa 01       	movw	r30, r20
 608:	80 83       	st	Z, r24
        return ERROR_SPI;
 60a:	8e ef       	ldi	r24, 0xFE	; 254
 60c:	08 95       	ret
    }
    else 
    {
        *data = (SPI_addr->data_reg);
 60e:	92 81       	ldd	r25, Z+2	; 0x02
 610:	fa 01       	movw	r30, r20
 612:	90 83       	st	Z, r25
        return 0;
    }
}
 614:	08 95       	ret

00000616 <display_error>:

void display_error(volatile UART_t * UART_addr, enum ErrorTypes error)
{
	switch(error)
 616:	6c 3f       	cpi	r22, 0xFC	; 252
 618:	21 f1       	breq	.+72     	; 0x662 <display_error+0x4c>
 61a:	28 f4       	brcc	.+10     	; 0x626 <display_error+0x10>
 61c:	6a 3f       	cpi	r22, 0xFA	; 250
 61e:	99 f1       	breq	.+102    	; 0x686 <display_error+0x70>
 620:	6b 3f       	cpi	r22, 0xFB	; 251
 622:	41 f1       	breq	.+80     	; 0x674 <display_error+0x5e>
 624:	39 c0       	rjmp	.+114    	; 0x698 <display_error+0x82>
 626:	6e 3f       	cpi	r22, 0xFE	; 254
 628:	51 f0       	breq	.+20     	; 0x63e <display_error+0x28>
 62a:	90 f0       	brcs	.+36     	; 0x650 <display_error+0x3a>
	{
		case ERROR_TIMEOUT:
			UART_transmit_string(UART1, "timeout\n", 8);
 62c:	48 e0       	ldi	r20, 0x08	; 8
 62e:	50 e0       	ldi	r21, 0x00	; 0
 630:	6d e1       	ldi	r22, 0x1D	; 29
 632:	71 e0       	ldi	r23, 0x01	; 1
 634:	88 ec       	ldi	r24, 0xC8	; 200
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	0e 94 67 03 	call	0x6ce	; 0x6ce <UART_transmit_string>
			break;
 63c:	08 95       	ret
		case ERROR_SPI:
			UART_transmit_string(UART1, "SPI\n", 4);
 63e:	44 e0       	ldi	r20, 0x04	; 4
 640:	50 e0       	ldi	r21, 0x00	; 0
 642:	66 e2       	ldi	r22, 0x26	; 38
 644:	71 e0       	ldi	r23, 0x01	; 1
 646:	88 ec       	ldi	r24, 0xC8	; 200
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 67 03 	call	0x6ce	; 0x6ce <UART_transmit_string>
			break;
 64e:	08 95       	ret
		case ERROR_SD:
			UART_transmit_string(UART1, "SD\n", 3);
 650:	43 e0       	ldi	r20, 0x03	; 3
 652:	50 e0       	ldi	r21, 0x00	; 0
 654:	6b e2       	ldi	r22, 0x2B	; 43
 656:	71 e0       	ldi	r23, 0x01	; 1
 658:	88 ec       	ldi	r24, 0xC8	; 200
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	0e 94 67 03 	call	0x6ce	; 0x6ce <UART_transmit_string>
			break;
 660:	08 95       	ret
		case ERROR_VOLTAGE:
			UART_transmit_string(UART1, "VOLTAGE!!!!\n", 12);
 662:	4c e0       	ldi	r20, 0x0C	; 12
 664:	50 e0       	ldi	r21, 0x00	; 0
 666:	6f e2       	ldi	r22, 0x2F	; 47
 668:	71 e0       	ldi	r23, 0x01	; 1
 66a:	88 ec       	ldi	r24, 0xC8	; 200
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	0e 94 67 03 	call	0x6ce	; 0x6ce <UART_transmit_string>
			break;
 672:	08 95       	ret
		case ERROR_CMD0:
			UART_transmit_string(UART1, "CMD0\n", 5);
 674:	45 e0       	ldi	r20, 0x05	; 5
 676:	50 e0       	ldi	r21, 0x00	; 0
 678:	6c e3       	ldi	r22, 0x3C	; 60
 67a:	71 e0       	ldi	r23, 0x01	; 1
 67c:	88 ec       	ldi	r24, 0xC8	; 200
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	0e 94 67 03 	call	0x6ce	; 0x6ce <UART_transmit_string>
			break;
 684:	08 95       	ret
		case ERROR_CMD8:
			UART_transmit_string(UART1, "CMD8\n", 5);
 686:	45 e0       	ldi	r20, 0x05	; 5
 688:	50 e0       	ldi	r21, 0x00	; 0
 68a:	62 e4       	ldi	r22, 0x42	; 66
 68c:	71 e0       	ldi	r23, 0x01	; 1
 68e:	88 ec       	ldi	r24, 0xC8	; 200
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	0e 94 67 03 	call	0x6ce	; 0x6ce <UART_transmit_string>
			break;
 696:	08 95       	ret
		default:
			UART_transmit_string(UART1, "impossible\n", 11);
 698:	4b e0       	ldi	r20, 0x0B	; 11
 69a:	50 e0       	ldi	r21, 0x00	; 0
 69c:	68 e4       	ldi	r22, 0x48	; 72
 69e:	71 e0       	ldi	r23, 0x01	; 1
 6a0:	88 ec       	ldi	r24, 0xC8	; 200
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	0e 94 67 03 	call	0x6ce	; 0x6ce <UART_transmit_string>
 6a8:	08 95       	ret

000006aa <UART_init>:
    return (uint32_t)((((F_CPU/OSC_DIV)+(4UL*(2-UtwoX)*baud_rate))/(8UL*(2-UtwoX)*baud_rate))-1);
}
*/

void UART_init(volatile UART_t *UART_addr, uint16_t baud_rate)
{
 6aa:	fc 01       	movw	r30, r24
    //uint16_t UBRR_value = Calc_Baudrate(baud_rate, U2X_Val); //Where do we get U2X
    //uint16_t UBRR_value = (uint32_t)((((F_CPU / OSC_DIV) + (4UL * (2 - U2X_Val) * baud_rate)) / (8UL * (2 - U2X_Val) * baud_rate)) - 1);
    
    uint16_t UBRR_value = 103;

    UART_addr->UART_UBRRH = UBRR_value / 256;
 6ac:	15 82       	std	Z+5, r1	; 0x05
	UART_addr->UART_UBRRL = UBRR_value % 256; 
 6ae:	87 e6       	ldi	r24, 0x67	; 103
 6b0:	84 83       	std	Z+4, r24	; 0x04
    UART_addr->UART_UCSRA = (U2X_Val<<U2X); //set u2x here. currently off (0)
 6b2:	10 82       	st	Z, r1
// Determine the value for UCSRC using the settings for number of bits,
// parity and number of stop bits and write this value. In my solution, I
// defined constants for these settings to make the code more readable. You
// could also make sure your comments explain the value written to the
// register.
    UART_addr->UART_UCSRC = 0x00; // cleared 
 6b4:	12 82       	std	Z+2, r1	; 0x02
	UART_addr->UART_UCSRC = (async_mode_1 | async_mode_2 | no_parity_1 | no_parity_2 | one_stop_bit | eight_bit_data);
 6b6:	86 e0       	ldi	r24, 0x06	; 6
 6b8:	82 83       	std	Z+2, r24	; 0x02

// Enable the transmitter and receiver with interrupts disabled by writing the
// appropriate value to UCSRB 
	UART_addr->UART_UCSRB = 0x00; //cleared
 6ba:	11 82       	std	Z+1, r1	; 0x01
    UART_addr->UART_UCSRB = (RXCIE_dis | TXCIE_dis | UDRIE_dis | RXEN_en | TXEN_en);
 6bc:	88 e1       	ldi	r24, 0x18	; 24
 6be:	81 83       	std	Z+1, r24	; 0x01
 6c0:	08 95       	ret

000006c2 <UART_transmit>:
    return; 
}

void UART_transmit(volatile UART_t *UART_addr, uint8_t data)
{
 6c2:	fc 01       	movw	r30, r24
	
	uint8_t status = 0 ;
	do 
	{
		status = (uint8_t)(UART_addr->UART_UCSRA & (1<<UDRE)); 
 6c4:	90 81       	ld	r25, Z
		
	} while (status != (1<<UDRE));
 6c6:	95 ff       	sbrs	r25, 5
 6c8:	fd cf       	rjmp	.-6      	; 0x6c4 <UART_transmit+0x2>
	
    //2: write val to UDR
    UART_addr->UART_UDR = data;
 6ca:	66 83       	std	Z+6, r22	; 0x06
 6cc:	08 95       	ret

000006ce <UART_transmit_string>:
	}
	return index;
}

void UART_transmit_string(volatile UART_t * UART_addr, char string_name[], uint8_t num_bytes)
{
 6ce:	ef 92       	push	r14
 6d0:	ff 92       	push	r15
 6d2:	0f 93       	push	r16
 6d4:	1f 93       	push	r17
 6d6:	cf 93       	push	r28
 6d8:	df 93       	push	r29
 6da:	7c 01       	movw	r14, r24
 6dc:	8b 01       	movw	r16, r22
 6de:	d4 2f       	mov	r29, r20
	char temp8;
	uint8_t index;
	if(num_bytes==0)
 6e0:	41 11       	cpse	r20, r1
 6e2:	18 c0       	rjmp	.+48     	; 0x714 <UART_transmit_string+0x46>
	{
		temp8=string_name[0];
 6e4:	fb 01       	movw	r30, r22
 6e6:	60 81       	ld	r22, Z
                index=0;
 6e8:	c0 e0       	ldi	r28, 0x00	; 0
		while (temp8!=0)
 6ea:	08 c0       	rjmp	.+16     	; 0x6fc <UART_transmit_string+0x2e>
		{
			UART_transmit(UART_addr, temp8);
 6ec:	c7 01       	movw	r24, r14
 6ee:	0e 94 61 03 	call	0x6c2	; 0x6c2 <UART_transmit>
			index++;
 6f2:	cf 5f       	subi	r28, 0xFF	; 255
			temp8=string_name[index];
 6f4:	f8 01       	movw	r30, r16
 6f6:	ec 0f       	add	r30, r28
 6f8:	f1 1d       	adc	r31, r1
 6fa:	60 81       	ld	r22, Z
	uint8_t index;
	if(num_bytes==0)
	{
		temp8=string_name[0];
                index=0;
		while (temp8!=0)
 6fc:	61 11       	cpse	r22, r1
 6fe:	f6 cf       	rjmp	.-20     	; 0x6ec <UART_transmit_string+0x1e>
 700:	0c c0       	rjmp	.+24     	; 0x71a <UART_transmit_string+0x4c>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			UART_transmit(UART_addr, string_name[index]);
 702:	f8 01       	movw	r30, r16
 704:	ec 0f       	add	r30, r28
 706:	f1 1d       	adc	r31, r1
 708:	60 81       	ld	r22, Z
 70a:	c7 01       	movw	r24, r14
 70c:	0e 94 61 03 	call	0x6c2	; 0x6c2 <UART_transmit>
			temp8=string_name[index];
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
 710:	cf 5f       	subi	r28, 0xFF	; 255
 712:	01 c0       	rjmp	.+2      	; 0x716 <UART_transmit_string+0x48>
 714:	c0 e0       	ldi	r28, 0x00	; 0
 716:	cd 17       	cp	r28, r29
 718:	a0 f3       	brcs	.-24     	; 0x702 <UART_transmit_string+0x34>
		{
			UART_transmit(UART_addr, string_name[index]);
		}
	}
}
 71a:	df 91       	pop	r29
 71c:	cf 91       	pop	r28
 71e:	1f 91       	pop	r17
 720:	0f 91       	pop	r16
 722:	ff 90       	pop	r15
 724:	ef 90       	pop	r14
 726:	08 95       	ret

00000728 <__udivmodsi4>:
 728:	a1 e2       	ldi	r26, 0x21	; 33
 72a:	1a 2e       	mov	r1, r26
 72c:	aa 1b       	sub	r26, r26
 72e:	bb 1b       	sub	r27, r27
 730:	fd 01       	movw	r30, r26
 732:	0d c0       	rjmp	.+26     	; 0x74e <__udivmodsi4_ep>

00000734 <__udivmodsi4_loop>:
 734:	aa 1f       	adc	r26, r26
 736:	bb 1f       	adc	r27, r27
 738:	ee 1f       	adc	r30, r30
 73a:	ff 1f       	adc	r31, r31
 73c:	a2 17       	cp	r26, r18
 73e:	b3 07       	cpc	r27, r19
 740:	e4 07       	cpc	r30, r20
 742:	f5 07       	cpc	r31, r21
 744:	20 f0       	brcs	.+8      	; 0x74e <__udivmodsi4_ep>
 746:	a2 1b       	sub	r26, r18
 748:	b3 0b       	sbc	r27, r19
 74a:	e4 0b       	sbc	r30, r20
 74c:	f5 0b       	sbc	r31, r21

0000074e <__udivmodsi4_ep>:
 74e:	66 1f       	adc	r22, r22
 750:	77 1f       	adc	r23, r23
 752:	88 1f       	adc	r24, r24
 754:	99 1f       	adc	r25, r25
 756:	1a 94       	dec	r1
 758:	69 f7       	brne	.-38     	; 0x734 <__udivmodsi4_loop>
 75a:	60 95       	com	r22
 75c:	70 95       	com	r23
 75e:	80 95       	com	r24
 760:	90 95       	com	r25
 762:	9b 01       	movw	r18, r22
 764:	ac 01       	movw	r20, r24
 766:	bd 01       	movw	r22, r26
 768:	cf 01       	movw	r24, r30
 76a:	08 95       	ret

0000076c <_exit>:
 76c:	f8 94       	cli

0000076e <__stop_program>:
 76e:	ff cf       	rjmp	.-2      	; 0x76e <__stop_program>
