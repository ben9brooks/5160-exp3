
Experiment3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  0000074a  000007be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000074a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000812  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000844  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002029  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000fdc  00000000  00000000  000029ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d2b  00000000  00000000  000039c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a8  00000000  00000000  000046f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000086a  00000000  00000000  0000499c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e6d  00000000  00000000  00005206  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  00006073  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	ea e4       	ldi	r30, 0x4A	; 74
  e0:	f7 e0       	ldi	r31, 0x07	; 7
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a4 35       	cpi	r26, 0x54	; 84
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	a4 e5       	ldi	r26, 0x54	; 84
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	a4 35       	cpi	r26, 0x54	; 84
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 95 00 	call	0x12a	; 0x12a <main>
 102:	0c 94 a3 03 	jmp	0x746	; 0x746 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <GPIO_Output_Init>:

//Sets DDRX bit to make port pin an output
void GPIO_Output_Init(volatile GPIO_port_t *port_addr, uint8_t pin_mask)
{
  
  port_addr->DDR_REG |= (pin_mask);
 10a:	fc 01       	movw	r30, r24
 10c:	21 81       	ldd	r18, Z+1	; 0x01
 10e:	62 2b       	or	r22, r18
 110:	61 83       	std	Z+1, r22	; 0x01
 112:	08 95       	ret

00000114 <GPIO_Output_Set>:

// Sets the GPIO output to 1
void GPIO_Output_Set(volatile GPIO_port_t *port_addr, uint8_t pin_mask)
{
  //dereferences port address' port register via struct, sets to 1 with |=
  port_addr->PORT_REG |= (pin_mask);
 114:	fc 01       	movw	r30, r24
 116:	22 81       	ldd	r18, Z+2	; 0x02
 118:	62 2b       	or	r22, r18
 11a:	62 83       	std	Z+2, r22	; 0x02
 11c:	08 95       	ret

0000011e <GPIO_Output_Clear>:
}

// Clears the GPIO output to 0
void GPIO_Output_Clear(volatile GPIO_port_t *port_addr, uint8_t pin_mask)
{
 11e:	fc 01       	movw	r30, r24
  ////dereferences port address' port register via struct, sets to 0 with &= ~()
  port_addr->PORT_REG &= ~(pin_mask);
 120:	92 81       	ldd	r25, Z+2	; 0x02
 122:	60 95       	com	r22
 124:	69 23       	and	r22, r25
 126:	62 83       	std	Z+2, r22	; 0x02
 128:	08 95       	ret

0000012a <main>:
#include "SPI.h"
#include "gpio_output.h"
#include "UART_Print.h"

int main(void)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	2e 97       	sbiw	r28, 0x0e	; 14
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	de bf       	out	0x3e, r29	; 62
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	cd bf       	out	0x3d, r28	; 61
	//exp 2 inits
	UART_init(UART0, BAUD_RATE);
 13e:	60 e8       	ldi	r22, 0x80	; 128
 140:	75 e2       	ldi	r23, 0x25	; 37
 142:	80 ec       	ldi	r24, 0xC0	; 192
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 42 03 	call	0x684	; 0x684 <UART_init>
	UART_init(UART1, BAUD_RATE);
 14a:	60 e8       	ldi	r22, 0x80	; 128
 14c:	75 e2       	ldi	r23, 0x25	; 37
 14e:	88 ec       	ldi	r24, 0xC8	; 200
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 42 03 	call	0x684	; 0x684 <UART_init>
	UART_init(UART2, BAUD_RATE);
 156:	60 e8       	ldi	r22, 0x80	; 128
 158:	75 e2       	ldi	r23, 0x25	; 37
 15a:	80 ed       	ldi	r24, 0xD0	; 208
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 42 03 	call	0x684	; 0x684 <UART_init>

	//exp3 inits
	SPI_master_init(SPI0, 400000U); // 0 is used for SD card, OLED, MP3
 162:	40 e8       	ldi	r20, 0x80	; 128
 164:	5a e1       	ldi	r21, 0x1A	; 26
 166:	66 e0       	ldi	r22, 0x06	; 6
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	8c e4       	ldi	r24, 0x4C	; 76
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <SPI_master_init>
	//SPI_master_init(SPI1, 2500000U);
	uint8_t data = 0x52;
 172:	82 e5       	ldi	r24, 0x52	; 82
 174:	89 83       	std	Y+1, r24	; 0x01
	uint8_t error =  0;
	//uint32_t arg = 0x00000000;
	enum ErrorTypes typederror = 0;
	
	
	char start[] = "Start\n";
 176:	87 e0       	ldi	r24, 0x07	; 7
 178:	e0 e1       	ldi	r30, 0x10	; 16
 17a:	f1 e0       	ldi	r31, 0x01	; 1
 17c:	de 01       	movw	r26, r28
 17e:	12 96       	adiw	r26, 0x02	; 2
 180:	01 90       	ld	r0, Z+
 182:	0d 92       	st	X+, r0
 184:	8a 95       	dec	r24
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0x56>
	char stop[] = "Stop\n";
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	e7 e1       	ldi	r30, 0x17	; 23
 18c:	f1 e0       	ldi	r31, 0x01	; 1
 18e:	de 01       	movw	r26, r28
 190:	19 96       	adiw	r26, 0x09	; 9
 192:	01 90       	ld	r0, Z+
 194:	0d 92       	st	X+, r0
 196:	8a 95       	dec	r24
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x68>
	
	// initialize SS AKA CS
	GPIO_Output_Init(PB, (1<<4));
 19a:	60 e1       	ldi	r22, 0x10	; 16
 19c:	83 e2       	ldi	r24, 0x23	; 35
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_Output_Init>
	
	UART_transmit_string(UART1, start, 6);
 1a4:	46 e0       	ldi	r20, 0x06	; 6
 1a6:	be 01       	movw	r22, r28
 1a8:	6e 5f       	subi	r22, 0xFE	; 254
 1aa:	7f 4f       	sbci	r23, 0xFF	; 255
 1ac:	88 ec       	ldi	r24, 0xC8	; 200
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 54 03 	call	0x6a8	; 0x6a8 <UART_transmit_string>
	
	typederror = SD_init(SPI0);
 1b4:	8c e4       	ldi	r24, 0x4C	; 76
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 c2 01 	call	0x384	; 0x384 <SD_init>
	if (typederror != 0)
 1bc:	88 23       	and	r24, r24
 1be:	29 f0       	breq	.+10     	; 0x1ca <main+0xa0>
	{
		display_error(UART1, typederror);
 1c0:	68 2f       	mov	r22, r24
 1c2:	88 ec       	ldi	r24, 0xC8	; 200
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 ff 02 	call	0x5fe	; 0x5fe <display_error>
	}
	

	UART_transmit_string(UART1, "SD initialized\n", 15);
 1ca:	4f e0       	ldi	r20, 0x0F	; 15
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	71 e0       	ldi	r23, 0x01	; 1
 1d0:	88 ec       	ldi	r24, 0xC8	; 200
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 54 03 	call	0x6a8	; 0x6a8 <UART_transmit_string>
		// to debug SPI_transmit on MSO: Trigger Menu: Type=Edge, Source=D0, Slope=All, Level=1.51, Normal
		//error = SPI_transmit(SPI0, 0xFF, data);
		//GPIO_Output_Clear(PB, (1<<4));
		
		
		error = SPI_transfer(SPI0, 0xFF, &data);
 1d8:	ae 01       	movw	r20, r28
 1da:	4f 5f       	subi	r20, 0xFF	; 255
 1dc:	5f 4f       	sbci	r21, 0xFF	; 255
 1de:	6f ef       	ldi	r22, 0xFF	; 255
 1e0:	8c e4       	ldi	r24, 0x4C	; 76
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <SPI_transfer>
		//error = send_command(SPI0, CMD0, arg);
		if(error != 0)
 1e8:	81 11       	cpse	r24, r1
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <main+0xc6>
		{
			break;
		}
		//error = SPI_receive(SPI0, &data);
		if(error != 0)
 1ec:	88 23       	and	r24, r24
 1ee:	a1 f3       	breq	.-24     	; 0x1d8 <main+0xae>
		{
			break;
		}
	}
	
	UART_transmit_string(UART1, stop, 5);
 1f0:	45 e0       	ldi	r20, 0x05	; 5
 1f2:	be 01       	movw	r22, r28
 1f4:	67 5f       	subi	r22, 0xF7	; 247
 1f6:	7f 4f       	sbci	r23, 0xFF	; 255
 1f8:	88 ec       	ldi	r24, 0xC8	; 200
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 54 03 	call	0x6a8	; 0x6a8 <UART_transmit_string>
	UART_transmit(UART1, data);
 200:	69 81       	ldd	r22, Y+1	; 0x01
 202:	88 ec       	ldi	r24, 0xC8	; 200
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 4e 03 	call	0x69c	; 0x69c <UART_transmit>
	UART_transmit(UART1, '\n');
 20a:	6a e0       	ldi	r22, 0x0A	; 10
 20c:	88 ec       	ldi	r24, 0xC8	; 200
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 4e 03 	call	0x69c	; 0x69c <UART_transmit>
	return 0;
}
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	2e 96       	adiw	r28, 0x0e	; 14
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	f8 94       	cli
 21e:	de bf       	out	0x3e, r29	; 62
 220:	0f be       	out	0x3f, r0	; 63
 222:	cd bf       	out	0x3d, r28	; 61
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <SD_CS_active>:
void SD_CS_active(volatile GPIO_port_t *port, uint8_t pin);
void SD_CS_inactive(volatile GPIO_port_t *port, uint8_t pin);

void SD_CS_active(volatile GPIO_port_t *port, uint8_t pin)
{
	GPIO_Output_Clear(port,pin);
 22a:	0e 94 8f 00 	call	0x11e	; 0x11e <GPIO_Output_Clear>
 22e:	08 95       	ret

00000230 <SD_CS_inactive>:
}
void SD_CS_inactive(volatile GPIO_port_t *port, uint8_t pin)
{
	GPIO_Output_Set(port,pin);
 230:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_Output_Set>
 234:	08 95       	ret

00000236 <send_command>:
}

uint8_t send_command (volatile SPI_t *SPI_addr, uint8_t command, uint32_t argument)
{
 236:	8f 92       	push	r8
 238:	9f 92       	push	r9
 23a:	af 92       	push	r10
 23c:	bf 92       	push	r11
 23e:	ef 92       	push	r14
 240:	ff 92       	push	r15
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	1f 92       	push	r1
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
	uint8_t errorStatus = 0; // No error by default
    uint8_t checksum = 0x01; // Default checksum value
    uint8_t data; // Placeholder for received SPI data

	//1: check if command is 6 bits (<= 63). If not, error flag & function exits.
	if (command > 63)
 250:	60 34       	cpi	r22, 0x40	; 64
 252:	e0 f5       	brcc	.+120    	; 0x2cc <send_command+0x96>
 254:	49 01       	movw	r8, r18
 256:	5a 01       	movw	r10, r20
 258:	7c 01       	movw	r14, r24
	{
		//change this?
		return ERROR_SPI;
	}
	//2: command OR'd with 0x40 to append start and transmission bits to the first byte to send.
	command |= 0x40;
 25a:	16 2f       	mov	r17, r22
 25c:	10 64       	ori	r17, 0x40	; 64
	//3: Send first byte using SPI_transfer. If error found from transfer, exit.
	errorStatus = SPI_transfer(SPI_addr, command, &data);
 25e:	ae 01       	movw	r20, r28
 260:	4f 5f       	subi	r20, 0xFF	; 255
 262:	5f 4f       	sbci	r21, 0xFF	; 255
 264:	61 2f       	mov	r22, r17
 266:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <SPI_transfer>
	if (errorStatus != 0) return errorStatus;
 26a:	81 11       	cpse	r24, r1
 26c:	30 c0       	rjmp	.+96     	; 0x2ce <send_command+0x98>
 26e:	04 e0       	ldi	r16, 0x04	; 4
 270:	1c c0       	rjmp	.+56     	; 0x2aa <send_command+0x74>
	//4: 32-bit arg sent, MSB first. Exit if error occurs.
	for (uint8_t i = 4; i > 0; i--) // Start from the MSB, i starts high
    {
		//this shifts right in multiples of 8. Since we can only send 8 bits, the first one (i=3) is shifted right 24b, sending the 8 MSBs first.
        errorStatus = SPI_transfer(SPI_addr, (argument >> (8 * (i-1))) & 0xFF, &data);
 272:	40 2f       	mov	r20, r16
 274:	50 e0       	ldi	r21, 0x00	; 0
 276:	41 50       	subi	r20, 0x01	; 1
 278:	51 09       	sbc	r21, r1
 27a:	44 0f       	add	r20, r20
 27c:	55 1f       	adc	r21, r21
 27e:	44 0f       	add	r20, r20
 280:	55 1f       	adc	r21, r21
 282:	44 0f       	add	r20, r20
 284:	55 1f       	adc	r21, r21
 286:	c5 01       	movw	r24, r10
 288:	b4 01       	movw	r22, r8
 28a:	04 c0       	rjmp	.+8      	; 0x294 <send_command+0x5e>
 28c:	96 95       	lsr	r25
 28e:	87 95       	ror	r24
 290:	77 95       	ror	r23
 292:	67 95       	ror	r22
 294:	4a 95       	dec	r20
 296:	d2 f7       	brpl	.-12     	; 0x28c <send_command+0x56>
 298:	ae 01       	movw	r20, r28
 29a:	4f 5f       	subi	r20, 0xFF	; 255
 29c:	5f 4f       	sbci	r21, 0xFF	; 255
 29e:	c7 01       	movw	r24, r14
 2a0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <SPI_transfer>
        if (errorStatus != 0) return errorStatus;
 2a4:	81 11       	cpse	r24, r1
 2a6:	13 c0       	rjmp	.+38     	; 0x2ce <send_command+0x98>
	command |= 0x40;
	//3: Send first byte using SPI_transfer. If error found from transfer, exit.
	errorStatus = SPI_transfer(SPI_addr, command, &data);
	if (errorStatus != 0) return errorStatus;
	//4: 32-bit arg sent, MSB first. Exit if error occurs.
	for (uint8_t i = 4; i > 0; i--) // Start from the MSB, i starts high
 2a8:	01 50       	subi	r16, 0x01	; 1
 2aa:	01 11       	cpse	r16, r1
 2ac:	e2 cf       	rjmp	.-60     	; 0x272 <send_command+0x3c>
        if (errorStatus != 0) return errorStatus;
    }
	//5: checksum byte, lsb set to 1. If cmd is 0 or 8, checksum must be sent, otherwise 0x01 can be sent.
	//CMD0: 01 000000  or 0x40 in the first byte. We OR'd 0x40 so it's 01 and then the remaining 6 determines the cmd.
	//CMD8: 01 001000  or 0x48
	if (command == 0x40)
 2ae:	10 34       	cpi	r17, 0x40	; 64
 2b0:	11 f0       	breq	.+4      	; 0x2b6 <send_command+0x80>

uint8_t send_command (volatile SPI_t *SPI_addr, uint8_t command, uint32_t argument)
{
	//Maybe we make a separate function call to return an error? seems like error-checking is common and there should be a clean solution.
	uint8_t errorStatus = 0; // No error by default
    uint8_t checksum = 0x01; // Default checksum value
 2b2:	61 e0       	ldi	r22, 0x01	; 1
 2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <send_command+0x82>
	//CMD0: 01 000000  or 0x40 in the first byte. We OR'd 0x40 so it's 01 and then the remaining 6 determines the cmd.
	//CMD8: 01 001000  or 0x48
	if (command == 0x40)
	{
		//CMD 0
		checksum = 0x95;
 2b6:	65 e9       	ldi	r22, 0x95	; 149
	}
	if (command == 0x48)
 2b8:	18 34       	cpi	r17, 0x48	; 72
 2ba:	09 f4       	brne	.+2      	; 0x2be <send_command+0x88>
	{
		//CMD 8
		checksum = 0x87; //found in notes
 2bc:	67 e8       	ldi	r22, 0x87	; 135
	}

	// data is overwritten here, does that matter?
	errorStatus = SPI_transfer(SPI_addr, checksum, &data);
 2be:	ae 01       	movw	r20, r28
 2c0:	4f 5f       	subi	r20, 0xFF	; 255
 2c2:	5f 4f       	sbci	r21, 0xFF	; 255
 2c4:	c7 01       	movw	r24, r14
 2c6:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <SPI_transfer>
	
	//6: return error status
	return errorStatus;
 2ca:	01 c0       	rjmp	.+2      	; 0x2ce <send_command+0x98>

	//1: check if command is 6 bits (<= 63). If not, error flag & function exits.
	if (command > 63)
	{
		//change this?
		return ERROR_SPI;
 2cc:	8e ef       	ldi	r24, 0xFE	; 254
	// data is overwritten here, does that matter?
	errorStatus = SPI_transfer(SPI_addr, checksum, &data);
	
	//6: return error status
	return errorStatus;
}
 2ce:	0f 90       	pop	r0
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	1f 91       	pop	r17
 2d6:	0f 91       	pop	r16
 2d8:	ff 90       	pop	r15
 2da:	ef 90       	pop	r14
 2dc:	bf 90       	pop	r11
 2de:	af 90       	pop	r10
 2e0:	9f 90       	pop	r9
 2e2:	8f 90       	pop	r8
 2e4:	08 95       	ret

000002e6 <receive_response>:

// !!! The array_name parameter, when used, must be an array of defined size!
uint8_t receive_response (volatile SPI_t *SPI_addr, uint8_t number_of_bytes, uint8_t * array)
{
 2e6:	cf 92       	push	r12
 2e8:	df 92       	push	r13
 2ea:	ef 92       	push	r14
 2ec:	ff 92       	push	r15
 2ee:	0f 93       	push	r16
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	1f 92       	push	r1
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
 2fc:	7c 01       	movw	r14, r24
 2fe:	06 2f       	mov	r16, r22
 300:	6a 01       	movw	r12, r20
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
	uint8_t data=0;
 302:	19 82       	std	Y+1, r1	; 0x01

// !!! The array_name parameter, when used, must be an array of defined size!
uint8_t receive_response (volatile SPI_t *SPI_addr, uint8_t number_of_bytes, uint8_t * array)
{
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
 304:	10 e0       	ldi	r17, 0x00	; 0
	//size of response varies, can be 1-5 bytes. Response has short delay, 
	// 1. send 0xFF repeatedly, and keep reading the received value. This is all done using SPI_transfer. 
	//    continue until msb of received byte is 0 or timeout on the loop. If timed out, return error and send 0xFF.
	do
	{
		errorStatus = SPI_transfer(SPI_addr, 0xFF, &data); //SPI receive?
 306:	ae 01       	movw	r20, r28
 308:	4f 5f       	subi	r20, 0xFF	; 255
 30a:	5f 4f       	sbci	r21, 0xFF	; 255
 30c:	6f ef       	ldi	r22, 0xFF	; 255
 30e:	c7 01       	movw	r24, r14
 310:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <SPI_transfer>
		timeout++;
 314:	1f 5f       	subi	r17, 0xFF	; 255
	} while ( (data == 0xFF) && (timeout != 0) ); //data as 0xFF is an error in SPI_transfer
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	8f 3f       	cpi	r24, 0xFF	; 255
 31a:	11 f4       	brne	.+4      	; 0x320 <receive_response+0x3a>
 31c:	11 11       	cpse	r17, r1
 31e:	f3 cf       	rjmp	.-26     	; 0x306 <receive_response+0x20>
	// handle timeout errors:
	if (timeout == 0)
 320:	11 23       	and	r17, r17
 322:	29 f1       	breq	.+74     	; 0x36e <receive_response+0x88>
	{
		return ERROR_TIMEOUT;
	}
	else if ( (data & 0xFE)	!= 0x00 ) //0x00 and 0x01 are good values
 324:	98 2f       	mov	r25, r24
 326:	9e 7f       	andi	r25, 0xFE	; 254
 328:	21 f0       	breq	.+8      	; 0x332 <receive_response+0x4c>
	{
		*array = data; //return value to see error
 32a:	f6 01       	movw	r30, r12
 32c:	80 83       	st	Z, r24
		return ERROR_SD;
 32e:	8d ef       	ldi	r24, 0xFD	; 253
 330:	1f c0       	rjmp	.+62     	; 0x370 <receive_response+0x8a>
	}
	else
	{
		//receive the remainder of the bytes, if present.
		// 2. If more than one byte expected, 0xFF sent out and each received byte stored in array. Repeat until all bytes received.
		*array = data;
 332:	f6 01       	movw	r30, r12
 334:	80 83       	st	Z, r24
		if(number_of_bytes>1)
 336:	02 30       	cpi	r16, 0x02	; 2
 338:	78 f4       	brcc	.+30     	; 0x358 <receive_response+0x72>
 33a:	11 c0       	rjmp	.+34     	; 0x35e <receive_response+0x78>
		{
			//start at 1 bc just got index 0, 3 lines above this
			for(uint8_t i = 1; i <= number_of_bytes; i++)
			{
				errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
 33c:	ae 01       	movw	r20, r28
 33e:	4f 5f       	subi	r20, 0xFF	; 255
 340:	5f 4f       	sbci	r21, 0xFF	; 255
 342:	6f ef       	ldi	r22, 0xFF	; 255
 344:	c7 01       	movw	r24, r14
 346:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <SPI_transfer>
				array[i] = data;
 34a:	f6 01       	movw	r30, r12
 34c:	e1 0f       	add	r30, r17
 34e:	f1 1d       	adc	r31, r1
 350:	89 81       	ldd	r24, Y+1	; 0x01
 352:	80 83       	st	Z, r24
		// 2. If more than one byte expected, 0xFF sent out and each received byte stored in array. Repeat until all bytes received.
		*array = data;
		if(number_of_bytes>1)
		{
			//start at 1 bc just got index 0, 3 lines above this
			for(uint8_t i = 1; i <= number_of_bytes; i++)
 354:	1f 5f       	subi	r17, 0xFF	; 255
 356:	01 c0       	rjmp	.+2      	; 0x35a <receive_response+0x74>
 358:	11 e0       	ldi	r17, 0x01	; 1
 35a:	01 17       	cp	r16, r17
 35c:	78 f7       	brcc	.-34     	; 0x33c <receive_response+0x56>
			}
		}
	}
	
	// 3. an additional 0xFF byte should be sent after the entire response. Received value is irrelevant.
	errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
 35e:	ae 01       	movw	r20, r28
 360:	4f 5f       	subi	r20, 0xFF	; 255
 362:	5f 4f       	sbci	r21, 0xFF	; 255
 364:	6f ef       	ldi	r22, 0xFF	; 255
 366:	c7 01       	movw	r24, r14
 368:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <SPI_transfer>
	// 4. return error value
	return errorStatus;
 36c:	01 c0       	rjmp	.+2      	; 0x370 <receive_response+0x8a>
		timeout++;
	} while ( (data == 0xFF) && (timeout != 0) ); //data as 0xFF is an error in SPI_transfer
	// handle timeout errors:
	if (timeout == 0)
	{
		return ERROR_TIMEOUT;
 36e:	8f ef       	ldi	r24, 0xFF	; 255
	
	// 3. an additional 0xFF byte should be sent after the entire response. Received value is irrelevant.
	errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
	// 4. return error value
	return errorStatus;
}
 370:	0f 90       	pop	r0
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	1f 91       	pop	r17
 378:	0f 91       	pop	r16
 37a:	ff 90       	pop	r15
 37c:	ef 90       	pop	r14
 37e:	df 90       	pop	r13
 380:	cf 90       	pop	r12
 382:	08 95       	ret

00000384 <SD_init>:

 uint8_t SD_init(volatile SPI_t *SPI_addr)
 {
 384:	ef 92       	push	r14
 386:	ff 92       	push	r15
 388:	1f 93       	push	r17
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	cd b7       	in	r28, 0x3d	; 61
 390:	de b7       	in	r29, 0x3e	; 62
 392:	27 97       	sbiw	r28, 0x07	; 7
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	f8 94       	cli
 398:	de bf       	out	0x3e, r29	; 62
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	cd bf       	out	0x3d, r28	; 61
 39e:	7c 01       	movw	r14, r24
	    ------ */
	
	 //init spi to master mode (can this be done externally?)
	 
	 uint8_t errorStatus = 0;
	 uint8_t data = 0;
 3a0:	19 82       	std	Y+1, r1	; 0x01
	 uint32_t arg = 0x00000000;
	 //uint8_t response_cmd0[1] = {0};
	 uint8_t response_cmd0 = 0;
 3a2:	1a 82       	std	Y+2, r1	; 0x02
     uint8_t response_cmd8[5] = {0,0,0,0,0};
 3a4:	fe 01       	movw	r30, r28
 3a6:	33 96       	adiw	r30, 0x03	; 3
 3a8:	85 e0       	ldi	r24, 0x05	; 5
 3aa:	df 01       	movw	r26, r30
 3ac:	1d 92       	st	X+, r1
 3ae:	8a 95       	dec	r24
 3b0:	e9 f7       	brne	.-6      	; 0x3ac <SD_init+0x28>
	 uint32_t ACMD41_arg = 0x00000000;
	 
	 //set SS to 1 (inactive) (which is PB4)
	 SD_CS_inactive(PB, (1<<4));
 3b2:	60 e1       	ldi	r22, 0x10	; 16
 3b4:	83 e2       	ldi	r24, 0x23	; 35
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	0e 94 18 01 	call	0x230	; 0x230 <SD_CS_inactive>
	 //send 80 clock-cycles worth of transmits 
	 for(uint8_t i = 0; i < 8; i++)
 3bc:	10 e0       	ldi	r17, 0x00	; 0
 3be:	08 c0       	rjmp	.+16     	; 0x3d0 <SD_init+0x4c>
	 {
		 errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
 3c0:	ae 01       	movw	r20, r28
 3c2:	4f 5f       	subi	r20, 0xFF	; 255
 3c4:	5f 4f       	sbci	r21, 0xFF	; 255
 3c6:	6f ef       	ldi	r22, 0xFF	; 255
 3c8:	c7 01       	movw	r24, r14
 3ca:	0e 94 c1 02 	call	0x582	; 0x582 <SPI_transmit>
	 uint32_t ACMD41_arg = 0x00000000;
	 
	 //set SS to 1 (inactive) (which is PB4)
	 SD_CS_inactive(PB, (1<<4));
	 //send 80 clock-cycles worth of transmits 
	 for(uint8_t i = 0; i < 8; i++)
 3ce:	1f 5f       	subi	r17, 0xFF	; 255
 3d0:	18 30       	cpi	r17, 0x08	; 8
 3d2:	b0 f3       	brcs	.-20     	; 0x3c0 <SD_init+0x3c>
	 {
		 errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
	 }

	 //set SS to 0 (active)
	 SD_CS_active(PB, (1<<4));
 3d4:	60 e1       	ldi	r22, 0x10	; 16
 3d6:	83 e2       	ldi	r24, 0x23	; 35
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 15 01 	call	0x22a	; 0x22a <SD_CS_active>
	 
	 //send CMD0, expecting R1. If not R1, stop here.
	 errorStatus = send_command(SPI_addr, CMD0, arg);
 3de:	20 e0       	ldi	r18, 0x00	; 0
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	a9 01       	movw	r20, r18
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	c7 01       	movw	r24, r14
 3e8:	0e 94 1b 01 	call	0x236	; 0x236 <send_command>
	 if (errorStatus == 0)
 3ec:	81 11       	cpse	r24, r1
 3ee:	07 c0       	rjmp	.+14     	; 0x3fe <SD_init+0x7a>
	 {
		 errorStatus = receive_response(SPI_addr, 1, &response_cmd0);
 3f0:	ae 01       	movw	r20, r28
 3f2:	4e 5f       	subi	r20, 0xFE	; 254
 3f4:	5f 4f       	sbci	r21, 0xFF	; 255
 3f6:	61 e0       	ldi	r22, 0x01	; 1
 3f8:	c7 01       	movw	r24, r14
 3fa:	0e 94 73 01 	call	0x2e6	; 0x2e6 <receive_response>
	 }
	 if(response_cmd0 != 0x01)
 3fe:	8a 81       	ldd	r24, Y+2	; 0x02
 400:	81 30       	cpi	r24, 0x01	; 1
 402:	39 f5       	brne	.+78     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
	 {
		 return ERROR_CMD0;
	 }

	 //send CM8, expecting R7. If voltage val != 0x01 or if check byte doesn't match, stop here.
	 errorStatus = send_command(SPI_addr, CMD8, 0x000001AA);
 404:	2a ea       	ldi	r18, 0xAA	; 170
 406:	31 e0       	ldi	r19, 0x01	; 1
 408:	40 e0       	ldi	r20, 0x00	; 0
 40a:	50 e0       	ldi	r21, 0x00	; 0
 40c:	68 e0       	ldi	r22, 0x08	; 8
 40e:	c7 01       	movw	r24, r14
 410:	0e 94 1b 01 	call	0x236	; 0x236 <send_command>
	 if(errorStatus == 0)
 414:	81 11       	cpse	r24, r1
 416:	07 c0       	rjmp	.+14     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
	 {
		//loop at receive all 5 bytes, starting at MSB i think
		errorStatus = receive_response(SPI_addr, 5, &response_cmd8[0]);
 418:	ae 01       	movw	r20, r28
 41a:	4d 5f       	subi	r20, 0xFD	; 253
 41c:	5f 4f       	sbci	r21, 0xFF	; 255
 41e:	65 e0       	ldi	r22, 0x05	; 5
 420:	c7 01       	movw	r24, r14
 422:	0e 94 73 01 	call	0x2e6	; 0x2e6 <receive_response>
	 }
	 
	 // if response is 0x05 (illegal cmd), flag it for later, bc it can't be high capacity (SDHC).
	 if((response_cmd8[0] < 0x02) && (errorStatus == 0))
 426:	9b 81       	ldd	r25, Y+3	; 0x03
 428:	92 30       	cpi	r25, 0x02	; 2
 42a:	50 f4       	brcc	.+20     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 42c:	81 11       	cpse	r24, r1
 42e:	08 c0       	rjmp	.+16     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
	 {
		if((response_cmd8[3] == 0x01 ) && (response_cmd8[4] == 0xAA))
 430:	8e 81       	ldd	r24, Y+6	; 0x06
 432:	81 30       	cpi	r24, 0x01	; 1
 434:	81 f4       	brne	.+32     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 436:	8f 81       	ldd	r24, Y+7	; 0x07
 438:	8a 3a       	cpi	r24, 0xAA	; 170
 43a:	21 f0       	breq	.+8      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
		{
			ACMD41_arg = 0x40000000; //high voltage 
		}
		else
		{
			return ERROR_VOLTAGE;
 43c:	8c ef       	ldi	r24, 0xFC	; 252
 43e:	0e c0       	rjmp	.+28     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
		}
	 }
	 else if(response_cmd8[0] == 0x05) //old card
 440:	95 30       	cpi	r25, 0x05	; 5
 442:	59 f4       	brne	.+22     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
	 {
		return ERROR_CMD8;
	 }

	 // turn CS high (inactive)?
	 SD_CS_inactive(PB, (1<<4));
 444:	60 e1       	ldi	r22, 0x10	; 16
 446:	83 e2       	ldi	r24, 0x23	; 35
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 18 01 	call	0x230	; 0x230 <SD_CS_inactive>

	 return 0;
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	05 c0       	rjmp	.+10     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
	 {
		 errorStatus = receive_response(SPI_addr, 1, &response_cmd0);
	 }
	 if(response_cmd0 != 0x01)
	 {
		 return ERROR_CMD0;
 452:	8b ef       	ldi	r24, 0xFB	; 251
 454:	03 c0       	rjmp	.+6      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
		{
			ACMD41_arg = 0x40000000; //high voltage 
		}
		else
		{
			return ERROR_VOLTAGE;
 456:	8c ef       	ldi	r24, 0xFC	; 252
 458:	01 c0       	rjmp	.+2      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
		ACMD41_arg = 0x00000000;
		//sd_card_type = ??
	 }
	 else
	 {
		return ERROR_CMD8;
 45a:	8a ef       	ldi	r24, 0xFA	; 250

	 // turn CS high (inactive)?
	 SD_CS_inactive(PB, (1<<4));

	 return 0;
 45c:	27 96       	adiw	r28, 0x07	; 7
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	f8 94       	cli
 462:	de bf       	out	0x3e, r29	; 62
 464:	0f be       	out	0x3f, r0	; 63
 466:	cd bf       	out	0x3d, r28	; 61
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	1f 91       	pop	r17
 46e:	ff 90       	pop	r15
 470:	ef 90       	pop	r14
 472:	08 95       	ret

00000474 <round_up_pwr2>:
    else 
    {
        *data = (SPI_addr->data_reg);
        return 0;
    }
}
 474:	82 30       	cpi	r24, 0x02	; 2
 476:	a8 f0       	brcs	.+42     	; 0x4a2 <round_up_pwr2+0x2e>
 478:	81 38       	cpi	r24, 0x81	; 129
 47a:	a8 f4       	brcc	.+42     	; 0x4a6 <round_up_pwr2+0x32>
 47c:	81 50       	subi	r24, 0x01	; 1
 47e:	98 2f       	mov	r25, r24
 480:	96 95       	lsr	r25
 482:	89 2b       	or	r24, r25
 484:	98 2f       	mov	r25, r24
 486:	96 95       	lsr	r25
 488:	96 95       	lsr	r25
 48a:	89 2b       	or	r24, r25
 48c:	98 2f       	mov	r25, r24
 48e:	92 95       	swap	r25
 490:	9f 70       	andi	r25, 0x0F	; 15
 492:	89 2b       	or	r24, r25
 494:	98 2f       	mov	r25, r24
 496:	99 1f       	adc	r25, r25
 498:	99 27       	eor	r25, r25
 49a:	99 1f       	adc	r25, r25
 49c:	89 2b       	or	r24, r25
 49e:	8f 5f       	subi	r24, 0xFF	; 255
 4a0:	08 95       	ret
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	08 95       	ret
 4a6:	80 e8       	ldi	r24, 0x80	; 128
 4a8:	08 95       	ret

000004aa <get_spi_prescaler_mask>:
 4aa:	0e 94 3a 02 	call	0x474	; 0x474 <round_up_pwr2>
 4ae:	80 31       	cpi	r24, 0x10	; 16
 4b0:	c1 f0       	breq	.+48     	; 0x4e2 <get_spi_prescaler_mask+0x38>
 4b2:	28 f4       	brcc	.+10     	; 0x4be <get_spi_prescaler_mask+0x14>
 4b4:	82 30       	cpi	r24, 0x02	; 2
 4b6:	79 f0       	breq	.+30     	; 0x4d6 <get_spi_prescaler_mask+0x2c>
 4b8:	88 30       	cpi	r24, 0x08	; 8
 4ba:	79 f0       	breq	.+30     	; 0x4da <get_spi_prescaler_mask+0x30>
 4bc:	06 c0       	rjmp	.+12     	; 0x4ca <get_spi_prescaler_mask+0x20>
 4be:	80 34       	cpi	r24, 0x40	; 64
 4c0:	31 f0       	breq	.+12     	; 0x4ce <get_spi_prescaler_mask+0x24>
 4c2:	80 38       	cpi	r24, 0x80	; 128
 4c4:	31 f0       	breq	.+12     	; 0x4d2 <get_spi_prescaler_mask+0x28>
 4c6:	80 32       	cpi	r24, 0x20	; 32
 4c8:	51 f0       	breq	.+20     	; 0x4de <get_spi_prescaler_mask+0x34>
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	08 95       	ret
 4ce:	82 e0       	ldi	r24, 0x02	; 2
 4d0:	08 95       	ret
 4d2:	83 e0       	ldi	r24, 0x03	; 3
 4d4:	08 95       	ret
 4d6:	84 e0       	ldi	r24, 0x04	; 4
 4d8:	08 95       	ret
 4da:	85 e0       	ldi	r24, 0x05	; 5
 4dc:	08 95       	ret
 4de:	86 e0       	ldi	r24, 0x06	; 6
 4e0:	08 95       	ret
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	08 95       	ret

000004e6 <SPI_master_init>:
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	ec 01       	movw	r28, r24
 4ec:	9a 01       	movw	r18, r20
 4ee:	ab 01       	movw	r20, r22
 4f0:	88 81       	ld	r24, Y
 4f2:	83 7f       	andi	r24, 0xF3	; 243
 4f4:	88 83       	st	Y, r24
 4f6:	88 81       	ld	r24, Y
 4f8:	80 64       	ori	r24, 0x40	; 64
 4fa:	88 83       	st	Y, r24
 4fc:	88 81       	ld	r24, Y
 4fe:	80 61       	ori	r24, 0x10	; 16
 500:	88 83       	st	Y, r24
 502:	88 81       	ld	r24, Y
 504:	8f 7d       	andi	r24, 0xDF	; 223
 506:	88 83       	st	Y, r24
 508:	60 e0       	ldi	r22, 0x00	; 0
 50a:	74 e2       	ldi	r23, 0x24	; 36
 50c:	84 ef       	ldi	r24, 0xF4	; 244
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 81 03 	call	0x702	; 0x702 <__udivmodsi4>
 514:	82 2f       	mov	r24, r18
 516:	0e 94 55 02 	call	0x4aa	; 0x4aa <get_spi_prescaler_mask>
 51a:	98 81       	ld	r25, Y
 51c:	28 2f       	mov	r18, r24
 51e:	23 70       	andi	r18, 0x03	; 3
 520:	92 2b       	or	r25, r18
 522:	98 83       	st	Y, r25
 524:	99 81       	ldd	r25, Y+1	; 0x01
 526:	86 95       	lsr	r24
 528:	86 95       	lsr	r24
 52a:	89 2b       	or	r24, r25
 52c:	89 83       	std	Y+1, r24	; 0x01
 52e:	cc 34       	cpi	r28, 0x4C	; 76
 530:	d1 05       	cpc	r29, r1
 532:	a9 f4       	brne	.+42     	; 0x55e <SPI_master_init+0x78>
 534:	60 e2       	ldi	r22, 0x20	; 32
 536:	83 e2       	ldi	r24, 0x23	; 35
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_Output_Init>
 53e:	60 e2       	ldi	r22, 0x20	; 32
 540:	83 e2       	ldi	r24, 0x23	; 35
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_Output_Set>
 548:	60 e8       	ldi	r22, 0x80	; 128
 54a:	83 e2       	ldi	r24, 0x23	; 35
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_Output_Init>
 552:	60 e8       	ldi	r22, 0x80	; 128
 554:	83 e2       	ldi	r24, 0x23	; 35
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 8f 00 	call	0x11e	; 0x11e <GPIO_Output_Clear>
 55c:	0f c0       	rjmp	.+30     	; 0x57c <SPI_master_init+0x96>
 55e:	cc 3a       	cpi	r28, 0xAC	; 172
 560:	d1 05       	cpc	r29, r1
 562:	61 f4       	brne	.+24     	; 0x57c <SPI_master_init+0x96>
 564:	8d b1       	in	r24, 0x0d	; 13
 566:	88 60       	ori	r24, 0x08	; 8
 568:	8d b9       	out	0x0d, r24	; 13
 56a:	8a b1       	in	r24, 0x0a	; 10
 56c:	80 68       	ori	r24, 0x80	; 128
 56e:	8a b9       	out	0x0a, r24	; 10
 570:	8e b1       	in	r24, 0x0e	; 14
 572:	88 60       	ori	r24, 0x08	; 8
 574:	8e b9       	out	0x0e, r24	; 14
 576:	8b b1       	in	r24, 0x0b	; 11
 578:	8f 77       	andi	r24, 0x7F	; 127
 57a:	8b b9       	out	0x0b, r24	; 11
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	08 95       	ret

00000582 <SPI_transmit>:
 582:	fc 01       	movw	r30, r24
 584:	62 83       	std	Z+2, r22	; 0x02
 586:	20 e0       	ldi	r18, 0x00	; 0
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	91 81       	ldd	r25, Z+1	; 0x01
 58c:	2f 5f       	subi	r18, 0xFF	; 255
 58e:	3f 4f       	sbci	r19, 0xFF	; 255
 590:	99 23       	and	r25, r25
 592:	1c f0       	brlt	.+6      	; 0x59a <SPI_transmit+0x18>
 594:	21 15       	cp	r18, r1
 596:	31 05       	cpc	r19, r1
 598:	c1 f7       	brne	.-16     	; 0x58a <SPI_transmit+0x8>
 59a:	23 2b       	or	r18, r19
 59c:	21 f4       	brne	.+8      	; 0x5a6 <SPI_transmit+0x24>
 59e:	8f ef       	ldi	r24, 0xFF	; 255
 5a0:	fa 01       	movw	r30, r20
 5a2:	80 83       	st	Z, r24
 5a4:	08 95       	ret
 5a6:	89 2f       	mov	r24, r25
 5a8:	80 74       	andi	r24, 0x40	; 64
 5aa:	96 ff       	sbrs	r25, 6
 5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <SPI_transmit+0x36>
 5ae:	82 81       	ldd	r24, Z+2	; 0x02
 5b0:	fa 01       	movw	r30, r20
 5b2:	80 83       	st	Z, r24
 5b4:	8e ef       	ldi	r24, 0xFE	; 254
 5b6:	08 95       	ret
 5b8:	92 81       	ldd	r25, Z+2	; 0x02
 5ba:	fa 01       	movw	r30, r20
 5bc:	90 83       	st	Z, r25
 5be:	08 95       	ret

000005c0 <SPI_transfer>:
uint8_t SPI_transfer(volatile SPI_t *SPI_addr, uint8_t send_value, uint8_t *data)
{
 5c0:	fc 01       	movw	r30, r24

    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
    // write data to spider
    SPI_addr->data_reg = send_value;
 5c2:	62 83       	std	Z+2, r22	; 0x02
uint8_t SPI_transfer(volatile SPI_t *SPI_addr, uint8_t send_value, uint8_t *data)
{

    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
 5c4:	20 e0       	ldi	r18, 0x00	; 0
 5c6:	30 e0       	ldi	r19, 0x00	; 0
    // write data to spider
    SPI_addr->data_reg = send_value;
    //wait for spif (bit 7) to be 0, this means SPDR can be written again
    do
    {
        status = (SPI_addr->status_reg);
 5c8:	91 81       	ldd	r25, Z+1	; 0x01
        timeout++;
 5ca:	2f 5f       	subi	r18, 0xFF	; 255
 5cc:	3f 4f       	sbci	r19, 0xFF	; 255
    } while (((status&0x80) == 0) && timeout != 0 );
 5ce:	99 23       	and	r25, r25
 5d0:	1c f0       	brlt	.+6      	; 0x5d8 <SPI_transfer+0x18>
 5d2:	21 15       	cp	r18, r1
 5d4:	31 05       	cpc	r19, r1
 5d6:	c1 f7       	brne	.-16     	; 0x5c8 <SPI_transfer+0x8>

    if(timeout == 0)
 5d8:	23 2b       	or	r18, r19
 5da:	21 f4       	brne	.+8      	; 0x5e4 <SPI_transfer+0x24>
    {
        *data = 0xFF;
 5dc:	8f ef       	ldi	r24, 0xFF	; 255
 5de:	fa 01       	movw	r30, r20
 5e0:	80 83       	st	Z, r24
        return ERROR_TIMEOUT;
 5e2:	08 95       	ret
    }
    else if ((status&0x40)!=0)
 5e4:	89 2f       	mov	r24, r25
 5e6:	80 74       	andi	r24, 0x40	; 64
 5e8:	96 ff       	sbrs	r25, 6
 5ea:	05 c0       	rjmp	.+10     	; 0x5f6 <SPI_transfer+0x36>
    {
        *data = (SPI_addr->data_reg);
 5ec:	82 81       	ldd	r24, Z+2	; 0x02
 5ee:	fa 01       	movw	r30, r20
 5f0:	80 83       	st	Z, r24
        return ERROR_SPI;
 5f2:	8e ef       	ldi	r24, 0xFE	; 254
 5f4:	08 95       	ret
    }
    else 
    {
        *data = (SPI_addr->data_reg);
 5f6:	92 81       	ldd	r25, Z+2	; 0x02
 5f8:	fa 01       	movw	r30, r20
 5fa:	90 83       	st	Z, r25
        return 0;
    }
}
 5fc:	08 95       	ret

000005fe <display_error>:

void display_error(volatile UART_t * UART_addr, enum ErrorTypes error)
{
	switch(error)
 5fe:	6c 3f       	cpi	r22, 0xFC	; 252
 600:	09 f1       	breq	.+66     	; 0x644 <display_error+0x46>
 602:	28 f4       	brcc	.+10     	; 0x60e <display_error+0x10>
 604:	6a 3f       	cpi	r22, 0xFA	; 250
 606:	71 f1       	breq	.+92     	; 0x664 <display_error+0x66>
 608:	6b 3f       	cpi	r22, 0xFB	; 251
 60a:	21 f1       	breq	.+72     	; 0x654 <display_error+0x56>
 60c:	33 c0       	rjmp	.+102    	; 0x674 <display_error+0x76>
 60e:	6e 3f       	cpi	r22, 0xFE	; 254
 610:	49 f0       	breq	.+18     	; 0x624 <display_error+0x26>
 612:	80 f0       	brcs	.+32     	; 0x634 <display_error+0x36>
	{
		case ERROR_TIMEOUT:
			UART_transmit_string(UART1, "timeout\n", 8);
 614:	48 e0       	ldi	r20, 0x08	; 8
 616:	6d e1       	ldi	r22, 0x1D	; 29
 618:	71 e0       	ldi	r23, 0x01	; 1
 61a:	88 ec       	ldi	r24, 0xC8	; 200
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <UART_transmit_string>
			break;
 622:	08 95       	ret
		case ERROR_SPI:
			UART_transmit_string(UART1, "SPI\n", 4);
 624:	44 e0       	ldi	r20, 0x04	; 4
 626:	66 e2       	ldi	r22, 0x26	; 38
 628:	71 e0       	ldi	r23, 0x01	; 1
 62a:	88 ec       	ldi	r24, 0xC8	; 200
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <UART_transmit_string>
			break;
 632:	08 95       	ret
		case ERROR_SD:
			UART_transmit_string(UART1, "SD\n", 3);
 634:	43 e0       	ldi	r20, 0x03	; 3
 636:	6b e2       	ldi	r22, 0x2B	; 43
 638:	71 e0       	ldi	r23, 0x01	; 1
 63a:	88 ec       	ldi	r24, 0xC8	; 200
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <UART_transmit_string>
			break;
 642:	08 95       	ret
		case ERROR_VOLTAGE:
			UART_transmit_string(UART1, "VOLTAGE!!!!\n", 12);
 644:	4c e0       	ldi	r20, 0x0C	; 12
 646:	6f e2       	ldi	r22, 0x2F	; 47
 648:	71 e0       	ldi	r23, 0x01	; 1
 64a:	88 ec       	ldi	r24, 0xC8	; 200
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <UART_transmit_string>
			break;
 652:	08 95       	ret
		case ERROR_CMD0:
			UART_transmit_string(UART1, "CMD0\n", 5);
 654:	45 e0       	ldi	r20, 0x05	; 5
 656:	6c e3       	ldi	r22, 0x3C	; 60
 658:	71 e0       	ldi	r23, 0x01	; 1
 65a:	88 ec       	ldi	r24, 0xC8	; 200
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <UART_transmit_string>
			break;
 662:	08 95       	ret
		case ERROR_CMD8:
			UART_transmit_string(UART1, "CMD8\n", 5);
 664:	45 e0       	ldi	r20, 0x05	; 5
 666:	62 e4       	ldi	r22, 0x42	; 66
 668:	71 e0       	ldi	r23, 0x01	; 1
 66a:	88 ec       	ldi	r24, 0xC8	; 200
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <UART_transmit_string>
			break;
 672:	08 95       	ret
		default:
			UART_transmit_string(UART1, "impossible\n", 11);
 674:	4b e0       	ldi	r20, 0x0B	; 11
 676:	68 e4       	ldi	r22, 0x48	; 72
 678:	71 e0       	ldi	r23, 0x01	; 1
 67a:	88 ec       	ldi	r24, 0xC8	; 200
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <UART_transmit_string>
 682:	08 95       	ret

00000684 <UART_init>:
    return (uint32_t)((((F_CPU/OSC_DIV)+(4UL*(2-UtwoX)*baud_rate))/(8UL*(2-UtwoX)*baud_rate))-1);
}
*/

void UART_init(volatile UART_t *UART_addr, uint16_t baud_rate)
{
 684:	fc 01       	movw	r30, r24
    //uint16_t UBRR_value = Calc_Baudrate(baud_rate, U2X_Val); //Where do we get U2X
    //uint16_t UBRR_value = (uint32_t)((((F_CPU / OSC_DIV) + (4UL * (2 - U2X_Val) * baud_rate)) / (8UL * (2 - U2X_Val) * baud_rate)) - 1);
    
    uint16_t UBRR_value = 103;

    UART_addr->UART_UBRRH = UBRR_value / 256;
 686:	15 82       	std	Z+5, r1	; 0x05
	UART_addr->UART_UBRRL = UBRR_value % 256; 
 688:	87 e6       	ldi	r24, 0x67	; 103
 68a:	84 83       	std	Z+4, r24	; 0x04
    UART_addr->UART_UCSRA = (U2X_Val<<U2X); //set u2x here. currently off (0)
 68c:	10 82       	st	Z, r1
// Determine the value for UCSRC using the settings for number of bits,
// parity and number of stop bits and write this value. In my solution, I
// defined constants for these settings to make the code more readable. You
// could also make sure your comments explain the value written to the
// register.
    UART_addr->UART_UCSRC = 0x00; // cleared 
 68e:	12 82       	std	Z+2, r1	; 0x02
	UART_addr->UART_UCSRC = (async_mode_1 | async_mode_2 | no_parity_1 | no_parity_2 | one_stop_bit | eight_bit_data);
 690:	86 e0       	ldi	r24, 0x06	; 6
 692:	82 83       	std	Z+2, r24	; 0x02

// Enable the transmitter and receiver with interrupts disabled by writing the
// appropriate value to UCSRB 
	UART_addr->UART_UCSRB = 0x00; //cleared
 694:	11 82       	std	Z+1, r1	; 0x01
    UART_addr->UART_UCSRB = (RXCIE_dis | TXCIE_dis | UDRIE_dis | RXEN_en | TXEN_en);
 696:	88 e1       	ldi	r24, 0x18	; 24
 698:	81 83       	std	Z+1, r24	; 0x01
 69a:	08 95       	ret

0000069c <UART_transmit>:
    return; 
}

void UART_transmit(volatile UART_t *UART_addr, uint8_t data)
{
 69c:	fc 01       	movw	r30, r24
	
	uint8_t status = 0 ;
	do 
	{
		status = (uint8_t)(UART_addr->UART_UCSRA & (1<<UDRE)); 
 69e:	90 81       	ld	r25, Z
		
	} while (status != (1<<UDRE));
 6a0:	95 ff       	sbrs	r25, 5
 6a2:	fd cf       	rjmp	.-6      	; 0x69e <UART_transmit+0x2>
	
    //2: write val to UDR
    UART_addr->UART_UDR = data;
 6a4:	66 83       	std	Z+6, r22	; 0x06
 6a6:	08 95       	ret

000006a8 <UART_transmit_string>:
	}
	return index;
}

void UART_transmit_string(volatile UART_t * UART_addr, char string_name[], uint8_t num_bytes)
{
 6a8:	ef 92       	push	r14
 6aa:	ff 92       	push	r15
 6ac:	0f 93       	push	r16
 6ae:	1f 93       	push	r17
 6b0:	cf 93       	push	r28
 6b2:	df 93       	push	r29
 6b4:	7c 01       	movw	r14, r24
 6b6:	8b 01       	movw	r16, r22
 6b8:	d4 2f       	mov	r29, r20
	char temp8;
	uint8_t index;
	if(num_bytes==0)
 6ba:	41 11       	cpse	r20, r1
 6bc:	18 c0       	rjmp	.+48     	; 0x6ee <UART_transmit_string+0x46>
	{
		temp8=string_name[0];
 6be:	fb 01       	movw	r30, r22
 6c0:	60 81       	ld	r22, Z
                index=0;
 6c2:	c0 e0       	ldi	r28, 0x00	; 0
		while (temp8!=0)
 6c4:	08 c0       	rjmp	.+16     	; 0x6d6 <UART_transmit_string+0x2e>
		{
			UART_transmit(UART_addr, temp8);
 6c6:	c7 01       	movw	r24, r14
 6c8:	0e 94 4e 03 	call	0x69c	; 0x69c <UART_transmit>
			index++;
 6cc:	cf 5f       	subi	r28, 0xFF	; 255
			temp8=string_name[index];
 6ce:	f8 01       	movw	r30, r16
 6d0:	ec 0f       	add	r30, r28
 6d2:	f1 1d       	adc	r31, r1
 6d4:	60 81       	ld	r22, Z
	uint8_t index;
	if(num_bytes==0)
	{
		temp8=string_name[0];
                index=0;
		while (temp8!=0)
 6d6:	61 11       	cpse	r22, r1
 6d8:	f6 cf       	rjmp	.-20     	; 0x6c6 <UART_transmit_string+0x1e>
 6da:	0c c0       	rjmp	.+24     	; 0x6f4 <UART_transmit_string+0x4c>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			UART_transmit(UART_addr, string_name[index]);
 6dc:	f8 01       	movw	r30, r16
 6de:	ec 0f       	add	r30, r28
 6e0:	f1 1d       	adc	r31, r1
 6e2:	60 81       	ld	r22, Z
 6e4:	c7 01       	movw	r24, r14
 6e6:	0e 94 4e 03 	call	0x69c	; 0x69c <UART_transmit>
			temp8=string_name[index];
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
 6ea:	cf 5f       	subi	r28, 0xFF	; 255
 6ec:	01 c0       	rjmp	.+2      	; 0x6f0 <UART_transmit_string+0x48>
 6ee:	c0 e0       	ldi	r28, 0x00	; 0
 6f0:	cd 17       	cp	r28, r29
 6f2:	a0 f3       	brcs	.-24     	; 0x6dc <UART_transmit_string+0x34>
		{
			UART_transmit(UART_addr, string_name[index]);
		}
	}
}
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	1f 91       	pop	r17
 6fa:	0f 91       	pop	r16
 6fc:	ff 90       	pop	r15
 6fe:	ef 90       	pop	r14
 700:	08 95       	ret

00000702 <__udivmodsi4>:
 702:	a1 e2       	ldi	r26, 0x21	; 33
 704:	1a 2e       	mov	r1, r26
 706:	aa 1b       	sub	r26, r26
 708:	bb 1b       	sub	r27, r27
 70a:	fd 01       	movw	r30, r26
 70c:	0d c0       	rjmp	.+26     	; 0x728 <__udivmodsi4_ep>

0000070e <__udivmodsi4_loop>:
 70e:	aa 1f       	adc	r26, r26
 710:	bb 1f       	adc	r27, r27
 712:	ee 1f       	adc	r30, r30
 714:	ff 1f       	adc	r31, r31
 716:	a2 17       	cp	r26, r18
 718:	b3 07       	cpc	r27, r19
 71a:	e4 07       	cpc	r30, r20
 71c:	f5 07       	cpc	r31, r21
 71e:	20 f0       	brcs	.+8      	; 0x728 <__udivmodsi4_ep>
 720:	a2 1b       	sub	r26, r18
 722:	b3 0b       	sbc	r27, r19
 724:	e4 0b       	sbc	r30, r20
 726:	f5 0b       	sbc	r31, r21

00000728 <__udivmodsi4_ep>:
 728:	66 1f       	adc	r22, r22
 72a:	77 1f       	adc	r23, r23
 72c:	88 1f       	adc	r24, r24
 72e:	99 1f       	adc	r25, r25
 730:	1a 94       	dec	r1
 732:	69 f7       	brne	.-38     	; 0x70e <__udivmodsi4_loop>
 734:	60 95       	com	r22
 736:	70 95       	com	r23
 738:	80 95       	com	r24
 73a:	90 95       	com	r25
 73c:	9b 01       	movw	r18, r22
 73e:	ac 01       	movw	r20, r24
 740:	bd 01       	movw	r22, r26
 742:	cf 01       	movw	r24, r30
 744:	08 95       	ret

00000746 <_exit>:
 746:	f8 94       	cli

00000748 <__stop_program>:
 748:	ff cf       	rjmp	.-2      	; 0x748 <__stop_program>
