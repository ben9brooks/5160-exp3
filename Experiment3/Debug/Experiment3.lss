
Experiment3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000676  000006ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000676  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000728  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e09  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ffb  00000000  00000000  000026a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c28  00000000  00000000  000036a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a4  00000000  00000000  000042cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000080c  00000000  00000000  00004570  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000cdb  00000000  00000000  00004d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00005a57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  58:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  5c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  60:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  64:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  68:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  6c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  70:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  74:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  78:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  7c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  80:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  84:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  88:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  8c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  90:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  94:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  98:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  9c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  a8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  ac:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  b8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  bc:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c0:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  c8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	11 e0       	ldi	r17, 0x01	; 1
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b1 e0       	ldi	r27, 0x01	; 1
  de:	e6 e7       	ldi	r30, 0x76	; 118
  e0:	f6 e0       	ldi	r31, 0x06	; 6
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	ae 30       	cpi	r26, 0x0E	; 14
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	ae e0       	ldi	r26, 0x0E	; 14
  f2:	b1 e0       	ldi	r27, 0x01	; 1
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	ae 30       	cpi	r26, 0x0E	; 14
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 95 00 	call	0x12a	; 0x12a <main>
 102:	0c 94 39 03 	jmp	0x672	; 0x672 <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <GPIO_Output_Init>:

//Sets DDRX bit to make port pin an output
void GPIO_Output_Init(volatile GPIO_port_t *port_addr, uint8_t pin_mask)
{
  
  port_addr->DDR_REG |= (pin_mask);
 10a:	fc 01       	movw	r30, r24
 10c:	21 81       	ldd	r18, Z+1	; 0x01
 10e:	62 2b       	or	r22, r18
 110:	61 83       	std	Z+1, r22	; 0x01
 112:	08 95       	ret

00000114 <GPIO_Output_Set>:

// Sets the GPIO output to 1
void GPIO_Output_Set(volatile GPIO_port_t *port_addr, uint8_t pin_mask)
{
  //dereferences port address' port register via struct, sets to 1 with |=
  port_addr->PORT_REG |= (pin_mask);
 114:	fc 01       	movw	r30, r24
 116:	22 81       	ldd	r18, Z+2	; 0x02
 118:	62 2b       	or	r22, r18
 11a:	62 83       	std	Z+2, r22	; 0x02
 11c:	08 95       	ret

0000011e <GPIO_Output_Clear>:
}

// Clears the GPIO output to 0
void GPIO_Output_Clear(volatile GPIO_port_t *port_addr, uint8_t pin_mask)
{
 11e:	fc 01       	movw	r30, r24
  ////dereferences port address' port register via struct, sets to 0 with &= ~()
  port_addr->PORT_REG &= ~(pin_mask);
 120:	92 81       	ldd	r25, Z+2	; 0x02
 122:	60 95       	com	r22
 124:	69 23       	and	r22, r25
 126:	62 83       	std	Z+2, r22	; 0x02
 128:	08 95       	ret

0000012a <main>:
#include <stdio.h>
#include "SD.h"


int main(void)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	2e 97       	sbiw	r28, 0x0e	; 14
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	de bf       	out	0x3e, r29	; 62
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	cd bf       	out	0x3d, r28	; 61
	//exp 2 inits
	UART_init(UART0, BAUD_RATE);
 13e:	60 e8       	ldi	r22, 0x80	; 128
 140:	75 e2       	ldi	r23, 0x25	; 37
 142:	80 ec       	ldi	r24, 0xC0	; 192
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <UART_init>
	UART_init(UART1, BAUD_RATE);
 14a:	60 e8       	ldi	r22, 0x80	; 128
 14c:	75 e2       	ldi	r23, 0x25	; 37
 14e:	88 ec       	ldi	r24, 0xC8	; 200
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <UART_init>
	UART_init(UART2, BAUD_RATE);
 156:	60 e8       	ldi	r22, 0x80	; 128
 158:	75 e2       	ldi	r23, 0x25	; 37
 15a:	80 ed       	ldi	r24, 0xD0	; 208
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <UART_init>

	//exp3 inits
	SPI_master_init(SPI0, 2500000U); // 0 is used for SD card, OLED, MP3
 162:	40 ea       	ldi	r20, 0xA0	; 160
 164:	55 e2       	ldi	r21, 0x25	; 37
 166:	66 e2       	ldi	r22, 0x26	; 38
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	8c e4       	ldi	r24, 0x4C	; 76
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 67 02 	call	0x4ce	; 0x4ce <SPI_master_init>
	//SPI_master_init(SPI1, 2500000U);
	uint8_t data = 0x52;
 172:	82 e5       	ldi	r24, 0x52	; 82
 174:	89 83       	std	Y+1, r24	; 0x01
	uint8_t error =  0;
	uint32_t arg = 0x00000000;
	
	char start[] = "Start\n";
 176:	87 e0       	ldi	r24, 0x07	; 7
 178:	e0 e0       	ldi	r30, 0x00	; 0
 17a:	f1 e0       	ldi	r31, 0x01	; 1
 17c:	de 01       	movw	r26, r28
 17e:	12 96       	adiw	r26, 0x02	; 2
 180:	01 90       	ld	r0, Z+
 182:	0d 92       	st	X+, r0
 184:	8a 95       	dec	r24
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0x56>
	char stop[] = "Stop\n";
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	e7 e0       	ldi	r30, 0x07	; 7
 18c:	f1 e0       	ldi	r31, 0x01	; 1
 18e:	de 01       	movw	r26, r28
 190:	19 96       	adiw	r26, 0x09	; 9
 192:	01 90       	ld	r0, Z+
 194:	0d 92       	st	X+, r0
 196:	8a 95       	dec	r24
 198:	e1 f7       	brne	.-8      	; 0x192 <main+0x68>
	
	SD_init(SPI0);
 19a:	8c e4       	ldi	r24, 0x4C	; 76
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 b5 01 	call	0x36a	; 0x36a <SD_init>
	

	UART_transmit_string(UART1, start, 6);
 1a2:	46 e0       	ldi	r20, 0x06	; 6
 1a4:	50 e0       	ldi	r21, 0x00	; 0
 1a6:	be 01       	movw	r22, r28
 1a8:	6e 5f       	subi	r22, 0xFE	; 254
 1aa:	7f 4f       	sbci	r23, 0xFF	; 255
 1ac:	88 ec       	ldi	r24, 0xC8	; 200
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <UART_transmit_string>
		// to debug SPI_transmit on MSO: Trigger Menu: Type=Edge, Source=D0, Slope=All, Level=1.51, Normal
		//error = SPI_transmit(SPI0, 0xFF, data);
		//GPIO_Output_Clear(PB, (1<<4));
		
		
		error = SPI_transfer(SPI0, 0xAC, &data);
 1b4:	ae 01       	movw	r20, r28
 1b6:	4f 5f       	subi	r20, 0xFF	; 255
 1b8:	5f 4f       	sbci	r21, 0xFF	; 255
 1ba:	6c ea       	ldi	r22, 0xAC	; 172
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	8c e4       	ldi	r24, 0x4C	; 76
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 b9 02 	call	0x572	; 0x572 <SPI_transfer>
		//error = send_command(SPI0, CMD0, arg);
		if(error != 0)
 1c6:	81 11       	cpse	r24, r1
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <main+0xa4>
		{
			break;
		}
		//error = SPI_receive(SPI0, &data);
		if(error != 0)
 1ca:	88 23       	and	r24, r24
 1cc:	99 f3       	breq	.-26     	; 0x1b4 <main+0x8a>
		{
			break;
		}
	}
	
	UART_transmit_string(UART1, stop, 5);
 1ce:	45 e0       	ldi	r20, 0x05	; 5
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	be 01       	movw	r22, r28
 1d4:	67 5f       	subi	r22, 0xF7	; 247
 1d6:	7f 4f       	sbci	r23, 0xFF	; 255
 1d8:	88 ec       	ldi	r24, 0xC8	; 200
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <UART_transmit_string>
	UART_transmit(UART1, data);
 1e0:	69 81       	ldd	r22, Y+1	; 0x01
 1e2:	88 ec       	ldi	r24, 0xC8	; 200
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <UART_transmit>
	UART_transmit(UART1, '\n');
 1ea:	6a e0       	ldi	r22, 0x0A	; 10
 1ec:	88 ec       	ldi	r24, 0xC8	; 200
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <UART_transmit>
	return 0;
}
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	2e 96       	adiw	r28, 0x0e	; 14
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	f8 94       	cli
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	0f be       	out	0x3f, r0	; 63
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	08 95       	ret

0000020a <send_command>:
{
	GPIO_Output_Set(port,pin);
}

uint8_t send_command (volatile SPI_t *SPI_addr, uint8_t command, uint32_t argument)
{
 20a:	8f 92       	push	r8
 20c:	9f 92       	push	r9
 20e:	af 92       	push	r10
 210:	bf 92       	push	r11
 212:	cf 92       	push	r12
 214:	df 92       	push	r13
 216:	ef 92       	push	r14
 218:	ff 92       	push	r15
 21a:	1f 93       	push	r17
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	1f 92       	push	r1
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
	uint8_t errorStatus = 0; // No error by default
    uint8_t checksum = 0x01; // Default checksum value
    uint8_t data; // Placeholder for received SPI data

	//1: check if command is 6 bits (<= 63). If not, error flag & function exits.
	if (command > 63)
 226:	60 34       	cpi	r22, 0x40	; 64
 228:	08 f0       	brcs	.+2      	; 0x22c <send_command+0x22>
 22a:	41 c0       	rjmp	.+130    	; 0x2ae <send_command+0xa4>
 22c:	49 01       	movw	r8, r18
 22e:	5a 01       	movw	r10, r20
 230:	7c 01       	movw	r14, r24
	{
		//change this?
		return ERROR_SPI;
	}
	//2: command OR'd with 0x40 to append start and transmission bits to the first byte to send.
	command |= 0x40;
 232:	16 2f       	mov	r17, r22
 234:	10 64       	ori	r17, 0x40	; 64
	//3: Send first byte using SPI_transfer. If error found from transfer, exit.
	errorStatus = SPI_transfer(SPI_addr, command, &data);
 236:	ae 01       	movw	r20, r28
 238:	4f 5f       	subi	r20, 0xFF	; 255
 23a:	5f 4f       	sbci	r21, 0xFF	; 255
 23c:	61 2f       	mov	r22, r17
 23e:	0e 94 b9 02 	call	0x572	; 0x572 <SPI_transfer>
	if (errorStatus != 0) return errorStatus;
 242:	81 11       	cpse	r24, r1
 244:	35 c0       	rjmp	.+106    	; 0x2b0 <send_command+0xa6>
 246:	0f 2e       	mov	r0, r31
 248:	f3 e0       	ldi	r31, 0x03	; 3
 24a:	cf 2e       	mov	r12, r31
 24c:	d1 2c       	mov	r13, r1
 24e:	f0 2d       	mov	r31, r0
 250:	1d c0       	rjmp	.+58     	; 0x28c <send_command+0x82>
	//4: 32-bit arg sent, MSB first. Exit if error occurs.
	for (int i = 3; i >= 0; i--) // Start from the MSB, i starts high
    {
		//this shifts right in multiples of 8. Since we can only send 8 bits, the first one (i=3) is shifted right 24b, sending the 8 MSBs first.
        errorStatus = SPI_transfer(SPI_addr, (argument >> (8 * i)) & 0xFF, &data);
 252:	c6 01       	movw	r24, r12
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	88 0f       	add	r24, r24
 25a:	99 1f       	adc	r25, r25
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	a5 01       	movw	r20, r10
 262:	94 01       	movw	r18, r8
 264:	04 c0       	rjmp	.+8      	; 0x26e <send_command+0x64>
 266:	56 95       	lsr	r21
 268:	47 95       	ror	r20
 26a:	37 95       	ror	r19
 26c:	27 95       	ror	r18
 26e:	8a 95       	dec	r24
 270:	d2 f7       	brpl	.-12     	; 0x266 <send_command+0x5c>
 272:	ca 01       	movw	r24, r20
 274:	b9 01       	movw	r22, r18
 276:	ae 01       	movw	r20, r28
 278:	4f 5f       	subi	r20, 0xFF	; 255
 27a:	5f 4f       	sbci	r21, 0xFF	; 255
 27c:	c7 01       	movw	r24, r14
 27e:	0e 94 b9 02 	call	0x572	; 0x572 <SPI_transfer>
        if (errorStatus != 0) return errorStatus;
 282:	81 11       	cpse	r24, r1
 284:	15 c0       	rjmp	.+42     	; 0x2b0 <send_command+0xa6>
	command |= 0x40;
	//3: Send first byte using SPI_transfer. If error found from transfer, exit.
	errorStatus = SPI_transfer(SPI_addr, command, &data);
	if (errorStatus != 0) return errorStatus;
	//4: 32-bit arg sent, MSB first. Exit if error occurs.
	for (int i = 3; i >= 0; i--) // Start from the MSB, i starts high
 286:	31 e0       	ldi	r19, 0x01	; 1
 288:	c3 1a       	sub	r12, r19
 28a:	d1 08       	sbc	r13, r1
 28c:	dd 20       	and	r13, r13
 28e:	0c f7       	brge	.-62     	; 0x252 <send_command+0x48>
        if (errorStatus != 0) return errorStatus;
    }
	//5: checksum byte, lsb set to 1. If cmd is 0 or 8, checksum must be sent, otherwise 0x01 can be sent.
	//CMD0: 01 000000  or 0x40 in the first byte. We OR'd 0x40 so it's 01 and then the remaining 6 determines the cmd.
	//CMD8: 01 001000  or 0x48
	if (command == 0x40)
 290:	10 34       	cpi	r17, 0x40	; 64
 292:	11 f0       	breq	.+4      	; 0x298 <send_command+0x8e>

uint8_t send_command (volatile SPI_t *SPI_addr, uint8_t command, uint32_t argument)
{
	//Maybe we make a separate function call to return an error? seems like error-checking is common and there should be a clean solution.
	uint8_t errorStatus = 0; // No error by default
    uint8_t checksum = 0x01; // Default checksum value
 294:	61 e0       	ldi	r22, 0x01	; 1
 296:	01 c0       	rjmp	.+2      	; 0x29a <send_command+0x90>
	//CMD0: 01 000000  or 0x40 in the first byte. We OR'd 0x40 so it's 01 and then the remaining 6 determines the cmd.
	//CMD8: 01 001000  or 0x48
	if (command == 0x40)
	{
		//CMD 0
		checksum = 0x95;
 298:	65 e9       	ldi	r22, 0x95	; 149
	}
	if (command == 0x48)
 29a:	18 34       	cpi	r17, 0x48	; 72
 29c:	09 f4       	brne	.+2      	; 0x2a0 <send_command+0x96>
	{
		//CMD 8
		checksum = 0x87; //found in notes
 29e:	67 e8       	ldi	r22, 0x87	; 135
	}

	// data is overwritten here, does that matter?
	errorStatus = SPI_transfer(SPI_addr, checksum, &data);
 2a0:	ae 01       	movw	r20, r28
 2a2:	4f 5f       	subi	r20, 0xFF	; 255
 2a4:	5f 4f       	sbci	r21, 0xFF	; 255
 2a6:	c7 01       	movw	r24, r14
 2a8:	0e 94 b9 02 	call	0x572	; 0x572 <SPI_transfer>
	
	//6: return error status
	return errorStatus;
 2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <send_command+0xa6>

	//1: check if command is 6 bits (<= 63). If not, error flag & function exits.
	if (command > 63)
	{
		//change this?
		return ERROR_SPI;
 2ae:	8e ef       	ldi	r24, 0xFE	; 254
	// data is overwritten here, does that matter?
	errorStatus = SPI_transfer(SPI_addr, checksum, &data);
	
	//6: return error status
	return errorStatus;
}
 2b0:	0f 90       	pop	r0
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	1f 91       	pop	r17
 2b8:	ff 90       	pop	r15
 2ba:	ef 90       	pop	r14
 2bc:	df 90       	pop	r13
 2be:	cf 90       	pop	r12
 2c0:	bf 90       	pop	r11
 2c2:	af 90       	pop	r10
 2c4:	9f 90       	pop	r9
 2c6:	8f 90       	pop	r8
 2c8:	08 95       	ret

000002ca <receive_response>:

// !!! The array_name parameter, when used, must be an array of defined size!
uint8_t receive_response (volatile SPI_t *SPI_addr, uint8_t number_of_bytes, uint8_t * array)
{
 2ca:	bf 92       	push	r11
 2cc:	cf 92       	push	r12
 2ce:	df 92       	push	r13
 2d0:	ef 92       	push	r14
 2d2:	ff 92       	push	r15
 2d4:	0f 93       	push	r16
 2d6:	1f 93       	push	r17
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	1f 92       	push	r1
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
 2e2:	7c 01       	movw	r14, r24
 2e4:	b6 2e       	mov	r11, r22
 2e6:	6a 01       	movw	r12, r20
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
 2e8:	10 e0       	ldi	r17, 0x00	; 0
	//size of response varies, can be 1-5 bytes. Response has short delay, 
	// 1. send 0xFF repeatedly, and keep reading the received value. This is all done using SPI_transfer. 
	//    continue until msb of received byte is 0 or timeout on the loop. If timed out, return error and send 0xFF.
	do
	{
		rcvd_val = SPI_transfer(SPI_addr, 0xFF, &data); //SPI receive?
 2ea:	ae 01       	movw	r20, r28
 2ec:	4f 5f       	subi	r20, 0xFF	; 255
 2ee:	5f 4f       	sbci	r21, 0xFF	; 255
 2f0:	6f ef       	ldi	r22, 0xFF	; 255
 2f2:	c7 01       	movw	r24, r14
 2f4:	0e 94 b9 02 	call	0x572	; 0x572 <SPI_transfer>
		timeout++;
 2f8:	1f 5f       	subi	r17, 0xFF	; 255
	} while ( (rcvd_val == 0xFF) && (timeout != 0) );
 2fa:	8f 3f       	cpi	r24, 0xFF	; 255
 2fc:	11 f4       	brne	.+4      	; 0x302 <receive_response+0x38>
 2fe:	11 11       	cpse	r17, r1
 300:	f4 cf       	rjmp	.-24     	; 0x2ea <receive_response+0x20>
	// handle timeout errors:
	if (timeout == 0)
 302:	11 23       	and	r17, r17
 304:	29 f1       	breq	.+74     	; 0x350 <receive_response+0x86>
 306:	08 2f       	mov	r16, r24
 308:	0e 7f       	andi	r16, 0xFE	; 254
	{
		return ERROR_TIMEOUT;
	}
	else if ( (rcvd_val & 0xFE)	!= 0x00 ) //0x00 and 0x01 are good values
 30a:	21 f0       	breq	.+8      	; 0x314 <receive_response+0x4a>
	{
		*array = rcvd_val; //return value to see error
 30c:	f6 01       	movw	r30, r12
 30e:	80 83       	st	Z, r24
		return ERROR_SD;
 310:	0d ef       	ldi	r16, 0xFD	; 253
 312:	1f c0       	rjmp	.+62     	; 0x352 <receive_response+0x88>
	}
	else
	{
		//receive the remainder of the bytes, if present.
		// 2. If more than one byte expected, 0xFF sent out and each received byte stored in array. Repeat until all bytes received.
		*array = rcvd_val;
 314:	f6 01       	movw	r30, r12
 316:	80 83       	st	Z, r24
		if(number_of_bytes>1)
 318:	f1 e0       	ldi	r31, 0x01	; 1
 31a:	fb 15       	cp	r31, r11
 31c:	70 f0       	brcs	.+28     	; 0x33a <receive_response+0x70>
 31e:	10 c0       	rjmp	.+32     	; 0x340 <receive_response+0x76>
		{
			//start at 1 bc just got index 0, 3 lines above this
			for(uint8_t i = 1; i < number_of_bytes; i++)
			{
				rcvd_val = SPI_transfer(SPI_addr, 0xFF, &data);
 320:	ae 01       	movw	r20, r28
 322:	4f 5f       	subi	r20, 0xFF	; 255
 324:	5f 4f       	sbci	r21, 0xFF	; 255
 326:	6f ef       	ldi	r22, 0xFF	; 255
 328:	c7 01       	movw	r24, r14
 32a:	0e 94 b9 02 	call	0x572	; 0x572 <SPI_transfer>
				array[i] = rcvd_val;
 32e:	f6 01       	movw	r30, r12
 330:	e1 0f       	add	r30, r17
 332:	f1 1d       	adc	r31, r1
 334:	80 83       	st	Z, r24
		// 2. If more than one byte expected, 0xFF sent out and each received byte stored in array. Repeat until all bytes received.
		*array = rcvd_val;
		if(number_of_bytes>1)
		{
			//start at 1 bc just got index 0, 3 lines above this
			for(uint8_t i = 1; i < number_of_bytes; i++)
 336:	1f 5f       	subi	r17, 0xFF	; 255
 338:	01 c0       	rjmp	.+2      	; 0x33c <receive_response+0x72>
 33a:	11 e0       	ldi	r17, 0x01	; 1
 33c:	1b 15       	cp	r17, r11
 33e:	80 f3       	brcs	.-32     	; 0x320 <receive_response+0x56>
			}
		}
	}
	
	// 3. an additional 0xFF byte should be sent after the entire response. Received value is irrelevant.
	rcvd_val = SPI_transfer(SPI_addr, 0xFF, &data);
 340:	ae 01       	movw	r20, r28
 342:	4f 5f       	subi	r20, 0xFF	; 255
 344:	5f 4f       	sbci	r21, 0xFF	; 255
 346:	6f ef       	ldi	r22, 0xFF	; 255
 348:	c7 01       	movw	r24, r14
 34a:	0e 94 b9 02 	call	0x572	; 0x572 <SPI_transfer>
	// 4. return error value
	return 0;
 34e:	01 c0       	rjmp	.+2      	; 0x352 <receive_response+0x88>
		timeout++;
	} while ( (rcvd_val == 0xFF) && (timeout != 0) );
	// handle timeout errors:
	if (timeout == 0)
	{
		return ERROR_TIMEOUT;
 350:	0f ef       	ldi	r16, 0xFF	; 255
	
	// 3. an additional 0xFF byte should be sent after the entire response. Received value is irrelevant.
	rcvd_val = SPI_transfer(SPI_addr, 0xFF, &data);
	// 4. return error value
	return 0;
}
 352:	80 2f       	mov	r24, r16
 354:	0f 90       	pop	r0
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	ff 90       	pop	r15
 360:	ef 90       	pop	r14
 362:	df 90       	pop	r13
 364:	cf 90       	pop	r12
 366:	bf 90       	pop	r11
 368:	08 95       	ret

0000036a <SD_init>:

 void SD_init(volatile SPI_t *SPI_addr)
 {
 36a:	ef 92       	push	r14
 36c:	ff 92       	push	r15
 36e:	1f 93       	push	r17
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	cd b7       	in	r28, 0x3d	; 61
 376:	de b7       	in	r29, 0x3e	; 62
 378:	27 97       	sbiw	r28, 0x07	; 7
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	f8 94       	cli
 37e:	de bf       	out	0x3e, r29	; 62
 380:	0f be       	out	0x3f, r0	; 63
 382:	cd bf       	out	0x3d, r28	; 61
 384:	7c 01       	movw	r14, r24
	    ------ */
	
	 //init spi to master mode (can this be done externally?)
	 
	 uint8_t errorStatus = 0;
	 uint8_t data = 0;
 386:	19 82       	std	Y+1, r1	; 0x01
	 uint32_t arg = 0x00000000;
	 uint8_t response_cmd0[1] = {0};
 388:	1a 82       	std	Y+2, r1	; 0x02
     uint8_t response_cmd8[5] = {0,0,0,0,0};
 38a:	fe 01       	movw	r30, r28
 38c:	33 96       	adiw	r30, 0x03	; 3
 38e:	85 e0       	ldi	r24, 0x05	; 5
 390:	df 01       	movw	r26, r30
 392:	1d 92       	st	X+, r1
 394:	8a 95       	dec	r24
 396:	e9 f7       	brne	.-6      	; 0x392 <SD_init+0x28>
	 uint32_t ACMD41_arg = 0x00000000;
	 
	 //set SS to 1 (which is PB4)
	 GPIO_Output_Init(PB, (1<<4));
 398:	60 e1       	ldi	r22, 0x10	; 16
 39a:	70 e0       	ldi	r23, 0x00	; 0
 39c:	83 e2       	ldi	r24, 0x23	; 35
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_Output_Init>
	 GPIO_Output_Set(PB, (1<<4));
 3a4:	60 e1       	ldi	r22, 0x10	; 16
 3a6:	70 e0       	ldi	r23, 0x00	; 0
 3a8:	83 e2       	ldi	r24, 0x23	; 35
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_Output_Set>
	 //send 80 clock-cycles worth of transmits 
	 for(uint8_t i = 0; i < 8; i++)
 3b0:	10 e0       	ldi	r17, 0x00	; 0
 3b2:	08 c0       	rjmp	.+16     	; 0x3c4 <SD_init+0x5a>
	 {
		 errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
 3b4:	ae 01       	movw	r20, r28
 3b6:	4f 5f       	subi	r20, 0xFF	; 255
 3b8:	5f 4f       	sbci	r21, 0xFF	; 255
 3ba:	6f ef       	ldi	r22, 0xFF	; 255
 3bc:	c7 01       	movw	r24, r14
 3be:	0e 94 b9 02 	call	0x572	; 0x572 <SPI_transfer>
	 
	 //set SS to 1 (which is PB4)
	 GPIO_Output_Init(PB, (1<<4));
	 GPIO_Output_Set(PB, (1<<4));
	 //send 80 clock-cycles worth of transmits 
	 for(uint8_t i = 0; i < 8; i++)
 3c2:	1f 5f       	subi	r17, 0xFF	; 255
 3c4:	18 30       	cpi	r17, 0x08	; 8
 3c6:	b0 f3       	brcs	.-20     	; 0x3b4 <SD_init+0x4a>
	 {
		 errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
	 }

	 //set SS to 0
	 GPIO_Output_Clear(PB, (1<<4));
 3c8:	60 e1       	ldi	r22, 0x10	; 16
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	83 e2       	ldi	r24, 0x23	; 35
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 8f 00 	call	0x11e	; 0x11e <GPIO_Output_Clear>
	 
	 //send CMD0, expecting R1. If not R1, stop here.
	 errorStatus = send_command(SPI_addr, CMD0, arg);
 3d4:	20 e0       	ldi	r18, 0x00	; 0
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	a9 01       	movw	r20, r18
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	c7 01       	movw	r24, r14
 3de:	0e 94 05 01 	call	0x20a	; 0x20a <send_command>
	 if (errorStatus == 0)
 3e2:	81 11       	cpse	r24, r1
 3e4:	07 c0       	rjmp	.+14     	; 0x3f4 <SD_init+0x8a>
	 {
		 errorStatus = receive_response(SPI_addr, 1, &response_cmd0);
 3e6:	ae 01       	movw	r20, r28
 3e8:	4e 5f       	subi	r20, 0xFE	; 254
 3ea:	5f 4f       	sbci	r21, 0xFF	; 255
 3ec:	61 e0       	ldi	r22, 0x01	; 1
 3ee:	c7 01       	movw	r24, r14
 3f0:	0e 94 65 01 	call	0x2ca	; 0x2ca <receive_response>
	 }
	 if(response_cmd0[0] != 0x01)
 3f4:	8a 81       	ldd	r24, Y+2	; 0x02
 3f6:	81 30       	cpi	r24, 0x01	; 1
 3f8:	29 f5       	brne	.+74     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
	 {
		 return ERROR_SD;
	 }

	 //send CM8, expecting R7. If voltage val != 0x01 or if check byte doesn't match, stop here.
	 errorStatus = send_command(SPI_addr, CMD8, 0x000001AA);
 3fa:	2a ea       	ldi	r18, 0xAA	; 170
 3fc:	31 e0       	ldi	r19, 0x01	; 1
 3fe:	40 e0       	ldi	r20, 0x00	; 0
 400:	50 e0       	ldi	r21, 0x00	; 0
 402:	68 e0       	ldi	r22, 0x08	; 8
 404:	c7 01       	movw	r24, r14
 406:	0e 94 05 01 	call	0x20a	; 0x20a <send_command>
	 if(errorStatus == 0)
 40a:	81 11       	cpse	r24, r1
 40c:	07 c0       	rjmp	.+14     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
	 {
		errorStatus = receive_response(SPI_addr, 5, &response_cmd8);
 40e:	ae 01       	movw	r20, r28
 410:	4d 5f       	subi	r20, 0xFD	; 253
 412:	5f 4f       	sbci	r21, 0xFF	; 255
 414:	65 e0       	ldi	r22, 0x05	; 5
 416:	c7 01       	movw	r24, r14
 418:	0e 94 65 01 	call	0x2ca	; 0x2ca <receive_response>
	 }
	 
	 // if reponse is 0x05 (illegal cmd), flag it for later, bc it can't be high capacity (SDHC).
	 if((response_cmd8[0] == 0x01) && (errorStatus == 0))
 41c:	9b 81       	ldd	r25, Y+3	; 0x03
 41e:	91 30       	cpi	r25, 0x01	; 1
 420:	49 f4       	brne	.+18     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 422:	81 11       	cpse	r24, r1
 424:	07 c0       	rjmp	.+14     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
	 {
		if((response_cmd8[3] == 0x01 ) && (response_cmd8[4] == 0xAA))
 426:	8e 81       	ldd	r24, Y+6	; 0x06
 428:	81 30       	cpi	r24, 0x01	; 1
 42a:	61 f4       	brne	.+24     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 42c:	8f 81       	ldd	r24, Y+7	; 0x07
 42e:	8a 3a       	cpi	r24, 0xAA	; 170
 430:	49 f4       	brne	.+18     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 432:	02 c0       	rjmp	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
		else
		{
			return ERROR_VOLTAGE;
		}
	 }
	 else if(response_cmd8[0] == 0x05)
 434:	95 30       	cpi	r25, 0x05	; 5
 436:	31 f4       	brne	.+12     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
	 {
		return ERROR_SD;
	 }

	 // turn CS high?
	 GPIO_Output_Set(PB, (1<<4));
 438:	60 e1       	ldi	r22, 0x10	; 16
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	83 e2       	ldi	r24, 0x23	; 35
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_Output_Set>

	 return 0;
 444:	27 96       	adiw	r28, 0x07	; 7
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	f8 94       	cli
 44a:	de bf       	out	0x3e, r29	; 62
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	cd bf       	out	0x3d, r28	; 61
 450:	df 91       	pop	r29
 452:	cf 91       	pop	r28
 454:	1f 91       	pop	r17
 456:	ff 90       	pop	r15
 458:	ef 90       	pop	r14
 45a:	08 95       	ret

0000045c <round_up_pwr2>:
    else 
    {
        *data = (SPI_addr->data_reg);
        return 0;
    }
}
 45c:	82 30       	cpi	r24, 0x02	; 2
 45e:	a8 f0       	brcs	.+42     	; 0x48a <round_up_pwr2+0x2e>
 460:	81 38       	cpi	r24, 0x81	; 129
 462:	a8 f4       	brcc	.+42     	; 0x48e <round_up_pwr2+0x32>
 464:	81 50       	subi	r24, 0x01	; 1
 466:	98 2f       	mov	r25, r24
 468:	96 95       	lsr	r25
 46a:	89 2b       	or	r24, r25
 46c:	98 2f       	mov	r25, r24
 46e:	96 95       	lsr	r25
 470:	96 95       	lsr	r25
 472:	89 2b       	or	r24, r25
 474:	98 2f       	mov	r25, r24
 476:	92 95       	swap	r25
 478:	9f 70       	andi	r25, 0x0F	; 15
 47a:	89 2b       	or	r24, r25
 47c:	98 2f       	mov	r25, r24
 47e:	99 1f       	adc	r25, r25
 480:	99 27       	eor	r25, r25
 482:	99 1f       	adc	r25, r25
 484:	89 2b       	or	r24, r25
 486:	8f 5f       	subi	r24, 0xFF	; 255
 488:	08 95       	ret
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	08 95       	ret
 48e:	80 e8       	ldi	r24, 0x80	; 128
 490:	08 95       	ret

00000492 <get_spi_prescaler_mask>:
 492:	0e 94 2e 02 	call	0x45c	; 0x45c <round_up_pwr2>
 496:	80 31       	cpi	r24, 0x10	; 16
 498:	c1 f0       	breq	.+48     	; 0x4ca <get_spi_prescaler_mask+0x38>
 49a:	28 f4       	brcc	.+10     	; 0x4a6 <get_spi_prescaler_mask+0x14>
 49c:	82 30       	cpi	r24, 0x02	; 2
 49e:	79 f0       	breq	.+30     	; 0x4be <get_spi_prescaler_mask+0x2c>
 4a0:	88 30       	cpi	r24, 0x08	; 8
 4a2:	79 f0       	breq	.+30     	; 0x4c2 <get_spi_prescaler_mask+0x30>
 4a4:	06 c0       	rjmp	.+12     	; 0x4b2 <get_spi_prescaler_mask+0x20>
 4a6:	80 34       	cpi	r24, 0x40	; 64
 4a8:	31 f0       	breq	.+12     	; 0x4b6 <get_spi_prescaler_mask+0x24>
 4aa:	80 38       	cpi	r24, 0x80	; 128
 4ac:	31 f0       	breq	.+12     	; 0x4ba <get_spi_prescaler_mask+0x28>
 4ae:	80 32       	cpi	r24, 0x20	; 32
 4b0:	51 f0       	breq	.+20     	; 0x4c6 <get_spi_prescaler_mask+0x34>
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	08 95       	ret
 4b6:	82 e0       	ldi	r24, 0x02	; 2
 4b8:	08 95       	ret
 4ba:	83 e0       	ldi	r24, 0x03	; 3
 4bc:	08 95       	ret
 4be:	84 e0       	ldi	r24, 0x04	; 4
 4c0:	08 95       	ret
 4c2:	85 e0       	ldi	r24, 0x05	; 5
 4c4:	08 95       	ret
 4c6:	86 e0       	ldi	r24, 0x06	; 6
 4c8:	08 95       	ret
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	08 95       	ret

000004ce <SPI_master_init>:
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
 4d2:	ec 01       	movw	r28, r24
 4d4:	9a 01       	movw	r18, r20
 4d6:	ab 01       	movw	r20, r22
 4d8:	88 81       	ld	r24, Y
 4da:	83 7f       	andi	r24, 0xF3	; 243
 4dc:	88 83       	st	Y, r24
 4de:	88 81       	ld	r24, Y
 4e0:	80 64       	ori	r24, 0x40	; 64
 4e2:	88 83       	st	Y, r24
 4e4:	88 81       	ld	r24, Y
 4e6:	80 61       	ori	r24, 0x10	; 16
 4e8:	88 83       	st	Y, r24
 4ea:	88 81       	ld	r24, Y
 4ec:	8f 7d       	andi	r24, 0xDF	; 223
 4ee:	88 83       	st	Y, r24
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	74 e2       	ldi	r23, 0x24	; 36
 4f4:	84 ef       	ldi	r24, 0xF4	; 244
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 94 17 03 	call	0x62e	; 0x62e <__udivmodsi4>
 4fc:	82 2f       	mov	r24, r18
 4fe:	0e 94 49 02 	call	0x492	; 0x492 <get_spi_prescaler_mask>
 502:	98 81       	ld	r25, Y
 504:	28 2f       	mov	r18, r24
 506:	23 70       	andi	r18, 0x03	; 3
 508:	92 2b       	or	r25, r18
 50a:	98 83       	st	Y, r25
 50c:	99 81       	ldd	r25, Y+1	; 0x01
 50e:	86 95       	lsr	r24
 510:	86 95       	lsr	r24
 512:	89 2b       	or	r24, r25
 514:	89 83       	std	Y+1, r24	; 0x01
 516:	cc 34       	cpi	r28, 0x4C	; 76
 518:	d1 05       	cpc	r29, r1
 51a:	c9 f4       	brne	.+50     	; 0x54e <SPI_master_init+0x80>
 51c:	60 e2       	ldi	r22, 0x20	; 32
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	83 e2       	ldi	r24, 0x23	; 35
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_Output_Init>
 528:	60 e2       	ldi	r22, 0x20	; 32
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	83 e2       	ldi	r24, 0x23	; 35
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_Output_Set>
 534:	60 e8       	ldi	r22, 0x80	; 128
 536:	70 e0       	ldi	r23, 0x00	; 0
 538:	83 e2       	ldi	r24, 0x23	; 35
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	0e 94 85 00 	call	0x10a	; 0x10a <GPIO_Output_Init>
 540:	60 e8       	ldi	r22, 0x80	; 128
 542:	70 e0       	ldi	r23, 0x00	; 0
 544:	83 e2       	ldi	r24, 0x23	; 35
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	0e 94 8f 00 	call	0x11e	; 0x11e <GPIO_Output_Clear>
 54c:	0f c0       	rjmp	.+30     	; 0x56c <SPI_master_init+0x9e>
 54e:	cc 3a       	cpi	r28, 0xAC	; 172
 550:	d1 05       	cpc	r29, r1
 552:	61 f4       	brne	.+24     	; 0x56c <SPI_master_init+0x9e>
 554:	8d b1       	in	r24, 0x0d	; 13
 556:	88 60       	ori	r24, 0x08	; 8
 558:	8d b9       	out	0x0d, r24	; 13
 55a:	8a b1       	in	r24, 0x0a	; 10
 55c:	80 68       	ori	r24, 0x80	; 128
 55e:	8a b9       	out	0x0a, r24	; 10
 560:	8e b1       	in	r24, 0x0e	; 14
 562:	88 60       	ori	r24, 0x08	; 8
 564:	8e b9       	out	0x0e, r24	; 14
 566:	8b b1       	in	r24, 0x0b	; 11
 568:	8f 77       	andi	r24, 0x7F	; 127
 56a:	8b b9       	out	0x0b, r24	; 11
 56c:	df 91       	pop	r29
 56e:	cf 91       	pop	r28
 570:	08 95       	ret

00000572 <SPI_transfer>:
uint8_t SPI_transfer(volatile SPI_t *SPI_addr, uint8_t send_value, uint8_t *data)
{
 572:	fc 01       	movw	r30, r24

    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
    // write data to spider
    SPI_addr->data_reg = send_value;
 574:	62 83       	std	Z+2, r22	; 0x02
uint8_t SPI_transfer(volatile SPI_t *SPI_addr, uint8_t send_value, uint8_t *data)
{

    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
 576:	20 e0       	ldi	r18, 0x00	; 0
 578:	30 e0       	ldi	r19, 0x00	; 0
    // write data to spider
    SPI_addr->data_reg = send_value;
    //wait for spif (bit 7) to be 0, this means SPDR can be written again
    do
    {
        status = (SPI_addr->status_reg);
 57a:	91 81       	ldd	r25, Z+1	; 0x01
        timeout++;
 57c:	2f 5f       	subi	r18, 0xFF	; 255
 57e:	3f 4f       	sbci	r19, 0xFF	; 255
    } while (((status&0x80) == 0) && timeout != 0 );
 580:	99 23       	and	r25, r25
 582:	1c f0       	brlt	.+6      	; 0x58a <SPI_transfer+0x18>
 584:	21 15       	cp	r18, r1
 586:	31 05       	cpc	r19, r1
 588:	c1 f7       	brne	.-16     	; 0x57a <SPI_transfer+0x8>

    if(timeout == 0)
 58a:	23 2b       	or	r18, r19
 58c:	21 f4       	brne	.+8      	; 0x596 <SPI_transfer+0x24>
    {
        *data = 0xFF;
 58e:	8f ef       	ldi	r24, 0xFF	; 255
 590:	fa 01       	movw	r30, r20
 592:	80 83       	st	Z, r24
        return ERROR_TIMEOUT;
 594:	08 95       	ret
    }
    else if ((status&0x40)!=0)
 596:	89 2f       	mov	r24, r25
 598:	80 74       	andi	r24, 0x40	; 64
 59a:	96 ff       	sbrs	r25, 6
 59c:	05 c0       	rjmp	.+10     	; 0x5a8 <SPI_transfer+0x36>
    {
        *data = (SPI_addr->data_reg);
 59e:	82 81       	ldd	r24, Z+2	; 0x02
 5a0:	fa 01       	movw	r30, r20
 5a2:	80 83       	st	Z, r24
        return ERROR_SPI;
 5a4:	8e ef       	ldi	r24, 0xFE	; 254
 5a6:	08 95       	ret
    }
    else 
    {
        *data = (SPI_addr->data_reg);
 5a8:	92 81       	ldd	r25, Z+2	; 0x02
 5aa:	fa 01       	movw	r30, r20
 5ac:	90 83       	st	Z, r25
        return 0;
    }
 5ae:	08 95       	ret

000005b0 <UART_init>:
    return (uint32_t)((((F_CPU/OSC_DIV)+(4UL*(2-UtwoX)*baud_rate))/(8UL*(2-UtwoX)*baud_rate))-1);
}
*/

void UART_init(volatile UART_t *UART_addr, uint16_t baud_rate)
{
 5b0:	fc 01       	movw	r30, r24
    //uint16_t UBRR_value = Calc_Baudrate(baud_rate, U2X_Val); //Where do we get U2X
    //uint16_t UBRR_value = (uint32_t)((((F_CPU / OSC_DIV) + (4UL * (2 - U2X_Val) * baud_rate)) / (8UL * (2 - U2X_Val) * baud_rate)) - 1);
    
    uint16_t UBRR_value = 103;

    UART_addr->UART_UBRRH = UBRR_value / 256;
 5b2:	15 82       	std	Z+5, r1	; 0x05
	UART_addr->UART_UBRRL = UBRR_value % 256; 
 5b4:	87 e6       	ldi	r24, 0x67	; 103
 5b6:	84 83       	std	Z+4, r24	; 0x04
    UART_addr->UART_UCSRA = (U2X_Val<<U2X); //set u2x here. currently off (0)
 5b8:	10 82       	st	Z, r1
// Determine the value for UCSRC using the settings for number of bits,
// parity and number of stop bits and write this value. In my solution, I
// defined constants for these settings to make the code more readable. You
// could also make sure your comments explain the value written to the
// register.
    UART_addr->UART_UCSRC = 0x00; // cleared 
 5ba:	12 82       	std	Z+2, r1	; 0x02
	UART_addr->UART_UCSRC = (async_mode_1 | async_mode_2 | no_parity_1 | no_parity_2 | one_stop_bit | eight_bit_data);
 5bc:	86 e0       	ldi	r24, 0x06	; 6
 5be:	82 83       	std	Z+2, r24	; 0x02

// Enable the transmitter and receiver with interrupts disabled by writing the
// appropriate value to UCSRB 
	UART_addr->UART_UCSRB = 0x00; //cleared
 5c0:	11 82       	std	Z+1, r1	; 0x01
    UART_addr->UART_UCSRB = (RXCIE_dis | TXCIE_dis | UDRIE_dis | RXEN_en | TXEN_en);
 5c2:	88 e1       	ldi	r24, 0x18	; 24
 5c4:	81 83       	std	Z+1, r24	; 0x01
 5c6:	08 95       	ret

000005c8 <UART_transmit>:
    return; 
}

void UART_transmit(volatile UART_t *UART_addr, uint8_t data)
{
 5c8:	fc 01       	movw	r30, r24
	
	uint8_t status = 0 ;
	do 
	{
		status = (uint8_t)(UART_addr->UART_UCSRA & (1<<UDRE)); 
 5ca:	90 81       	ld	r25, Z
		
	} while (status != (1<<UDRE));
 5cc:	95 ff       	sbrs	r25, 5
 5ce:	fd cf       	rjmp	.-6      	; 0x5ca <UART_transmit+0x2>
	
    //2: write val to UDR
    UART_addr->UART_UDR = data;
 5d0:	66 83       	std	Z+6, r22	; 0x06
 5d2:	08 95       	ret

000005d4 <UART_transmit_string>:
	}
	return index;
}

void UART_transmit_string(volatile UART_t * UART_addr, char string_name[], uint8_t num_bytes)
{
 5d4:	ef 92       	push	r14
 5d6:	ff 92       	push	r15
 5d8:	0f 93       	push	r16
 5da:	1f 93       	push	r17
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
 5e0:	7c 01       	movw	r14, r24
 5e2:	8b 01       	movw	r16, r22
 5e4:	d4 2f       	mov	r29, r20
	char temp8;
	uint8_t index;
	if(num_bytes==0)
 5e6:	41 11       	cpse	r20, r1
 5e8:	18 c0       	rjmp	.+48     	; 0x61a <UART_transmit_string+0x46>
	{
		temp8=string_name[0];
 5ea:	fb 01       	movw	r30, r22
 5ec:	60 81       	ld	r22, Z
                index=0;
 5ee:	c0 e0       	ldi	r28, 0x00	; 0
		while (temp8!=0)
 5f0:	08 c0       	rjmp	.+16     	; 0x602 <UART_transmit_string+0x2e>
		{
			UART_transmit(UART_addr, temp8);
 5f2:	c7 01       	movw	r24, r14
 5f4:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <UART_transmit>
			index++;
 5f8:	cf 5f       	subi	r28, 0xFF	; 255
			temp8=string_name[index];
 5fa:	f8 01       	movw	r30, r16
 5fc:	ec 0f       	add	r30, r28
 5fe:	f1 1d       	adc	r31, r1
 600:	60 81       	ld	r22, Z
	uint8_t index;
	if(num_bytes==0)
	{
		temp8=string_name[0];
                index=0;
		while (temp8!=0)
 602:	61 11       	cpse	r22, r1
 604:	f6 cf       	rjmp	.-20     	; 0x5f2 <UART_transmit_string+0x1e>
 606:	0c c0       	rjmp	.+24     	; 0x620 <UART_transmit_string+0x4c>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			UART_transmit(UART_addr, string_name[index]);
 608:	f8 01       	movw	r30, r16
 60a:	ec 0f       	add	r30, r28
 60c:	f1 1d       	adc	r31, r1
 60e:	60 81       	ld	r22, Z
 610:	c7 01       	movw	r24, r14
 612:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <UART_transmit>
			temp8=string_name[index];
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
 616:	cf 5f       	subi	r28, 0xFF	; 255
 618:	01 c0       	rjmp	.+2      	; 0x61c <UART_transmit_string+0x48>
 61a:	c0 e0       	ldi	r28, 0x00	; 0
 61c:	cd 17       	cp	r28, r29
 61e:	a0 f3       	brcs	.-24     	; 0x608 <UART_transmit_string+0x34>
		{
			UART_transmit(UART_addr, string_name[index]);
		}
	}
}
 620:	df 91       	pop	r29
 622:	cf 91       	pop	r28
 624:	1f 91       	pop	r17
 626:	0f 91       	pop	r16
 628:	ff 90       	pop	r15
 62a:	ef 90       	pop	r14
 62c:	08 95       	ret

0000062e <__udivmodsi4>:
 62e:	a1 e2       	ldi	r26, 0x21	; 33
 630:	1a 2e       	mov	r1, r26
 632:	aa 1b       	sub	r26, r26
 634:	bb 1b       	sub	r27, r27
 636:	fd 01       	movw	r30, r26
 638:	0d c0       	rjmp	.+26     	; 0x654 <__udivmodsi4_ep>

0000063a <__udivmodsi4_loop>:
 63a:	aa 1f       	adc	r26, r26
 63c:	bb 1f       	adc	r27, r27
 63e:	ee 1f       	adc	r30, r30
 640:	ff 1f       	adc	r31, r31
 642:	a2 17       	cp	r26, r18
 644:	b3 07       	cpc	r27, r19
 646:	e4 07       	cpc	r30, r20
 648:	f5 07       	cpc	r31, r21
 64a:	20 f0       	brcs	.+8      	; 0x654 <__udivmodsi4_ep>
 64c:	a2 1b       	sub	r26, r18
 64e:	b3 0b       	sbc	r27, r19
 650:	e4 0b       	sbc	r30, r20
 652:	f5 0b       	sbc	r31, r21

00000654 <__udivmodsi4_ep>:
 654:	66 1f       	adc	r22, r22
 656:	77 1f       	adc	r23, r23
 658:	88 1f       	adc	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	1a 94       	dec	r1
 65e:	69 f7       	brne	.-38     	; 0x63a <__udivmodsi4_loop>
 660:	60 95       	com	r22
 662:	70 95       	com	r23
 664:	80 95       	com	r24
 666:	90 95       	com	r25
 668:	9b 01       	movw	r18, r22
 66a:	ac 01       	movw	r20, r24
 66c:	bd 01       	movw	r22, r26
 66e:	cf 01       	movw	r24, r30
 670:	08 95       	ret

00000672 <_exit>:
 672:	f8 94       	cli

00000674 <__stop_program>:
 674:	ff cf       	rjmp	.-2      	; 0x674 <__stop_program>
