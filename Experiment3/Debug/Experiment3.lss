
Experiment3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800100  00000926  0000099a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000926  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000a0e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a40  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002381  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000fcd  00000000  00000000  00002f41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e64  00000000  00000000  00003f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c8  00000000  00000000  00004d74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000891  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001016  00000000  00000000  000058cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  000068e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__ctors_end>
   4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
   8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
   c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  10:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  14:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  18:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  1c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  20:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  24:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  28:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  2c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  30:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  34:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  38:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  3c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  40:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  44:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  48:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  4c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  50:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  54:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  58:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  5c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  60:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  64:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  68:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  6c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  70:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  74:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  78:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  7c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  80:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  84:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  88:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  8c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  90:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  94:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  98:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  9c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  a0:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  a4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  a8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  ac:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  b0:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  b4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  b8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  bc:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  c0:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  c4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  c8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  cc:	1a 04       	cpc	r1, r10
  ce:	12 04       	cpc	r1, r2
  d0:	0a 04       	cpc	r0, r10
  d2:	02 04       	cpc	r0, r2
  d4:	fa 03       	fmulsu	r23, r18
  d6:	f2 03       	fmuls	r23, r18
  d8:	ea 03       	fmulsu	r22, r18
  da:	e2 03       	fmuls	r22, r18
  dc:	da 03       	fmulsu	r21, r18
  de:	d2 03       	fmuls	r21, r18

000000e0 <__ctors_end>:
  e0:	11 24       	eor	r1, r1
  e2:	1f be       	out	0x3f, r1	; 63
  e4:	cf ef       	ldi	r28, 0xFF	; 255
  e6:	d8 e0       	ldi	r29, 0x08	; 8
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	cd bf       	out	0x3d, r28	; 61

000000ec <__do_copy_data>:
  ec:	11 e0       	ldi	r17, 0x01	; 1
  ee:	a0 e0       	ldi	r26, 0x00	; 0
  f0:	b1 e0       	ldi	r27, 0x01	; 1
  f2:	e6 e2       	ldi	r30, 0x26	; 38
  f4:	f9 e0       	ldi	r31, 0x09	; 9
  f6:	02 c0       	rjmp	.+4      	; 0xfc <__do_copy_data+0x10>
  f8:	05 90       	lpm	r0, Z+
  fa:	0d 92       	st	X+, r0
  fc:	a4 37       	cpi	r26, 0x74	; 116
  fe:	b1 07       	cpc	r27, r17
 100:	d9 f7       	brne	.-10     	; 0xf8 <__do_copy_data+0xc>

00000102 <__do_clear_bss>:
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	a4 e7       	ldi	r26, 0x74	; 116
 106:	b1 e0       	ldi	r27, 0x01	; 1
 108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
 10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
 10c:	a4 37       	cpi	r26, 0x74	; 116
 10e:	b2 07       	cpc	r27, r18
 110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>
 112:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
 116:	0c 94 91 04 	jmp	0x922	; 0x922 <_exit>

0000011a <__bad_interrupt>:
 11a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011e <GPIO_Output_Init>:

//Sets DDRX bit to make port pin an output
void GPIO_Output_Init(volatile GPIO_port_t *port_addr, uint8_t pin_mask)
{
  
  port_addr->DDR_REG |= (pin_mask);
 11e:	fc 01       	movw	r30, r24
 120:	21 81       	ldd	r18, Z+1	; 0x01
 122:	62 2b       	or	r22, r18
 124:	61 83       	std	Z+1, r22	; 0x01
 126:	08 95       	ret

00000128 <GPIO_Output_Set>:

// Sets the GPIO output to 1
void GPIO_Output_Set(volatile GPIO_port_t *port_addr, uint8_t pin_mask)
{
  //dereferences port address' port register via struct, sets to 1 with |=
  port_addr->PORT_REG |= (pin_mask);
 128:	fc 01       	movw	r30, r24
 12a:	22 81       	ldd	r18, Z+2	; 0x02
 12c:	62 2b       	or	r22, r18
 12e:	62 83       	std	Z+2, r22	; 0x02
 130:	08 95       	ret

00000132 <GPIO_Output_Clear>:
}

// Clears the GPIO output to 0
void GPIO_Output_Clear(volatile GPIO_port_t *port_addr, uint8_t pin_mask)
{
 132:	fc 01       	movw	r30, r24
  ////dereferences port address' port register via struct, sets to 0 with &= ~()
  port_addr->PORT_REG &= ~(pin_mask);
 134:	92 81       	ldd	r25, Z+2	; 0x02
 136:	60 95       	com	r22
 138:	69 23       	and	r22, r25
 13a:	62 83       	std	Z+2, r22	; 0x02
 13c:	08 95       	ret

0000013e <main>:
#include "SPI.h"
#include "gpio_output.h"
#include "UART_Print.h"

int main(void)
{
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
 146:	2e 97       	sbiw	r28, 0x0e	; 14
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	f8 94       	cli
 14c:	de bf       	out	0x3e, r29	; 62
 14e:	0f be       	out	0x3f, r0	; 63
 150:	cd bf       	out	0x3d, r28	; 61
	//exp 2 inits
	UART_init(UART0, BAUD_RATE);
 152:	60 e8       	ldi	r22, 0x80	; 128
 154:	75 e2       	ldi	r23, 0x25	; 37
 156:	80 ec       	ldi	r24, 0xC0	; 192
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 2a 04 	call	0x854	; 0x854 <UART_init>
	UART_init(UART1, BAUD_RATE);
 15e:	60 e8       	ldi	r22, 0x80	; 128
 160:	75 e2       	ldi	r23, 0x25	; 37
 162:	88 ec       	ldi	r24, 0xC8	; 200
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 2a 04 	call	0x854	; 0x854 <UART_init>
	UART_init(UART2, BAUD_RATE);
 16a:	60 e8       	ldi	r22, 0x80	; 128
 16c:	75 e2       	ldi	r23, 0x25	; 37
 16e:	80 ed       	ldi	r24, 0xD0	; 208
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 2a 04 	call	0x854	; 0x854 <UART_init>

	//exp3 inits
	SPI_master_init(SPI0, 400000U); // 0 is used for SD card, OLED, MP3
 176:	40 e8       	ldi	r20, 0x80	; 128
 178:	5a e1       	ldi	r21, 0x1A	; 26
 17a:	66 e0       	ldi	r22, 0x06	; 6
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	8c e4       	ldi	r24, 0x4C	; 76
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 39 03 	call	0x672	; 0x672 <SPI_master_init>
	//SPI_master_init(SPI1, 2500000U);
	uint8_t data = 0x52;
 186:	82 e5       	ldi	r24, 0x52	; 82
 188:	89 83       	std	Y+1, r24	; 0x01
	uint8_t error =  0;
	//uint32_t arg = 0x00000000;
	enum ErrorTypes typederror = 0;
	
	
	char start[] = "Start\n";
 18a:	87 e0       	ldi	r24, 0x07	; 7
 18c:	e0 e1       	ldi	r30, 0x10	; 16
 18e:	f1 e0       	ldi	r31, 0x01	; 1
 190:	de 01       	movw	r26, r28
 192:	12 96       	adiw	r26, 0x02	; 2
 194:	01 90       	ld	r0, Z+
 196:	0d 92       	st	X+, r0
 198:	8a 95       	dec	r24
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x56>
	char stop[] = "Stop\n";
 19c:	86 e0       	ldi	r24, 0x06	; 6
 19e:	e7 e1       	ldi	r30, 0x17	; 23
 1a0:	f1 e0       	ldi	r31, 0x01	; 1
 1a2:	de 01       	movw	r26, r28
 1a4:	19 96       	adiw	r26, 0x09	; 9
 1a6:	01 90       	ld	r0, Z+
 1a8:	0d 92       	st	X+, r0
 1aa:	8a 95       	dec	r24
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0x68>
	
	// initialize SS AKA CS
	GPIO_Output_Init(PB, (1<<4));
 1ae:	60 e1       	ldi	r22, 0x10	; 16
 1b0:	83 e2       	ldi	r24, 0x23	; 35
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 8f 00 	call	0x11e	; 0x11e <GPIO_Output_Init>
	
	UART_transmit_string(UART1, start, 6);
 1b8:	46 e0       	ldi	r20, 0x06	; 6
 1ba:	be 01       	movw	r22, r28
 1bc:	6e 5f       	subi	r22, 0xFE	; 254
 1be:	7f 4f       	sbci	r23, 0xFF	; 255
 1c0:	88 ec       	ldi	r24, 0xC8	; 200
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 3c 04 	call	0x878	; 0x878 <UART_transmit_string>
	
	typederror = SD_init(SPI0);
 1c8:	8c e4       	ldi	r24, 0x4C	; 76
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 cc 01 	call	0x398	; 0x398 <SD_init>
	if (typederror != 0)
 1d0:	88 23       	and	r24, r24
 1d2:	29 f0       	breq	.+10     	; 0x1de <main+0xa0>
	{
		display_error(UART1, typederror);
 1d4:	68 2f       	mov	r22, r24
 1d6:	88 ec       	ldi	r24, 0xC8	; 200
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	0e 94 c5 03 	call	0x78a	; 0x78a <display_error>
	}
	

	UART_transmit_string(UART1, "SD initialized\n", 15);
 1de:	4f e0       	ldi	r20, 0x0F	; 15
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	71 e0       	ldi	r23, 0x01	; 1
 1e4:	88 ec       	ldi	r24, 0xC8	; 200
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 3c 04 	call	0x878	; 0x878 <UART_transmit_string>
		// to debug SPI_transmit on MSO: Trigger Menu: Type=Edge, Source=D0, Slope=All, Level=1.51, Normal
		//error = SPI_transmit(SPI0, 0xFF, data);
		//GPIO_Output_Clear(PB, (1<<4));
		
		
		error = SPI_transfer(SPI0, 0xFF, &data);
 1ec:	ae 01       	movw	r20, r28
 1ee:	4f 5f       	subi	r20, 0xFF	; 255
 1f0:	5f 4f       	sbci	r21, 0xFF	; 255
 1f2:	6f ef       	ldi	r22, 0xFF	; 255
 1f4:	8c e4       	ldi	r24, 0x4C	; 76
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 a6 03 	call	0x74c	; 0x74c <SPI_transfer>
		//error = send_command(SPI0, CMD0, arg);
		if(error != 0)
 1fc:	81 11       	cpse	r24, r1
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <main+0xc6>
		{
			break;
		}
		//error = SPI_receive(SPI0, &data);
		if(error != 0)
 200:	88 23       	and	r24, r24
 202:	a1 f3       	breq	.-24     	; 0x1ec <main+0xae>
		{
			break;
		}
	}
	
	UART_transmit_string(UART1, stop, 5);
 204:	45 e0       	ldi	r20, 0x05	; 5
 206:	be 01       	movw	r22, r28
 208:	67 5f       	subi	r22, 0xF7	; 247
 20a:	7f 4f       	sbci	r23, 0xFF	; 255
 20c:	88 ec       	ldi	r24, 0xC8	; 200
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 3c 04 	call	0x878	; 0x878 <UART_transmit_string>
	UART_transmit(UART1, data);
 214:	69 81       	ldd	r22, Y+1	; 0x01
 216:	88 ec       	ldi	r24, 0xC8	; 200
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 36 04 	call	0x86c	; 0x86c <UART_transmit>
	UART_transmit(UART1, '\n');
 21e:	6a e0       	ldi	r22, 0x0A	; 10
 220:	88 ec       	ldi	r24, 0xC8	; 200
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 36 04 	call	0x86c	; 0x86c <UART_transmit>
	return 0;
}
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	2e 96       	adiw	r28, 0x0e	; 14
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	f8 94       	cli
 232:	de bf       	out	0x3e, r29	; 62
 234:	0f be       	out	0x3f, r0	; 63
 236:	cd bf       	out	0x3d, r28	; 61
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <SD_CS_active>:
void SD_CS_active(volatile GPIO_port_t *port, uint8_t pin);
void SD_CS_inactive(volatile GPIO_port_t *port, uint8_t pin);

void SD_CS_active(volatile GPIO_port_t *port, uint8_t pin)
{
	GPIO_Output_Clear(port,pin);
 23e:	0e 94 99 00 	call	0x132	; 0x132 <GPIO_Output_Clear>
 242:	08 95       	ret

00000244 <SD_CS_inactive>:
}
void SD_CS_inactive(volatile GPIO_port_t *port, uint8_t pin)
{
	GPIO_Output_Set(port,pin);
 244:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Output_Set>
 248:	08 95       	ret

0000024a <send_command>:
}

uint8_t send_command (volatile SPI_t *SPI_addr, uint8_t command, uint32_t argument)
{
 24a:	8f 92       	push	r8
 24c:	9f 92       	push	r9
 24e:	af 92       	push	r10
 250:	bf 92       	push	r11
 252:	ef 92       	push	r14
 254:	ff 92       	push	r15
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	1f 92       	push	r1
 260:	cd b7       	in	r28, 0x3d	; 61
 262:	de b7       	in	r29, 0x3e	; 62
    uint8_t checksum = 0x01; // Default checksum value
    uint8_t data; // Placeholder for received SPI data

	//1: check if command is 6 bits (<= 63). If not, error flag & function exits.
	
	if (command > 63)
 264:	60 34       	cpi	r22, 0x40	; 64
 266:	e0 f5       	brcc	.+120    	; 0x2e0 <send_command+0x96>
 268:	49 01       	movw	r8, r18
 26a:	5a 01       	movw	r10, r20
 26c:	7c 01       	movw	r14, r24
	{
		//change this?
		return ERROR_SPI;
	}
	//2: command OR'd with 0x40 to append start and transmission bits to the first byte to send.
	command |= 0x40;
 26e:	16 2f       	mov	r17, r22
 270:	10 64       	ori	r17, 0x40	; 64
	//3: Send first byte using SPI_transfer. If error found from transfer, exit.
	errorStatus = SPI_transfer(SPI_addr, command, &data);
 272:	ae 01       	movw	r20, r28
 274:	4f 5f       	subi	r20, 0xFF	; 255
 276:	5f 4f       	sbci	r21, 0xFF	; 255
 278:	61 2f       	mov	r22, r17
 27a:	0e 94 a6 03 	call	0x74c	; 0x74c <SPI_transfer>
	if (errorStatus != 0) return errorStatus;
 27e:	81 11       	cpse	r24, r1
 280:	30 c0       	rjmp	.+96     	; 0x2e2 <send_command+0x98>
 282:	04 e0       	ldi	r16, 0x04	; 4
 284:	1c c0       	rjmp	.+56     	; 0x2be <send_command+0x74>
	//4: 32-bit arg sent, MSB first. Exit if error occurs.
	for (uint8_t i = 4; i > 0; i--) // Start from the MSB, i starts high
    {
		//this shifts right in multiples of 8. Since we can only send 8 bits, the first one (i=3) is shifted right 24b, sending the 8 MSBs first.
        errorStatus = SPI_transfer(SPI_addr, (argument >> (8 * (i-1))) & 0xFF, &data);
 286:	40 2f       	mov	r20, r16
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	41 50       	subi	r20, 0x01	; 1
 28c:	51 09       	sbc	r21, r1
 28e:	44 0f       	add	r20, r20
 290:	55 1f       	adc	r21, r21
 292:	44 0f       	add	r20, r20
 294:	55 1f       	adc	r21, r21
 296:	44 0f       	add	r20, r20
 298:	55 1f       	adc	r21, r21
 29a:	c5 01       	movw	r24, r10
 29c:	b4 01       	movw	r22, r8
 29e:	04 c0       	rjmp	.+8      	; 0x2a8 <send_command+0x5e>
 2a0:	96 95       	lsr	r25
 2a2:	87 95       	ror	r24
 2a4:	77 95       	ror	r23
 2a6:	67 95       	ror	r22
 2a8:	4a 95       	dec	r20
 2aa:	d2 f7       	brpl	.-12     	; 0x2a0 <send_command+0x56>
 2ac:	ae 01       	movw	r20, r28
 2ae:	4f 5f       	subi	r20, 0xFF	; 255
 2b0:	5f 4f       	sbci	r21, 0xFF	; 255
 2b2:	c7 01       	movw	r24, r14
 2b4:	0e 94 a6 03 	call	0x74c	; 0x74c <SPI_transfer>
        if (errorStatus != 0) return errorStatus;
 2b8:	81 11       	cpse	r24, r1
 2ba:	13 c0       	rjmp	.+38     	; 0x2e2 <send_command+0x98>
	command |= 0x40;
	//3: Send first byte using SPI_transfer. If error found from transfer, exit.
	errorStatus = SPI_transfer(SPI_addr, command, &data);
	if (errorStatus != 0) return errorStatus;
	//4: 32-bit arg sent, MSB first. Exit if error occurs.
	for (uint8_t i = 4; i > 0; i--) // Start from the MSB, i starts high
 2bc:	01 50       	subi	r16, 0x01	; 1
 2be:	01 11       	cpse	r16, r1
 2c0:	e2 cf       	rjmp	.-60     	; 0x286 <send_command+0x3c>
        if (errorStatus != 0) return errorStatus;
    }
	//5: checksum byte, lsb set to 1. If cmd is 0 or 8, checksum must be sent, otherwise 0x01 can be sent.
	//CMD0: 01 000000  or 0x40 in the first byte. We OR'd 0x40 so it's 01 and then the remaining 6 determines the cmd.
	//CMD8: 01 001000  or 0x48
	if (command == 0x40)
 2c2:	10 34       	cpi	r17, 0x40	; 64
 2c4:	11 f0       	breq	.+4      	; 0x2ca <send_command+0x80>

uint8_t send_command (volatile SPI_t *SPI_addr, uint8_t command, uint32_t argument)
{
	//Maybe we make a separate function call to return an error? seems like error-checking is common and there should be a clean solution.
	uint8_t errorStatus = 0; // No error by default
    uint8_t checksum = 0x01; // Default checksum value
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	01 c0       	rjmp	.+2      	; 0x2cc <send_command+0x82>
	//CMD0: 01 000000  or 0x40 in the first byte. We OR'd 0x40 so it's 01 and then the remaining 6 determines the cmd.
	//CMD8: 01 001000  or 0x48
	if (command == 0x40)
	{
		//CMD 0
		checksum = 0x95;
 2ca:	65 e9       	ldi	r22, 0x95	; 149
	}
	if (command == 0x48)
 2cc:	18 34       	cpi	r17, 0x48	; 72
 2ce:	09 f4       	brne	.+2      	; 0x2d2 <send_command+0x88>
	{
		//CMD 8
		checksum = 0x87; //found in notes
 2d0:	67 e8       	ldi	r22, 0x87	; 135
	}

	// data is overwritten here, does that matter?
	errorStatus = SPI_transfer(SPI_addr, checksum, &data);
 2d2:	ae 01       	movw	r20, r28
 2d4:	4f 5f       	subi	r20, 0xFF	; 255
 2d6:	5f 4f       	sbci	r21, 0xFF	; 255
 2d8:	c7 01       	movw	r24, r14
 2da:	0e 94 a6 03 	call	0x74c	; 0x74c <SPI_transfer>
	
	//6: return error status
	return errorStatus;
 2de:	01 c0       	rjmp	.+2      	; 0x2e2 <send_command+0x98>
	//1: check if command is 6 bits (<= 63). If not, error flag & function exits.
	
	if (command > 63)
	{
		//change this?
		return ERROR_SPI;
 2e0:	8e ef       	ldi	r24, 0xFE	; 254
	// data is overwritten here, does that matter?
	errorStatus = SPI_transfer(SPI_addr, checksum, &data);
	
	//6: return error status
	return errorStatus;
}
 2e2:	0f 90       	pop	r0
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	ff 90       	pop	r15
 2ee:	ef 90       	pop	r14
 2f0:	bf 90       	pop	r11
 2f2:	af 90       	pop	r10
 2f4:	9f 90       	pop	r9
 2f6:	8f 90       	pop	r8
 2f8:	08 95       	ret

000002fa <receive_response>:

// !!! The array_name parameter, when used, must be an array of defined size!
uint8_t receive_response (volatile SPI_t *SPI_addr, uint8_t number_of_bytes, uint8_t * array)
{
 2fa:	cf 92       	push	r12
 2fc:	df 92       	push	r13
 2fe:	ef 92       	push	r14
 300:	ff 92       	push	r15
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	1f 92       	push	r1
 30c:	cd b7       	in	r28, 0x3d	; 61
 30e:	de b7       	in	r29, 0x3e	; 62
 310:	7c 01       	movw	r14, r24
 312:	06 2f       	mov	r16, r22
 314:	6a 01       	movw	r12, r20
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
	uint8_t data=0;
 316:	19 82       	std	Y+1, r1	; 0x01

// !!! The array_name parameter, when used, must be an array of defined size!
uint8_t receive_response (volatile SPI_t *SPI_addr, uint8_t number_of_bytes, uint8_t * array)
{
	uint8_t errorStatus = 0;
	uint8_t timeout = 0;
 318:	10 e0       	ldi	r17, 0x00	; 0
	//size of response varies, can be 1-5 bytes. Response has short delay, 
	// 1. send 0xFF repeatedly, and keep reading the received value. This is all done using SPI_transfer. 
	//    continue until msb of received byte is 0 or timeout on the loop. If timed out, return error and send 0xFF.
	do
	{
		errorStatus = SPI_transfer(SPI_addr, 0xFF, &data); //SPI receive?
 31a:	ae 01       	movw	r20, r28
 31c:	4f 5f       	subi	r20, 0xFF	; 255
 31e:	5f 4f       	sbci	r21, 0xFF	; 255
 320:	6f ef       	ldi	r22, 0xFF	; 255
 322:	c7 01       	movw	r24, r14
 324:	0e 94 a6 03 	call	0x74c	; 0x74c <SPI_transfer>
		timeout++;
 328:	1f 5f       	subi	r17, 0xFF	; 255
	} while ( (data == 0xFF) && (timeout != 0) ); //data as 0xFF is an error in SPI_transfer
 32a:	89 81       	ldd	r24, Y+1	; 0x01
 32c:	8f 3f       	cpi	r24, 0xFF	; 255
 32e:	11 f4       	brne	.+4      	; 0x334 <receive_response+0x3a>
 330:	11 11       	cpse	r17, r1
 332:	f3 cf       	rjmp	.-26     	; 0x31a <receive_response+0x20>
	// handle timeout errors:
	//timeout =0; 
	//RETURN_IF_ERROR(timeout, 0, ERROR_TIMEOUT); 
	if (timeout == 0)
 334:	11 23       	and	r17, r17
 336:	29 f1       	breq	.+74     	; 0x382 <receive_response+0x88>
	{
			return ERROR_TIMEOUT;
		}
	else if ( (data & 0xFE)	!= 0x00 ) //0x00 and 0x01 are good values
 338:	98 2f       	mov	r25, r24
 33a:	9e 7f       	andi	r25, 0xFE	; 254
 33c:	21 f0       	breq	.+8      	; 0x346 <receive_response+0x4c>
	{
		*array = data; //return value to see error
 33e:	f6 01       	movw	r30, r12
 340:	80 83       	st	Z, r24
		return ERROR_SD;
 342:	8d ef       	ldi	r24, 0xFD	; 253
 344:	1f c0       	rjmp	.+62     	; 0x384 <receive_response+0x8a>
	}
	else
	{
		//receive the remainder of the bytes, if present.
		// 2. If more than one byte expected, 0xFF sent out and each received byte stored in array. Repeat until all bytes received.
		*array = data;
 346:	f6 01       	movw	r30, r12
 348:	80 83       	st	Z, r24
		if(number_of_bytes>1)
 34a:	02 30       	cpi	r16, 0x02	; 2
 34c:	78 f4       	brcc	.+30     	; 0x36c <receive_response+0x72>
 34e:	11 c0       	rjmp	.+34     	; 0x372 <receive_response+0x78>
		{
			//start at 1 bc just got index 0, 3 lines above this
			for(uint8_t i = 1; i <= number_of_bytes; i++)
			{
				errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
 350:	ae 01       	movw	r20, r28
 352:	4f 5f       	subi	r20, 0xFF	; 255
 354:	5f 4f       	sbci	r21, 0xFF	; 255
 356:	6f ef       	ldi	r22, 0xFF	; 255
 358:	c7 01       	movw	r24, r14
 35a:	0e 94 a6 03 	call	0x74c	; 0x74c <SPI_transfer>
				array[i] = data;
 35e:	f6 01       	movw	r30, r12
 360:	e1 0f       	add	r30, r17
 362:	f1 1d       	adc	r31, r1
 364:	89 81       	ldd	r24, Y+1	; 0x01
 366:	80 83       	st	Z, r24
		// 2. If more than one byte expected, 0xFF sent out and each received byte stored in array. Repeat until all bytes received.
		*array = data;
		if(number_of_bytes>1)
		{
			//start at 1 bc just got index 0, 3 lines above this
			for(uint8_t i = 1; i <= number_of_bytes; i++)
 368:	1f 5f       	subi	r17, 0xFF	; 255
 36a:	01 c0       	rjmp	.+2      	; 0x36e <receive_response+0x74>
 36c:	11 e0       	ldi	r17, 0x01	; 1
 36e:	01 17       	cp	r16, r17
 370:	78 f7       	brcc	.-34     	; 0x350 <receive_response+0x56>
			}
		}
	}
	
	// 3. an additional 0xFF byte should be sent after the entire response. Received value is irrelevant.
	errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
 372:	ae 01       	movw	r20, r28
 374:	4f 5f       	subi	r20, 0xFF	; 255
 376:	5f 4f       	sbci	r21, 0xFF	; 255
 378:	6f ef       	ldi	r22, 0xFF	; 255
 37a:	c7 01       	movw	r24, r14
 37c:	0e 94 a6 03 	call	0x74c	; 0x74c <SPI_transfer>
	// 4. return error value
	return errorStatus;
 380:	01 c0       	rjmp	.+2      	; 0x384 <receive_response+0x8a>
	// handle timeout errors:
	//timeout =0; 
	//RETURN_IF_ERROR(timeout, 0, ERROR_TIMEOUT); 
	if (timeout == 0)
	{
			return ERROR_TIMEOUT;
 382:	8f ef       	ldi	r24, 0xFF	; 255
	
	// 3. an additional 0xFF byte should be sent after the entire response. Received value is irrelevant.
	errorStatus = SPI_transfer(SPI_addr, 0xFF, &data);
	// 4. return error value
	return errorStatus;
}
 384:	0f 90       	pop	r0
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	ff 90       	pop	r15
 390:	ef 90       	pop	r14
 392:	df 90       	pop	r13
 394:	cf 90       	pop	r12
 396:	08 95       	ret

00000398 <SD_init>:

 uint8_t SD_init(volatile SPI_t *SPI_addr)
 {	
 398:	8f 92       	push	r8
 39a:	9f 92       	push	r9
 39c:	af 92       	push	r10
 39e:	bf 92       	push	r11
 3a0:	cf 92       	push	r12
 3a2:	df 92       	push	r13
 3a4:	ef 92       	push	r14
 3a6:	ff 92       	push	r15
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <SD_init+0x18>
 3b0:	00 d0       	rcall	.+0      	; 0x3b2 <SD_init+0x1a>
 3b2:	00 d0       	rcall	.+0      	; 0x3b4 <SD_init+0x1c>
 3b4:	cd b7       	in	r28, 0x3d	; 61
 3b6:	de b7       	in	r29, 0x3e	; 62
 3b8:	7c 01       	movw	r14, r24
	 //init spi to master mode (can this be done externally?)
	 
	 uint8_t errorStatus = 0;
	 uint8_t data = 0;
 3ba:	19 82       	std	Y+1, r1	; 0x01
	 uint32_t arg = 0x00000000;
     uint8_t receive_array[5] = {0,0,0,0,0,0,0,0};
 3bc:	fe 01       	movw	r30, r28
 3be:	32 96       	adiw	r30, 0x02	; 2
 3c0:	85 e0       	ldi	r24, 0x05	; 5
 3c2:	df 01       	movw	r26, r30
 3c4:	1d 92       	st	X+, r1
 3c6:	8a 95       	dec	r24
 3c8:	e9 f7       	brne	.-6      	; 0x3c4 <SD_init+0x2c>
	 uint32_t ACMD41_arg = 0x00000000;
	 uint16_t timeout = 0;
	 
	 //set CS to 1 (inactive) (which is PB4)
	 SD_CS_inactive(PB, (1<<4));
 3ca:	60 e1       	ldi	r22, 0x10	; 16
 3cc:	83 e2       	ldi	r24, 0x23	; 35
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 22 01 	call	0x244	; 0x244 <SD_CS_inactive>
	 //send 80 clock-cycles worth of transmits 
	 for(uint8_t i = 0; i < 8; i++)
 3d4:	10 e0       	ldi	r17, 0x00	; 0
 3d6:	08 c0       	rjmp	.+16     	; 0x3e8 <SD_init+0x50>
	 {
		 errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
 3d8:	ae 01       	movw	r20, r28
 3da:	4f 5f       	subi	r20, 0xFF	; 255
 3dc:	5f 4f       	sbci	r21, 0xFF	; 255
 3de:	6f ef       	ldi	r22, 0xFF	; 255
 3e0:	c7 01       	movw	r24, r14
 3e2:	0e 94 87 03 	call	0x70e	; 0x70e <SPI_transmit>
	 uint16_t timeout = 0;
	 
	 //set CS to 1 (inactive) (which is PB4)
	 SD_CS_inactive(PB, (1<<4));
	 //send 80 clock-cycles worth of transmits 
	 for(uint8_t i = 0; i < 8; i++)
 3e6:	1f 5f       	subi	r17, 0xFF	; 255
 3e8:	18 30       	cpi	r17, 0x08	; 8
 3ea:	b0 f3       	brcs	.-20     	; 0x3d8 <SD_init+0x40>
	 {
		 errorStatus = SPI_transmit(SPI_addr, 0xFF, &data);
	 }

	 //set SS to 0 (active)
	 SD_CS_active(PB, (1<<4));
 3ec:	60 e1       	ldi	r22, 0x10	; 16
 3ee:	83 e2       	ldi	r24, 0x23	; 35
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0e 94 1f 01 	call	0x23e	; 0x23e <SD_CS_active>
     *
     *  CMD0
     *
     *************/
	 
	 errorStatus = send_command(SPI_addr, CMD0, arg);
 3f6:	20 e0       	ldi	r18, 0x00	; 0
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	a9 01       	movw	r20, r18
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	c7 01       	movw	r24, r14
 400:	0e 94 25 01 	call	0x24a	; 0x24a <send_command>
	 if (errorStatus == 0)
 404:	81 11       	cpse	r24, r1
 406:	0c c0       	rjmp	.+24     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
	 {
		 errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
 408:	ae 01       	movw	r20, r28
 40a:	4e 5f       	subi	r20, 0xFE	; 254
 40c:	5f 4f       	sbci	r21, 0xFF	; 255
 40e:	61 e0       	ldi	r22, 0x01	; 1
 410:	c7 01       	movw	r24, r14
 412:	0e 94 7d 01 	call	0x2fa	; 0x2fa <receive_response>
		 //set CS to 1 (inactive) (which is PB4)
		 SD_CS_inactive(PB, (1<<4));
 416:	60 e1       	ldi	r22, 0x10	; 16
 418:	83 e2       	ldi	r24, 0x23	; 35
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 22 01 	call	0x244	; 0x244 <SD_CS_inactive>
	 }
	 if(receive_array[0] != 0x01)
 420:	8a 81       	ldd	r24, Y+2	; 0x02
 422:	81 30       	cpi	r24, 0x01	; 1
 424:	09 f0       	breq	.+2      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 426:	bc c0       	rjmp	.+376    	; 0x5a0 <__EEPROM_REGION_LENGTH__+0x1a0>
     *
     *  CMD8
     *
     *************/
	 //STEP C) send CM8, expecting R7. If voltage val != 0x01 or if check byte doesn't match, stop here.
	 SD_CS_active(PB, (1<<4));
 428:	60 e1       	ldi	r22, 0x10	; 16
 42a:	83 e2       	ldi	r24, 0x23	; 35
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 1f 01 	call	0x23e	; 0x23e <SD_CS_active>
	 errorStatus = send_command(SPI_addr, CMD8, 0x000001AA);
 432:	2a ea       	ldi	r18, 0xAA	; 170
 434:	31 e0       	ldi	r19, 0x01	; 1
 436:	40 e0       	ldi	r20, 0x00	; 0
 438:	50 e0       	ldi	r21, 0x00	; 0
 43a:	68 e0       	ldi	r22, 0x08	; 8
 43c:	c7 01       	movw	r24, r14
 43e:	0e 94 25 01 	call	0x24a	; 0x24a <send_command>
 442:	18 2f       	mov	r17, r24
	 if(errorStatus == 0)
 444:	81 11       	cpse	r24, r1
 446:	0d c0       	rjmp	.+26     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
	 {
		//loop at receive all 5 bytes, starting at MSB i think
		errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
 448:	ae 01       	movw	r20, r28
 44a:	4e 5f       	subi	r20, 0xFE	; 254
 44c:	5f 4f       	sbci	r21, 0xFF	; 255
 44e:	65 e0       	ldi	r22, 0x05	; 5
 450:	c7 01       	movw	r24, r14
 452:	0e 94 7d 01 	call	0x2fa	; 0x2fa <receive_response>
 456:	18 2f       	mov	r17, r24
	 	SD_CS_inactive(PB, (1<<4));
 458:	60 e1       	ldi	r22, 0x10	; 16
 45a:	83 e2       	ldi	r24, 0x23	; 35
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	0e 94 22 01 	call	0x244	; 0x244 <SD_CS_inactive>
	 }
	 
	 // if response is 0x05 (illegal cmd), flag it for later, bc it can't be high capacity (SDHC).
	 //check for R1 reponse
	 if((receive_array[0] == 0x01) && (errorStatus == 0))
 462:	8a 81       	ldd	r24, Y+2	; 0x02
 464:	81 30       	cpi	r24, 0x01	; 1
 466:	59 f4       	brne	.+22     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 468:	11 11       	cpse	r17, r1
 46a:	09 c0       	rjmp	.+18     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
	 {
		//expecting echo back of 0x000001AA
		if((receive_array[3] == 0x01 ) && (receive_array[4] == 0xAA))
 46c:	8d 81       	ldd	r24, Y+5	; 0x05
 46e:	81 30       	cpi	r24, 0x01	; 1
 470:	09 f0       	breq	.+2      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 472:	98 c0       	rjmp	.+304    	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
 474:	8e 81       	ldd	r24, Y+6	; 0x06
 476:	8a 3a       	cpi	r24, 0xAA	; 170
 478:	49 f0       	breq	.+18     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
		{
			ACMD41_arg = 0x40000000; //high voltage, v2.0
		}
		else
		{
			return ERROR_VOLTAGE;
 47a:	1c ef       	ldi	r17, 0xFC	; 252
 47c:	ae c0       	rjmp	.+348    	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
		}
	 }
	 else if(receive_array[0] == 0x05) //old card
 47e:	85 30       	cpi	r24, 0x05	; 5
 480:	09 f0       	breq	.+2      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 482:	92 c0       	rjmp	.+292    	; 0x5a8 <__EEPROM_REGION_LENGTH__+0x1a8>
	 {
		ACMD41_arg = 0x00000000; //v1.x
 484:	81 2c       	mov	r8, r1
 486:	91 2c       	mov	r9, r1
 488:	54 01       	movw	r10, r8
 48a:	05 c0       	rjmp	.+10     	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
	 if((receive_array[0] == 0x01) && (errorStatus == 0))
	 {
		//expecting echo back of 0x000001AA
		if((receive_array[3] == 0x01 ) && (receive_array[4] == 0xAA))
		{
			ACMD41_arg = 0x40000000; //high voltage, v2.0
 48c:	81 2c       	mov	r8, r1
 48e:	91 2c       	mov	r9, r1
 490:	54 01       	movw	r10, r8
 492:	68 94       	set
 494:	b6 f8       	bld	r11, 6
	/**************************
	*
	* 	CMD58
	*
	**************************/
	SD_CS_active(PB, (1<<4));
 496:	60 e1       	ldi	r22, 0x10	; 16
 498:	83 e2       	ldi	r24, 0x23	; 35
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	0e 94 1f 01 	call	0x23e	; 0x23e <SD_CS_active>
	errorStatus = send_command(SPI_addr, CMD58, arg); 	
 4a0:	20 e0       	ldi	r18, 0x00	; 0
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	a9 01       	movw	r20, r18
 4a6:	6a e3       	ldi	r22, 0x3A	; 58
 4a8:	c7 01       	movw	r24, r14
 4aa:	0e 94 25 01 	call	0x24a	; 0x24a <send_command>
	
	//check error
	if (errorStatus != 0x00)
 4ae:	81 11       	cpse	r24, r1
 4b0:	7d c0       	rjmp	.+250    	; 0x5ac <__EEPROM_REGION_LENGTH__+0x1ac>
	{
		return ERROR_CMD58;
	}

	//receive rsponffese from sd card
	errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
 4b2:	ae 01       	movw	r20, r28
 4b4:	4e 5f       	subi	r20, 0xFE	; 254
 4b6:	5f 4f       	sbci	r21, 0xFF	; 255
 4b8:	65 e0       	ldi	r22, 0x05	; 5
 4ba:	c7 01       	movw	r24, r14
 4bc:	0e 94 7d 01 	call	0x2fa	; 0x2fa <receive_response>
 4c0:	18 2f       	mov	r17, r24
	SD_CS_inactive(PB, (1<<4));
 4c2:	60 e1       	ldi	r22, 0x10	; 16
 4c4:	83 e2       	ldi	r24, 0x23	; 35
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 22 01 	call	0x244	; 0x244 <SD_CS_inactive>
	//check for error
	if (errorStatus != 0x00)
 4cc:	11 11       	cpse	r17, r1
 4ce:	70 c0       	rjmp	.+224    	; 0x5b0 <__EEPROM_REGION_LENGTH__+0x1b0>
	{
		return ERROR_CMD58;
	}
	//check for R3
	//check R1 + 32 bit OCR
	if(receive_array[0] != 0x01)
 4d0:	8a 81       	ldd	r24, Y+2	; 0x02
 4d2:	81 30       	cpi	r24, 0x01	; 1
 4d4:	09 f0       	breq	.+2      	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 4d6:	6e c0       	rjmp	.+220    	; 0x5b4 <__EEPROM_REGION_LENGTH__+0x1b4>
	{
		return ERROR_CMD58;
	}
	if((receive_array[2] & 0xFC) != 0xFC)
 4d8:	8c 81       	ldd	r24, Y+4	; 0x04
 4da:	8c 7f       	andi	r24, 0xFC	; 252
 4dc:	8c 3f       	cpi	r24, 0xFC	; 252
 4de:	09 f0       	breq	.+2      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 4e0:	6b c0       	rjmp	.+214    	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
 4e2:	c1 2c       	mov	r12, r1
 4e4:	d1 2c       	mov	r13, r1
 4e6:	34 c0       	rjmp	.+104    	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
	*
	**************************/
	
	while(receive_array[0] != 0x00)
	{
		SD_CS_active(PB, (1<<4));
 4e8:	60 e1       	ldi	r22, 0x10	; 16
 4ea:	83 e2       	ldi	r24, 0x23	; 35
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 1f 01 	call	0x23e	; 0x23e <SD_CS_active>
		//send cmd55 first, receive R1, 
		errorStatus = send_command(SPI_addr, CMD55, arg);
 4f2:	20 e0       	ldi	r18, 0x00	; 0
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	a9 01       	movw	r20, r18
 4f8:	67 e3       	ldi	r22, 0x37	; 55
 4fa:	c7 01       	movw	r24, r14
 4fc:	0e 94 25 01 	call	0x24a	; 0x24a <send_command>
		if(errorStatus != 0x00)
 500:	81 11       	cpse	r24, r1
 502:	5c c0       	rjmp	.+184    	; 0x5bc <__EEPROM_REGION_LENGTH__+0x1bc>
		{
			return ERROR_CMD55;
		}
		errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
 504:	ae 01       	movw	r20, r28
 506:	4e 5f       	subi	r20, 0xFE	; 254
 508:	5f 4f       	sbci	r21, 0xFF	; 255
 50a:	61 e0       	ldi	r22, 0x01	; 1
 50c:	c7 01       	movw	r24, r14
 50e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <receive_response>
		
		if(receive_array[0] != 0x01)
 512:	8a 81       	ldd	r24, Y+2	; 0x02
 514:	81 30       	cpi	r24, 0x01	; 1
 516:	09 f0       	breq	.+2      	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 518:	53 c0       	rjmp	.+166    	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
		{
			return ERROR_CMD55;
		}
		//then ACMD41 sent as CMD41 and R1 received all while CS=0.	Send ACMD41 until R1 is actually 0x00
		errorStatus = send_command(SPI_addr, CMD41, ACMD41_arg);
 51a:	a5 01       	movw	r20, r10
 51c:	94 01       	movw	r18, r8
 51e:	69 e2       	ldi	r22, 0x29	; 41
 520:	c7 01       	movw	r24, r14
 522:	0e 94 25 01 	call	0x24a	; 0x24a <send_command>
		if(errorStatus != 0x00)
 526:	81 11       	cpse	r24, r1
 528:	4d c0       	rjmp	.+154    	; 0x5c4 <__EEPROM_REGION_LENGTH__+0x1c4>
		{
			return ERROR_CMD41;
		}
		errorStatus = receive_response(SPI_addr, 1, receive_array);
 52a:	ae 01       	movw	r20, r28
 52c:	4e 5f       	subi	r20, 0xFE	; 254
 52e:	5f 4f       	sbci	r21, 0xFF	; 255
 530:	61 e0       	ldi	r22, 0x01	; 1
 532:	c7 01       	movw	r24, r14
 534:	0e 94 7d 01 	call	0x2fa	; 0x2fa <receive_response>
		if(errorStatus != 0x00)
 538:	81 11       	cpse	r24, r1
 53a:	46 c0       	rjmp	.+140    	; 0x5c8 <__EEPROM_REGION_LENGTH__+0x1c8>
		{
			return ERROR_CMD41;
		}
		timeout++;
 53c:	bf ef       	ldi	r27, 0xFF	; 255
 53e:	cb 1a       	sub	r12, r27
 540:	db 0a       	sbc	r13, r27
		if (timeout == 0)
 542:	09 f4       	brne	.+2      	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
 544:	43 c0       	rjmp	.+134    	; 0x5cc <__EEPROM_REGION_LENGTH__+0x1cc>
		{
			return ERROR_CMD41_TIMEOUT;
		}
		SD_CS_inactive(PB, (1<<4));
 546:	60 e1       	ldi	r22, 0x10	; 16
 548:	83 e2       	ldi	r24, 0x23	; 35
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	0e 94 22 01 	call	0x244	; 0x244 <SD_CS_inactive>
	*
	* 	ACMD41
	*
	**************************/
	
	while(receive_array[0] != 0x00)
 550:	1a 81       	ldd	r17, Y+2	; 0x02
 552:	11 11       	cpse	r17, r1
 554:	c9 cf       	rjmp	.-110    	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
	/**************************
	*
	* 	CMD58 again
	*
	**************************/
	SD_CS_active(PB, (1<<4));
 556:	60 e1       	ldi	r22, 0x10	; 16
 558:	83 e2       	ldi	r24, 0x23	; 35
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	0e 94 1f 01 	call	0x23e	; 0x23e <SD_CS_active>
	errorStatus = send_command(SPI_addr, CMD58, arg); 	
 560:	20 e0       	ldi	r18, 0x00	; 0
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	a9 01       	movw	r20, r18
 566:	6a e3       	ldi	r22, 0x3A	; 58
 568:	c7 01       	movw	r24, r14
 56a:	0e 94 25 01 	call	0x24a	; 0x24a <send_command>
	
	//check error
	if (errorStatus != 0x00)
 56e:	81 11       	cpse	r24, r1
 570:	2f c0       	rjmp	.+94     	; 0x5d0 <__EEPROM_REGION_LENGTH__+0x1d0>
	{
		return ERROR_CMD58;
	}

	//receive rsponffese from sd card
	errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
 572:	ae 01       	movw	r20, r28
 574:	4e 5f       	subi	r20, 0xFE	; 254
 576:	5f 4f       	sbci	r21, 0xFF	; 255
 578:	65 e0       	ldi	r22, 0x05	; 5
 57a:	c7 01       	movw	r24, r14
 57c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <receive_response>
 580:	f8 2e       	mov	r15, r24
	SD_CS_inactive(PB, (1<<4));
 582:	60 e1       	ldi	r22, 0x10	; 16
 584:	83 e2       	ldi	r24, 0x23	; 35
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	0e 94 22 01 	call	0x244	; 0x244 <SD_CS_inactive>
	//check for error
	if (errorStatus != 0x00)
 58c:	f1 10       	cpse	r15, r1
 58e:	22 c0       	rjmp	.+68     	; 0x5d4 <__EEPROM_REGION_LENGTH__+0x1d4>
	{
		return ERROR_CMD58;
	}
	//check for R3
	//check R1 + 32 bit OCR
	if((receive_array[1] & 0x80) != 0x80)
 590:	8b 81       	ldd	r24, Y+3	; 0x03
 592:	88 23       	and	r24, r24
 594:	0c f5       	brge	.+66     	; 0x5d8 <__EEPROM_REGION_LENGTH__+0x1d8>
	{
		return ERROR_CMD58;
	}
	else if((receive_array[1] & 0xC0) != 0xC0)
 596:	80 7c       	andi	r24, 0xC0	; 192
 598:	80 3c       	cpi	r24, 0xC0	; 192
 59a:	f9 f0       	breq	.+62     	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
	{
		return ERROR_CMD58;
 59c:	19 ef       	ldi	r17, 0xF9	; 249
 59e:	1d c0       	rjmp	.+58     	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
		 //set CS to 1 (inactive) (which is PB4)
		 SD_CS_inactive(PB, (1<<4));
	 }
	 if(receive_array[0] != 0x01)
	 {
		 return ERROR_CMD0;
 5a0:	1b ef       	ldi	r17, 0xFB	; 251
 5a2:	1b c0       	rjmp	.+54     	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
		{
			ACMD41_arg = 0x40000000; //high voltage, v2.0
		}
		else
		{
			return ERROR_VOLTAGE;
 5a4:	1c ef       	ldi	r17, 0xFC	; 252
 5a6:	19 c0       	rjmp	.+50     	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
		ACMD41_arg = 0x00000000; //v1.x
		//sd_card_type = ??
	 }
	 else
	 {
		return ERROR_CMD8;
 5a8:	1a ef       	ldi	r17, 0xFA	; 250
 5aa:	17 c0       	rjmp	.+46     	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
	errorStatus = send_command(SPI_addr, CMD58, arg); 	
	
	//check error
	if (errorStatus != 0x00)
	{
		return ERROR_CMD58;
 5ac:	19 ef       	ldi	r17, 0xF9	; 249
 5ae:	15 c0       	rjmp	.+42     	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
	errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
	SD_CS_inactive(PB, (1<<4));
	//check for error
	if (errorStatus != 0x00)
	{
		return ERROR_CMD58;
 5b0:	19 ef       	ldi	r17, 0xF9	; 249
 5b2:	13 c0       	rjmp	.+38     	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
	}
	//check for R3
	//check R1 + 32 bit OCR
	if(receive_array[0] != 0x01)
	{
		return ERROR_CMD58;
 5b4:	19 ef       	ldi	r17, 0xF9	; 249
 5b6:	11 c0       	rjmp	.+34     	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
	}
	if((receive_array[2] & 0xFC) != 0xFC)
	{
		return ERROR_CMD58;
 5b8:	19 ef       	ldi	r17, 0xF9	; 249
 5ba:	0f c0       	rjmp	.+30     	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
		SD_CS_active(PB, (1<<4));
		//send cmd55 first, receive R1, 
		errorStatus = send_command(SPI_addr, CMD55, arg);
		if(errorStatus != 0x00)
		{
			return ERROR_CMD55;
 5bc:	18 ef       	ldi	r17, 0xF8	; 248
 5be:	0d c0       	rjmp	.+26     	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
		}
		errorStatus = receive_response(SPI_addr, 1, &receive_array[0]);
		
		if(receive_array[0] != 0x01)
		{
			return ERROR_CMD55;
 5c0:	18 ef       	ldi	r17, 0xF8	; 248
 5c2:	0b c0       	rjmp	.+22     	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
		}
		//then ACMD41 sent as CMD41 and R1 received all while CS=0.	Send ACMD41 until R1 is actually 0x00
		errorStatus = send_command(SPI_addr, CMD41, ACMD41_arg);
		if(errorStatus != 0x00)
		{
			return ERROR_CMD41;
 5c4:	17 ef       	ldi	r17, 0xF7	; 247
 5c6:	09 c0       	rjmp	.+18     	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
		}
		errorStatus = receive_response(SPI_addr, 1, receive_array);
		if(errorStatus != 0x00)
		{
			return ERROR_CMD41;
 5c8:	17 ef       	ldi	r17, 0xF7	; 247
 5ca:	07 c0       	rjmp	.+14     	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
		}
		timeout++;
		if (timeout == 0)
		{
			return ERROR_CMD41_TIMEOUT;
 5cc:	16 ef       	ldi	r17, 0xF6	; 246
 5ce:	05 c0       	rjmp	.+10     	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
	errorStatus = send_command(SPI_addr, CMD58, arg); 	
	
	//check error
	if (errorStatus != 0x00)
	{
		return ERROR_CMD58;
 5d0:	19 ef       	ldi	r17, 0xF9	; 249
 5d2:	03 c0       	rjmp	.+6      	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
	errorStatus = receive_response(SPI_addr, 5, &receive_array[0]);
	SD_CS_inactive(PB, (1<<4));
	//check for error
	if (errorStatus != 0x00)
	{
		return ERROR_CMD58;
 5d4:	19 ef       	ldi	r17, 0xF9	; 249
 5d6:	01 c0       	rjmp	.+2      	; 0x5da <__EEPROM_REGION_LENGTH__+0x1da>
	}
	//check for R3
	//check R1 + 32 bit OCR
	if((receive_array[1] & 0x80) != 0x80)
	{
		return ERROR_CMD58;
 5d8:	19 ef       	ldi	r17, 0xF9	; 249
	{
		return ERROR_CMD58;
	}

	return 0;
 5da:	81 2f       	mov	r24, r17
 5dc:	26 96       	adiw	r28, 0x06	; 6
 5de:	0f b6       	in	r0, 0x3f	; 63
 5e0:	f8 94       	cli
 5e2:	de bf       	out	0x3e, r29	; 62
 5e4:	0f be       	out	0x3f, r0	; 63
 5e6:	cd bf       	out	0x3d, r28	; 61
 5e8:	df 91       	pop	r29
 5ea:	cf 91       	pop	r28
 5ec:	1f 91       	pop	r17
 5ee:	ff 90       	pop	r15
 5f0:	ef 90       	pop	r14
 5f2:	df 90       	pop	r13
 5f4:	cf 90       	pop	r12
 5f6:	bf 90       	pop	r11
 5f8:	af 90       	pop	r10
 5fa:	9f 90       	pop	r9
 5fc:	8f 90       	pop	r8
 5fe:	08 95       	ret

00000600 <round_up_pwr2>:
    else 
    {
        *data = (SPI_addr->data_reg);
        return 0;
    }
}
 600:	82 30       	cpi	r24, 0x02	; 2
 602:	a8 f0       	brcs	.+42     	; 0x62e <round_up_pwr2+0x2e>
 604:	81 38       	cpi	r24, 0x81	; 129
 606:	a8 f4       	brcc	.+42     	; 0x632 <round_up_pwr2+0x32>
 608:	81 50       	subi	r24, 0x01	; 1
 60a:	98 2f       	mov	r25, r24
 60c:	96 95       	lsr	r25
 60e:	89 2b       	or	r24, r25
 610:	98 2f       	mov	r25, r24
 612:	96 95       	lsr	r25
 614:	96 95       	lsr	r25
 616:	89 2b       	or	r24, r25
 618:	98 2f       	mov	r25, r24
 61a:	92 95       	swap	r25
 61c:	9f 70       	andi	r25, 0x0F	; 15
 61e:	89 2b       	or	r24, r25
 620:	98 2f       	mov	r25, r24
 622:	99 1f       	adc	r25, r25
 624:	99 27       	eor	r25, r25
 626:	99 1f       	adc	r25, r25
 628:	89 2b       	or	r24, r25
 62a:	8f 5f       	subi	r24, 0xFF	; 255
 62c:	08 95       	ret
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	08 95       	ret
 632:	80 e8       	ldi	r24, 0x80	; 128
 634:	08 95       	ret

00000636 <get_spi_prescaler_mask>:
 636:	0e 94 00 03 	call	0x600	; 0x600 <round_up_pwr2>
 63a:	80 31       	cpi	r24, 0x10	; 16
 63c:	c1 f0       	breq	.+48     	; 0x66e <get_spi_prescaler_mask+0x38>
 63e:	28 f4       	brcc	.+10     	; 0x64a <get_spi_prescaler_mask+0x14>
 640:	82 30       	cpi	r24, 0x02	; 2
 642:	79 f0       	breq	.+30     	; 0x662 <get_spi_prescaler_mask+0x2c>
 644:	88 30       	cpi	r24, 0x08	; 8
 646:	79 f0       	breq	.+30     	; 0x666 <get_spi_prescaler_mask+0x30>
 648:	06 c0       	rjmp	.+12     	; 0x656 <get_spi_prescaler_mask+0x20>
 64a:	80 34       	cpi	r24, 0x40	; 64
 64c:	31 f0       	breq	.+12     	; 0x65a <get_spi_prescaler_mask+0x24>
 64e:	80 38       	cpi	r24, 0x80	; 128
 650:	31 f0       	breq	.+12     	; 0x65e <get_spi_prescaler_mask+0x28>
 652:	80 32       	cpi	r24, 0x20	; 32
 654:	51 f0       	breq	.+20     	; 0x66a <get_spi_prescaler_mask+0x34>
 656:	80 e0       	ldi	r24, 0x00	; 0
 658:	08 95       	ret
 65a:	82 e0       	ldi	r24, 0x02	; 2
 65c:	08 95       	ret
 65e:	83 e0       	ldi	r24, 0x03	; 3
 660:	08 95       	ret
 662:	84 e0       	ldi	r24, 0x04	; 4
 664:	08 95       	ret
 666:	85 e0       	ldi	r24, 0x05	; 5
 668:	08 95       	ret
 66a:	86 e0       	ldi	r24, 0x06	; 6
 66c:	08 95       	ret
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	08 95       	ret

00000672 <SPI_master_init>:
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
 676:	ec 01       	movw	r28, r24
 678:	9a 01       	movw	r18, r20
 67a:	ab 01       	movw	r20, r22
 67c:	88 81       	ld	r24, Y
 67e:	83 7f       	andi	r24, 0xF3	; 243
 680:	88 83       	st	Y, r24
 682:	88 81       	ld	r24, Y
 684:	80 64       	ori	r24, 0x40	; 64
 686:	88 83       	st	Y, r24
 688:	88 81       	ld	r24, Y
 68a:	80 61       	ori	r24, 0x10	; 16
 68c:	88 83       	st	Y, r24
 68e:	88 81       	ld	r24, Y
 690:	8f 7d       	andi	r24, 0xDF	; 223
 692:	88 83       	st	Y, r24
 694:	60 e0       	ldi	r22, 0x00	; 0
 696:	74 e2       	ldi	r23, 0x24	; 36
 698:	84 ef       	ldi	r24, 0xF4	; 244
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__udivmodsi4>
 6a0:	82 2f       	mov	r24, r18
 6a2:	0e 94 1b 03 	call	0x636	; 0x636 <get_spi_prescaler_mask>
 6a6:	98 81       	ld	r25, Y
 6a8:	28 2f       	mov	r18, r24
 6aa:	23 70       	andi	r18, 0x03	; 3
 6ac:	92 2b       	or	r25, r18
 6ae:	98 83       	st	Y, r25
 6b0:	99 81       	ldd	r25, Y+1	; 0x01
 6b2:	86 95       	lsr	r24
 6b4:	86 95       	lsr	r24
 6b6:	89 2b       	or	r24, r25
 6b8:	89 83       	std	Y+1, r24	; 0x01
 6ba:	cc 34       	cpi	r28, 0x4C	; 76
 6bc:	d1 05       	cpc	r29, r1
 6be:	a9 f4       	brne	.+42     	; 0x6ea <SPI_master_init+0x78>
 6c0:	60 e2       	ldi	r22, 0x20	; 32
 6c2:	83 e2       	ldi	r24, 0x23	; 35
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e 94 8f 00 	call	0x11e	; 0x11e <GPIO_Output_Init>
 6ca:	60 e2       	ldi	r22, 0x20	; 32
 6cc:	83 e2       	ldi	r24, 0x23	; 35
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 94 00 	call	0x128	; 0x128 <GPIO_Output_Set>
 6d4:	60 e8       	ldi	r22, 0x80	; 128
 6d6:	83 e2       	ldi	r24, 0x23	; 35
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	0e 94 8f 00 	call	0x11e	; 0x11e <GPIO_Output_Init>
 6de:	60 e8       	ldi	r22, 0x80	; 128
 6e0:	83 e2       	ldi	r24, 0x23	; 35
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	0e 94 99 00 	call	0x132	; 0x132 <GPIO_Output_Clear>
 6e8:	0f c0       	rjmp	.+30     	; 0x708 <SPI_master_init+0x96>
 6ea:	cc 3a       	cpi	r28, 0xAC	; 172
 6ec:	d1 05       	cpc	r29, r1
 6ee:	61 f4       	brne	.+24     	; 0x708 <SPI_master_init+0x96>
 6f0:	8d b1       	in	r24, 0x0d	; 13
 6f2:	88 60       	ori	r24, 0x08	; 8
 6f4:	8d b9       	out	0x0d, r24	; 13
 6f6:	8a b1       	in	r24, 0x0a	; 10
 6f8:	80 68       	ori	r24, 0x80	; 128
 6fa:	8a b9       	out	0x0a, r24	; 10
 6fc:	8e b1       	in	r24, 0x0e	; 14
 6fe:	88 60       	ori	r24, 0x08	; 8
 700:	8e b9       	out	0x0e, r24	; 14
 702:	8b b1       	in	r24, 0x0b	; 11
 704:	8f 77       	andi	r24, 0x7F	; 127
 706:	8b b9       	out	0x0b, r24	; 11
 708:	df 91       	pop	r29
 70a:	cf 91       	pop	r28
 70c:	08 95       	ret

0000070e <SPI_transmit>:
 70e:	fc 01       	movw	r30, r24
 710:	62 83       	std	Z+2, r22	; 0x02
 712:	20 e0       	ldi	r18, 0x00	; 0
 714:	30 e0       	ldi	r19, 0x00	; 0
 716:	91 81       	ldd	r25, Z+1	; 0x01
 718:	2f 5f       	subi	r18, 0xFF	; 255
 71a:	3f 4f       	sbci	r19, 0xFF	; 255
 71c:	99 23       	and	r25, r25
 71e:	1c f0       	brlt	.+6      	; 0x726 <SPI_transmit+0x18>
 720:	21 15       	cp	r18, r1
 722:	31 05       	cpc	r19, r1
 724:	c1 f7       	brne	.-16     	; 0x716 <SPI_transmit+0x8>
 726:	23 2b       	or	r18, r19
 728:	21 f4       	brne	.+8      	; 0x732 <SPI_transmit+0x24>
 72a:	8f ef       	ldi	r24, 0xFF	; 255
 72c:	fa 01       	movw	r30, r20
 72e:	80 83       	st	Z, r24
 730:	08 95       	ret
 732:	89 2f       	mov	r24, r25
 734:	80 74       	andi	r24, 0x40	; 64
 736:	96 ff       	sbrs	r25, 6
 738:	05 c0       	rjmp	.+10     	; 0x744 <SPI_transmit+0x36>
 73a:	82 81       	ldd	r24, Z+2	; 0x02
 73c:	fa 01       	movw	r30, r20
 73e:	80 83       	st	Z, r24
 740:	8e ef       	ldi	r24, 0xFE	; 254
 742:	08 95       	ret
 744:	92 81       	ldd	r25, Z+2	; 0x02
 746:	fa 01       	movw	r30, r20
 748:	90 83       	st	Z, r25
 74a:	08 95       	ret

0000074c <SPI_transfer>:
uint8_t SPI_transfer(volatile SPI_t *SPI_addr, uint8_t send_value, uint8_t *data)
{
 74c:	fc 01       	movw	r30, r24

    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
    // write data to spider
    SPI_addr->data_reg = send_value;
 74e:	62 83       	std	Z+2, r22	; 0x02
uint8_t SPI_transfer(volatile SPI_t *SPI_addr, uint8_t send_value, uint8_t *data)
{

    // init var for loop
    uint8_t status;
    uint16_t timeout = 0;
 750:	20 e0       	ldi	r18, 0x00	; 0
 752:	30 e0       	ldi	r19, 0x00	; 0
    // write data to spider
    SPI_addr->data_reg = send_value;
    //wait for spif (bit 7) to be 0, this means SPDR can be written again
    do
    {
        status = (SPI_addr->status_reg);
 754:	91 81       	ldd	r25, Z+1	; 0x01
        timeout++;
 756:	2f 5f       	subi	r18, 0xFF	; 255
 758:	3f 4f       	sbci	r19, 0xFF	; 255
    } while (((status&0x80) == 0) && timeout != 0 );
 75a:	99 23       	and	r25, r25
 75c:	1c f0       	brlt	.+6      	; 0x764 <SPI_transfer+0x18>
 75e:	21 15       	cp	r18, r1
 760:	31 05       	cpc	r19, r1
 762:	c1 f7       	brne	.-16     	; 0x754 <SPI_transfer+0x8>

    if(timeout == 0)
 764:	23 2b       	or	r18, r19
 766:	21 f4       	brne	.+8      	; 0x770 <SPI_transfer+0x24>
    {
        *data = 0xFF;
 768:	8f ef       	ldi	r24, 0xFF	; 255
 76a:	fa 01       	movw	r30, r20
 76c:	80 83       	st	Z, r24
        return ERROR_TIMEOUT;
 76e:	08 95       	ret
    }
    else if ((status&0x40)!=0)
 770:	89 2f       	mov	r24, r25
 772:	80 74       	andi	r24, 0x40	; 64
 774:	96 ff       	sbrs	r25, 6
 776:	05 c0       	rjmp	.+10     	; 0x782 <SPI_transfer+0x36>
    {
        *data = (SPI_addr->data_reg);
 778:	82 81       	ldd	r24, Z+2	; 0x02
 77a:	fa 01       	movw	r30, r20
 77c:	80 83       	st	Z, r24
        return ERROR_SPI;
 77e:	8e ef       	ldi	r24, 0xFE	; 254
 780:	08 95       	ret
    }
    else 
    {
        *data = (SPI_addr->data_reg);
 782:	92 81       	ldd	r25, Z+2	; 0x02
 784:	fa 01       	movw	r30, r20
 786:	90 83       	st	Z, r25
        return 0;
    }
}
 788:	08 95       	ret

0000078a <display_error>:

void display_error(volatile UART_t * UART_addr, enum ErrorTypes error)
{
	switch(error)
 78a:	86 2f       	mov	r24, r22
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	fc 01       	movw	r30, r24
 790:	e6 5f       	subi	r30, 0xF6	; 246
 792:	f1 09       	sbc	r31, r1
 794:	ea 30       	cpi	r30, 0x0A	; 10
 796:	f1 05       	cpc	r31, r1
 798:	08 f0       	brcs	.+2      	; 0x79c <display_error+0x12>
 79a:	54 c0       	rjmp	.+168    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 79c:	ea 59       	subi	r30, 0x9A	; 154
 79e:	ff 4f       	sbci	r31, 0xFF	; 255
 7a0:	0c 94 8b 04 	jmp	0x916	; 0x916 <__tablejump2__>
	{
		case ERROR_TIMEOUT:
			UART_transmit_string(UART1, "timeout\n", 8);
 7a4:	48 e0       	ldi	r20, 0x08	; 8
 7a6:	6d e1       	ldi	r22, 0x1D	; 29
 7a8:	71 e0       	ldi	r23, 0x01	; 1
 7aa:	88 ec       	ldi	r24, 0xC8	; 200
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	0e 94 3c 04 	call	0x878	; 0x878 <UART_transmit_string>
			break;
 7b2:	08 95       	ret
		case ERROR_SPI:
			UART_transmit_string(UART1, "SPI\n", 4);
 7b4:	44 e0       	ldi	r20, 0x04	; 4
 7b6:	66 e2       	ldi	r22, 0x26	; 38
 7b8:	71 e0       	ldi	r23, 0x01	; 1
 7ba:	88 ec       	ldi	r24, 0xC8	; 200
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	0e 94 3c 04 	call	0x878	; 0x878 <UART_transmit_string>
			break;
 7c2:	08 95       	ret
		case ERROR_SD:
			UART_transmit_string(UART1, "SD\n", 3);
 7c4:	43 e0       	ldi	r20, 0x03	; 3
 7c6:	6b e2       	ldi	r22, 0x2B	; 43
 7c8:	71 e0       	ldi	r23, 0x01	; 1
 7ca:	88 ec       	ldi	r24, 0xC8	; 200
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	0e 94 3c 04 	call	0x878	; 0x878 <UART_transmit_string>
			break;
 7d2:	08 95       	ret
		case ERROR_VOLTAGE:
			UART_transmit_string(UART1, "VOLTAGE!!!!\n", 12);
 7d4:	4c e0       	ldi	r20, 0x0C	; 12
 7d6:	6f e2       	ldi	r22, 0x2F	; 47
 7d8:	71 e0       	ldi	r23, 0x01	; 1
 7da:	88 ec       	ldi	r24, 0xC8	; 200
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	0e 94 3c 04 	call	0x878	; 0x878 <UART_transmit_string>
			break;
 7e2:	08 95       	ret
		case ERROR_CMD0:
			UART_transmit_string(UART1, "CMD0\n", 5);
 7e4:	45 e0       	ldi	r20, 0x05	; 5
 7e6:	6c e3       	ldi	r22, 0x3C	; 60
 7e8:	71 e0       	ldi	r23, 0x01	; 1
 7ea:	88 ec       	ldi	r24, 0xC8	; 200
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	0e 94 3c 04 	call	0x878	; 0x878 <UART_transmit_string>
			break;
 7f2:	08 95       	ret
		case ERROR_CMD8:
			UART_transmit_string(UART1, "CMD8\n", 5);
 7f4:	45 e0       	ldi	r20, 0x05	; 5
 7f6:	62 e4       	ldi	r22, 0x42	; 66
 7f8:	71 e0       	ldi	r23, 0x01	; 1
 7fa:	88 ec       	ldi	r24, 0xC8	; 200
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	0e 94 3c 04 	call	0x878	; 0x878 <UART_transmit_string>
			break;
 802:	08 95       	ret
        case ERROR_CMD58:
			UART_transmit_string(UART1, "CMD58\n", 6);
 804:	46 e0       	ldi	r20, 0x06	; 6
 806:	68 e4       	ldi	r22, 0x48	; 72
 808:	71 e0       	ldi	r23, 0x01	; 1
 80a:	88 ec       	ldi	r24, 0xC8	; 200
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	0e 94 3c 04 	call	0x878	; 0x878 <UART_transmit_string>
			break;
 812:	08 95       	ret
        case ERROR_CMD55:
			UART_transmit_string(UART1, "CMD55\n", 6);
 814:	46 e0       	ldi	r20, 0x06	; 6
 816:	6f e4       	ldi	r22, 0x4F	; 79
 818:	71 e0       	ldi	r23, 0x01	; 1
 81a:	88 ec       	ldi	r24, 0xC8	; 200
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0e 94 3c 04 	call	0x878	; 0x878 <UART_transmit_string>
			break;
 822:	08 95       	ret
        case ERROR_CMD41:
			UART_transmit_string(UART1, "CMD41\n", 6);
 824:	46 e0       	ldi	r20, 0x06	; 6
 826:	66 e5       	ldi	r22, 0x56	; 86
 828:	71 e0       	ldi	r23, 0x01	; 1
 82a:	88 ec       	ldi	r24, 0xC8	; 200
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	0e 94 3c 04 	call	0x878	; 0x878 <UART_transmit_string>
			break;
 832:	08 95       	ret
        case ERROR_CMD41_TIMEOUT:
			UART_transmit_string(UART1, "CMD41TIME\n", 10);
 834:	4a e0       	ldi	r20, 0x0A	; 10
 836:	6d e5       	ldi	r22, 0x5D	; 93
 838:	71 e0       	ldi	r23, 0x01	; 1
 83a:	88 ec       	ldi	r24, 0xC8	; 200
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	0e 94 3c 04 	call	0x878	; 0x878 <UART_transmit_string>
			break;
 842:	08 95       	ret
		default:
			UART_transmit_string(UART1, "impossible\n", 11);
 844:	4b e0       	ldi	r20, 0x0B	; 11
 846:	68 e6       	ldi	r22, 0x68	; 104
 848:	71 e0       	ldi	r23, 0x01	; 1
 84a:	88 ec       	ldi	r24, 0xC8	; 200
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	0e 94 3c 04 	call	0x878	; 0x878 <UART_transmit_string>
 852:	08 95       	ret

00000854 <UART_init>:
    return (uint32_t)((((F_CPU/OSC_DIV)+(4UL*(2-UtwoX)*baud_rate))/(8UL*(2-UtwoX)*baud_rate))-1);
}
*/

void UART_init(volatile UART_t *UART_addr, uint16_t baud_rate)
{
 854:	fc 01       	movw	r30, r24
    //uint16_t UBRR_value = Calc_Baudrate(baud_rate, U2X_Val); //Where do we get U2X
    //uint16_t UBRR_value = (uint32_t)((((F_CPU / OSC_DIV) + (4UL * (2 - U2X_Val) * baud_rate)) / (8UL * (2 - U2X_Val) * baud_rate)) - 1);
    
    uint16_t UBRR_value = 103;

    UART_addr->UART_UBRRH = UBRR_value / 256;
 856:	15 82       	std	Z+5, r1	; 0x05
	UART_addr->UART_UBRRL = UBRR_value % 256; 
 858:	87 e6       	ldi	r24, 0x67	; 103
 85a:	84 83       	std	Z+4, r24	; 0x04
    UART_addr->UART_UCSRA = (U2X_Val<<U2X); //set u2x here. currently off (0)
 85c:	10 82       	st	Z, r1
// Determine the value for UCSRC using the settings for number of bits,
// parity and number of stop bits and write this value. In my solution, I
// defined constants for these settings to make the code more readable. You
// could also make sure your comments explain the value written to the
// register.
    UART_addr->UART_UCSRC = 0x00; // cleared 
 85e:	12 82       	std	Z+2, r1	; 0x02
	UART_addr->UART_UCSRC = (async_mode_1 | async_mode_2 | no_parity_1 | no_parity_2 | one_stop_bit | eight_bit_data);
 860:	86 e0       	ldi	r24, 0x06	; 6
 862:	82 83       	std	Z+2, r24	; 0x02

// Enable the transmitter and receiver with interrupts disabled by writing the
// appropriate value to UCSRB 
	UART_addr->UART_UCSRB = 0x00; //cleared
 864:	11 82       	std	Z+1, r1	; 0x01
    UART_addr->UART_UCSRB = (RXCIE_dis | TXCIE_dis | UDRIE_dis | RXEN_en | TXEN_en);
 866:	88 e1       	ldi	r24, 0x18	; 24
 868:	81 83       	std	Z+1, r24	; 0x01
 86a:	08 95       	ret

0000086c <UART_transmit>:
    return; 
}

void UART_transmit(volatile UART_t *UART_addr, uint8_t data)
{
 86c:	fc 01       	movw	r30, r24
	
	uint8_t status = 0 ;
	do 
	{
		status = (uint8_t)(UART_addr->UART_UCSRA & (1<<UDRE)); 
 86e:	90 81       	ld	r25, Z
		
	} while (status != (1<<UDRE));
 870:	95 ff       	sbrs	r25, 5
 872:	fd cf       	rjmp	.-6      	; 0x86e <UART_transmit+0x2>
	
    //2: write val to UDR
    UART_addr->UART_UDR = data;
 874:	66 83       	std	Z+6, r22	; 0x06
 876:	08 95       	ret

00000878 <UART_transmit_string>:
	}
	return index;
}

void UART_transmit_string(volatile UART_t * UART_addr, char string_name[], uint8_t num_bytes)
{
 878:	ef 92       	push	r14
 87a:	ff 92       	push	r15
 87c:	0f 93       	push	r16
 87e:	1f 93       	push	r17
 880:	cf 93       	push	r28
 882:	df 93       	push	r29
 884:	7c 01       	movw	r14, r24
 886:	8b 01       	movw	r16, r22
 888:	d4 2f       	mov	r29, r20
	char temp8;
	uint8_t index;
	if(num_bytes==0)
 88a:	41 11       	cpse	r20, r1
 88c:	18 c0       	rjmp	.+48     	; 0x8be <UART_transmit_string+0x46>
	{
		temp8=string_name[0];
 88e:	fb 01       	movw	r30, r22
 890:	60 81       	ld	r22, Z
                index=0;
 892:	c0 e0       	ldi	r28, 0x00	; 0
		while (temp8!=0)
 894:	08 c0       	rjmp	.+16     	; 0x8a6 <UART_transmit_string+0x2e>
		{
			UART_transmit(UART_addr, temp8);
 896:	c7 01       	movw	r24, r14
 898:	0e 94 36 04 	call	0x86c	; 0x86c <UART_transmit>
			index++;
 89c:	cf 5f       	subi	r28, 0xFF	; 255
			temp8=string_name[index];
 89e:	f8 01       	movw	r30, r16
 8a0:	ec 0f       	add	r30, r28
 8a2:	f1 1d       	adc	r31, r1
 8a4:	60 81       	ld	r22, Z
	uint8_t index;
	if(num_bytes==0)
	{
		temp8=string_name[0];
                index=0;
		while (temp8!=0)
 8a6:	61 11       	cpse	r22, r1
 8a8:	f6 cf       	rjmp	.-20     	; 0x896 <UART_transmit_string+0x1e>
 8aa:	0c c0       	rjmp	.+24     	; 0x8c4 <UART_transmit_string+0x4c>
	}
	else
	{
		for(index=0;index<num_bytes;index++)
		{
			UART_transmit(UART_addr, string_name[index]);
 8ac:	f8 01       	movw	r30, r16
 8ae:	ec 0f       	add	r30, r28
 8b0:	f1 1d       	adc	r31, r1
 8b2:	60 81       	ld	r22, Z
 8b4:	c7 01       	movw	r24, r14
 8b6:	0e 94 36 04 	call	0x86c	; 0x86c <UART_transmit>
			temp8=string_name[index];
		}
	}
	else
	{
		for(index=0;index<num_bytes;index++)
 8ba:	cf 5f       	subi	r28, 0xFF	; 255
 8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <UART_transmit_string+0x48>
 8be:	c0 e0       	ldi	r28, 0x00	; 0
 8c0:	cd 17       	cp	r28, r29
 8c2:	a0 f3       	brcs	.-24     	; 0x8ac <UART_transmit_string+0x34>
		{
			UART_transmit(UART_addr, string_name[index]);
		}
	}
}
 8c4:	df 91       	pop	r29
 8c6:	cf 91       	pop	r28
 8c8:	1f 91       	pop	r17
 8ca:	0f 91       	pop	r16
 8cc:	ff 90       	pop	r15
 8ce:	ef 90       	pop	r14
 8d0:	08 95       	ret

000008d2 <__udivmodsi4>:
 8d2:	a1 e2       	ldi	r26, 0x21	; 33
 8d4:	1a 2e       	mov	r1, r26
 8d6:	aa 1b       	sub	r26, r26
 8d8:	bb 1b       	sub	r27, r27
 8da:	fd 01       	movw	r30, r26
 8dc:	0d c0       	rjmp	.+26     	; 0x8f8 <__udivmodsi4_ep>

000008de <__udivmodsi4_loop>:
 8de:	aa 1f       	adc	r26, r26
 8e0:	bb 1f       	adc	r27, r27
 8e2:	ee 1f       	adc	r30, r30
 8e4:	ff 1f       	adc	r31, r31
 8e6:	a2 17       	cp	r26, r18
 8e8:	b3 07       	cpc	r27, r19
 8ea:	e4 07       	cpc	r30, r20
 8ec:	f5 07       	cpc	r31, r21
 8ee:	20 f0       	brcs	.+8      	; 0x8f8 <__udivmodsi4_ep>
 8f0:	a2 1b       	sub	r26, r18
 8f2:	b3 0b       	sbc	r27, r19
 8f4:	e4 0b       	sbc	r30, r20
 8f6:	f5 0b       	sbc	r31, r21

000008f8 <__udivmodsi4_ep>:
 8f8:	66 1f       	adc	r22, r22
 8fa:	77 1f       	adc	r23, r23
 8fc:	88 1f       	adc	r24, r24
 8fe:	99 1f       	adc	r25, r25
 900:	1a 94       	dec	r1
 902:	69 f7       	brne	.-38     	; 0x8de <__udivmodsi4_loop>
 904:	60 95       	com	r22
 906:	70 95       	com	r23
 908:	80 95       	com	r24
 90a:	90 95       	com	r25
 90c:	9b 01       	movw	r18, r22
 90e:	ac 01       	movw	r20, r24
 910:	bd 01       	movw	r22, r26
 912:	cf 01       	movw	r24, r30
 914:	08 95       	ret

00000916 <__tablejump2__>:
 916:	ee 0f       	add	r30, r30
 918:	ff 1f       	adc	r31, r31
 91a:	05 90       	lpm	r0, Z+
 91c:	f4 91       	lpm	r31, Z
 91e:	e0 2d       	mov	r30, r0
 920:	09 94       	ijmp

00000922 <_exit>:
 922:	f8 94       	cli

00000924 <__stop_program>:
 924:	ff cf       	rjmp	.-2      	; 0x924 <__stop_program>
